#!/usr/bin/env node
process.env.TF_CPP_MIN_LOG_LEVEL = '2';
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true})), module2);
};

// src/index.ts
var import_fs = __toModule(require("fs"));

// node_modules/quaesitor/dist/quaesitor-node.js
var import_tfjs_node = __toModule(require("@tensorflow/tfjs-node"));
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __markAsModule2 = (target) => __defProp2(target, "__esModule", {value: true});
var __commonJS = (callback, module2) => () => {
  if (!module2) {
    module2 = {exports: {}};
    callback(module2.exports, module2);
  }
  return module2.exports;
};
var __exportStar2 = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames2(module2))
      if (!__hasOwnProp2.call(target, key) && key !== "default")
        __defProp2(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc2(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule2 = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar2(__markAsModule2(__defProp2(module2 != null ? __create2(__getProtoOf2(module2)) : {}, "default", {value: module2, enumerable: true})), module2);
};
var __toBinary = true ? (base64) => new Uint8Array(Buffer.from(base64, "base64")) : /* @__PURE__ */ (() => {
  var table = new Uint8Array(128);
  for (var i2 = 0; i2 < 64; i2++)
    table[i2 < 26 ? i2 + 65 : i2 < 52 ? i2 + 71 : i2 < 62 ? i2 - 4 : i2 * 4 - 205] = i2;
  return (base64) => {
    var n = base64.length, bytes = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
    for (var i22 = 0, j = 0; i22 < n; ) {
      var c0 = table[base64.charCodeAt(i22++)], c1 = table[base64.charCodeAt(i22++)];
      var c2 = table[base64.charCodeAt(i22++)], c3 = table[base64.charCodeAt(i22++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();
var require_downsample = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _iterableToArrayLimit(arr, i2) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray(o2, minLen);
    var n = Object.prototype.toString.call(o2).slice(8, -1);
    if (n === "Object" && o2.constructor)
      n = o2.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o2);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o2, minLen);
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
  }
  var __isA = {
    "PointValueExtractor<unknown>": (value) => typeof value === "function",
    XYDataPoint: (value) => value !== void 0 && value !== null && __isA["X"](value["x"]) && typeof value["y"] === "number",
    X: (value) => typeof value === "number" || value instanceof Date
  };
  function calculateTriangleArea(pointA, pointB, pointC) {
    return Math.abs((pointA[0] - pointC[0]) * (pointB[1] - pointA[1]) - (pointA[0] - pointB[0]) * (pointC[1] - pointA[1])) / 2;
  }
  function calculateAverageDataPoint() {
    for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {
      points[_key] = arguments[_key];
    }
    var length = points.length;
    if (!length)
      return void 0;
    var averageX = 0;
    var averageY = 0;
    for (var i2 = 0; i2 < length; i2++) {
      averageX += points[i2][0];
      averageY += points[i2][1];
    }
    return [averageX / length, averageY / length];
  }
  function splitIntoBuckets(data, desiredLength) {
    if (data.length === 2) {
      return [[data[0]], [data[1]]];
    }
    var first = data[0];
    var center = data.slice(1, data.length - 1);
    var last = data[data.length - 1];
    var bucketSize = center.length / (desiredLength - 2);
    var splitData = [[first]];
    for (var i2 = 0; i2 < desiredLength - 2; i2++) {
      var bucketStartIndex = Math.floor(i2 * bucketSize);
      var bucketEndIndex = Math.floor((i2 + 1) * bucketSize);
      var dataPointsInBucket = center.slice(bucketStartIndex, bucketEndIndex);
      splitData.push(dataPointsInBucket);
    }
    splitData.push([last]);
    return splitData;
  }
  var calculateMean = (values) => {
    var m = 0;
    for (var i2 = 0; i2 < values.length; i2 += 1) {
      m += values[i2];
    }
    return m / values.length;
  };
  var calculateSTD = (values) => {
    var mean = calculateMean(values);
    var std = 0;
    for (var i2 = 0; i2 < values.length; i2 += 1) {
      std += (values[i2] - mean) * (values[i2] - mean);
    }
    return Math.sqrt(std / values.length);
  };
  var getPointValueExtractor = (accessor) => {
    if (__isA["PointValueExtractor<unknown>"](accessor))
      return accessor;
    return (point) => point[accessor];
  };
  var createNormalize = (x, y) => {
    var getX = getPointValueExtractor(x);
    var getY = getPointValueExtractor(y);
    return (data) => data.map((point) => [getX(point), getY(point)]);
  };
  var createXYDataPoint = (time, value) => ({
    x: time,
    y: value
  });
  var createLegacyDataPointConfig = () => ({
    x: (point) => {
      var t = __isA["XYDataPoint"](point) ? point.x : point[0];
      return t instanceof Date ? t.getTime() : t;
    },
    y: (point) => "y" in point ? point.y : point[1],
    toPoint: createXYDataPoint
  });
  var SMANumeric = function SMANumeric2(data, windowSize) {
    var slide = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    var output = [];
    var sum = 0;
    for (var i2 = 0; i2 < windowSize; i2++) {
      sum += data[i2];
    }
    for (var _i = windowSize; _i <= data.length; _i++) {
      if ((_i - windowSize) % slide === 0) {
        output.push(sum / windowSize);
      }
      sum += data[_i] - data[_i - windowSize];
    }
    return output;
  };
  var createSMA = (config) => {
    var timeExtractor = getPointValueExtractor(config.x);
    var valueExtractor = getPointValueExtractor(config.y);
    var pointFactory = config.toPoint;
    return function(values, windowSize) {
      var slide = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      if (values.length === 0)
        return [];
      var data = values.map(valueExtractor);
      var times = values.map(timeExtractor);
      var output = [];
      var sum = 0;
      for (var i2 = 0; i2 < windowSize; i2++) {
        sum += data[i2];
      }
      for (var _i2 = windowSize; _i2 <= data.length; _i2++) {
        if ((_i2 - windowSize) % slide === 0) {
          output.push(pointFactory((times[_i2 - windowSize] + times[_i2 - 1]) / 2, sum / windowSize, _i2 - windowSize));
        }
        sum += data[_i2] - data[_i2 - windowSize];
      }
      return output;
    };
  };
  var SMA = createSMA(createLegacyDataPointConfig());
  function fft(real, imag) {
    if (real.length != imag.length)
      throw "Mismatched lengths";
    var n = real.length;
    if (n == 0)
      return;
    else if ((n & n - 1) == 0)
      transformRadix2(real, imag);
    else
      transformBluestein(real, imag);
  }
  function inverseFFT(real, imag) {
    fft(imag, real);
  }
  function transformRadix2(real, imag) {
    if (real.length != imag.length)
      throw "Mismatched lengths";
    var n = real.length;
    if (n == 1)
      return;
    var levels = -1;
    for (var i2 = 0; i2 < 32; i2++) {
      if (1 << i2 == n)
        levels = i2;
    }
    if (levels == -1)
      throw "Length is not a power of 2";
    var cosTable = new Array(n / 2);
    var sinTable = new Array(n / 2);
    for (var _i = 0; _i < n / 2; _i++) {
      cosTable[_i] = Math.cos(2 * Math.PI * _i / n);
      sinTable[_i] = Math.sin(2 * Math.PI * _i / n);
    }
    for (var _i2 = 0; _i2 < n; _i2++) {
      var j = reverseBits(_i2, levels);
      if (j > _i2) {
        var temp = real[_i2];
        real[_i2] = real[j];
        real[j] = temp;
        temp = imag[_i2];
        imag[_i2] = imag[j];
        imag[j] = temp;
      }
    }
    for (var size = 2; size <= n; size *= 2) {
      var halfsize = size / 2;
      var tablestep = n / size;
      for (var _i3 = 0; _i3 < n; _i3 += size) {
        for (var _j = _i3, k = 0; _j < _i3 + halfsize; _j++, k += tablestep) {
          var tpre = real[_j + halfsize] * cosTable[k] + imag[_j + halfsize] * sinTable[k];
          var tpim = -real[_j + halfsize] * sinTable[k] + imag[_j + halfsize] * cosTable[k];
          real[_j + halfsize] = real[_j] - tpre;
          imag[_j + halfsize] = imag[_j] - tpim;
          real[_j] += tpre;
          imag[_j] += tpim;
        }
      }
    }
  }
  function reverseBits(x, bits) {
    var y = 0;
    for (var i2 = 0; i2 < bits; i2++) {
      y = y << 1 | x & 1;
      x >>>= 1;
    }
    return y;
  }
  function transformBluestein(real, imag) {
    if (real.length != imag.length)
      throw "Mismatched lengths";
    var n = real.length;
    var m = 1;
    while (m < n * 2 + 1) {
      m *= 2;
    }
    var cosTable = new Array(n);
    var sinTable = new Array(n);
    for (var i2 = 0; i2 < n; i2++) {
      var j = i2 * i2 % (n * 2);
      cosTable[i2] = Math.cos(Math.PI * j / n);
      sinTable[i2] = Math.sin(Math.PI * j / n);
    }
    var areal = new Array(m);
    var aimag = new Array(m);
    for (var _i4 = 0; _i4 < n; _i4++) {
      areal[_i4] = real[_i4] * cosTable[_i4] + imag[_i4] * sinTable[_i4];
      aimag[_i4] = -real[_i4] * sinTable[_i4] + imag[_i4] * cosTable[_i4];
    }
    for (var _i5 = n; _i5 < m; _i5++) {
      areal[_i5] = aimag[_i5] = 0;
    }
    var breal = new Array(m);
    var bimag = new Array(m);
    breal[0] = cosTable[0];
    bimag[0] = sinTable[0];
    for (var _i6 = 1; _i6 < n; _i6++) {
      breal[_i6] = breal[m - _i6] = cosTable[_i6];
      bimag[_i6] = bimag[m - _i6] = sinTable[_i6];
    }
    for (var _i7 = n; _i7 <= m - n; _i7++) {
      breal[_i7] = bimag[_i7] = 0;
    }
    var creal = new Array(m);
    var cimag = new Array(m);
    convolveComplex(areal, aimag, breal, bimag, creal, cimag);
    for (var _i8 = 0; _i8 < n; _i8++) {
      real[_i8] = creal[_i8] * cosTable[_i8] + cimag[_i8] * sinTable[_i8];
      imag[_i8] = -creal[_i8] * sinTable[_i8] + cimag[_i8] * cosTable[_i8];
    }
  }
  function convolveComplex(xreal, ximag, yreal, yimag, outreal, outimag) {
    if (xreal.length != ximag.length || xreal.length != yreal.length || yreal.length != yimag.length || xreal.length != outreal.length || outreal.length != outimag.length)
      throw "Mismatched lengths";
    var n = xreal.length;
    xreal = xreal.slice();
    ximag = ximag.slice();
    yreal = yreal.slice();
    yimag = yimag.slice();
    fft(xreal, ximag);
    fft(yreal, yimag);
    for (var i2 = 0; i2 < n; i2++) {
      var temp = xreal[i2] * yreal[i2] - ximag[i2] * yimag[i2];
      ximag[i2] = ximag[i2] * yreal[i2] + xreal[i2] * yimag[i2];
      xreal[i2] = temp;
    }
    inverseFFT(xreal, ximag);
    for (var _i9 = 0; _i9 < n; _i9++) {
      outreal[_i9] = xreal[_i9] / n;
      outimag[_i9] = ximag[_i9] / n;
    }
  }
  var calculateDiffs = (values) => {
    var length = values.length - 1;
    if (length < 1)
      return [];
    var diffs = new Array(length);
    for (var i2 = 0; i2 < length; i2++) {
      diffs[i2] = values[i2 + 1] - values[i2];
    }
    return diffs;
  };
  var calculateRoughness = (values) => calculateSTD(calculateDiffs(values));
  var calculateKurtosis = (values) => {
    var length = values.length;
    var mean = calculateMean(values);
    var u4 = 0;
    var variance = 0;
    var diff;
    var diffSqr;
    for (var i2 = 0; i2 < length; i2++) {
      diff = values[i2] - mean;
      diffSqr = diff * diff;
      u4 += diffSqr * diffSqr;
      variance += diffSqr;
    }
    return length * u4 / (variance * variance);
  };
  var findWindowSize = (head, tail, data, minRoughness, originalKurt, windowSize) => {
    while (head <= tail) {
      var w = Math.round((head + tail) / 2);
      var smoothed = SMANumeric(data, w, 1);
      var kurtosis = calculateKurtosis(smoothed);
      if (kurtosis >= originalKurt) {
        var roughness = calculateRoughness(smoothed);
        if (roughness < minRoughness) {
          windowSize = w;
          minRoughness = roughness;
        }
        head = w + 1;
      } else {
        tail = w - 1;
      }
    }
    return windowSize;
  };
  var calculatePeaks = function calculatePeaks2(correlations) {
    var threshold = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.2;
    var length = correlations.length;
    if (length <= 1)
      return [[], 0];
    var maxCorrelation = 0;
    var peaks = [];
    if (correlations.length > 1) {
      var positive = correlations[1] > correlations[0];
      var max = 1;
      for (var i2 = 2; i2 < correlations.length; i2 += 1) {
        if (!positive && correlations[i2] > correlations[i2 - 1]) {
          max = i2;
          positive = !positive;
        } else if (positive && correlations[i2] > correlations[max]) {
          max = i2;
        } else if (positive && correlations[i2] < correlations[i2 - 1]) {
          if (max > 1 && correlations[max] > threshold) {
            peaks.push(max);
            if (correlations[max] > maxCorrelation) {
              maxCorrelation = correlations[max];
            }
          }
          positive = !positive;
        }
      }
    }
    if (peaks.length <= 1) {
      for (var _i = 2; _i < length; _i += 1) {
        peaks.push(_i);
      }
    }
    return [peaks, maxCorrelation];
  };
  var calculateAutocorrelation = (values, maxLag) => {
    var length = values.length;
    var mean = calculateMean(values);
    var len = Math.pow(2, Math.trunc(Math.log2(length)) + 1);
    var fftreal = new Array(len).fill(0);
    var fftimg = new Array(len).fill(0);
    for (var i2 = 0; i2 < length; i2 += 1) {
      fftreal[i2] = values[i2] - mean;
    }
    fft(fftreal, fftimg);
    for (var _i2 = 0; _i2 < fftreal.length; _i2 += 1) {
      fftreal[_i2] = Math.pow(fftreal[_i2], 2) + Math.pow(fftimg[_i2], 2);
      fftimg[_i2] = 0;
    }
    inverseFFT(fftreal, fftimg);
    var correlations = [];
    for (var _i3 = 1; _i3 < maxLag; _i3++) {
      correlations[_i3] = fftreal[_i3] / fftreal[0];
    }
    var _calculatePeaks = calculatePeaks(correlations), _calculatePeaks2 = _slicedToArray(_calculatePeaks, 2), peaks = _calculatePeaks2[0], maxCorrelation = _calculatePeaks2[1];
    return {
      correlations,
      peaks,
      maxCorrelation
    };
  };
  var createASAP = (config) => {
    var valueExtractor = getPointValueExtractor(config.y);
    var SMA2 = createSMA(config);
    return function ASAP2(values, resolution) {
      if (values.length === 0)
        return [];
      if (resolution <= 0) {
        throw new Error("Supplied non-positive resolution parameter to ASAP: ".concat(resolution));
      }
      if (values.length >= 2 * resolution) {
        var scale = Math.trunc(values.length / resolution);
        return ASAP2(SMA2(values, scale, scale), resolution);
      }
      var data = values.map(valueExtractor);
      var _calculateAutocorrela = calculateAutocorrelation(data, Math.round(data.length / 10)), correlations = _calculateAutocorrela.correlations, peaks = _calculateAutocorrela.peaks, maxCorrelation = _calculateAutocorrela.maxCorrelation;
      var originalKurtosis = calculateKurtosis(data);
      var minRoughness = calculateRoughness(data);
      var windowSize = 1;
      var lb = 1;
      var largestFeasible = -1;
      var tail = data.length / 10;
      for (var i2 = peaks.length - 1; i2 >= 0; i2 -= 1) {
        var w = peaks[i2];
        if (w < lb || w === 1) {
          break;
        } else if (Math.sqrt(1 - correlations[w]) * windowSize > Math.sqrt(1 - correlations[windowSize]) * w) {
          continue;
        }
        var smoothed = SMANumeric(data, w, 1);
        var kurtosis = calculateKurtosis(smoothed);
        var roughness = calculateRoughness(smoothed);
        if (kurtosis >= originalKurtosis) {
          if (roughness < minRoughness) {
            minRoughness = roughness;
            windowSize = w;
          }
          lb = Math.round(Math.max(w * Math.sqrt((maxCorrelation - 1) / (correlations[w] - 1)), lb));
          if (largestFeasible < 0) {
            largestFeasible = i2;
          }
        }
      }
      if (largestFeasible > 0) {
        if (largestFeasible < peaks.length - 2) {
          tail = peaks[largestFeasible + 1];
        }
        lb = Math.max(lb, peaks[largestFeasible] + 1);
      }
      windowSize = findWindowSize(lb, tail, data, minRoughness, originalKurtosis, windowSize);
      return SMA2(values, windowSize, 1);
    };
  };
  var ASAP = createASAP(createLegacyDataPointConfig());
  function LTTBIndexesForBuckets(buckets) {
    var bucketCount = buckets.length;
    var bucketDataPointIndexes = [0];
    var previousBucketsSize = 1;
    var lastSelectedDataPoint = buckets[0][0];
    for (var index2 = 1; index2 < bucketCount - 1; index2++) {
      var bucket = buckets[index2];
      var nextBucket = buckets[index2 + 1];
      var averageDataPointFromNextBucket = calculateAverageDataPoint(...nextBucket);
      if (averageDataPointFromNextBucket === void 0)
        continue;
      var maxArea = -1;
      var maxAreaIndex = -1;
      for (var j = 0; j < bucket.length; j++) {
        var dataPoint = bucket[j];
        var area = calculateTriangleArea(lastSelectedDataPoint, dataPoint, averageDataPointFromNextBucket);
        if (area > maxArea) {
          maxArea = area;
          maxAreaIndex = j;
        }
      }
      lastSelectedDataPoint = bucket[maxAreaIndex];
      bucketDataPointIndexes.push(previousBucketsSize + maxAreaIndex);
      previousBucketsSize += bucket.length;
    }
    bucketDataPointIndexes.push(previousBucketsSize);
    return bucketDataPointIndexes;
  }
  var createLTTB = (config) => {
    var normalize = createNormalize(config.x, config.y);
    return (data, desiredLength) => {
      if (desiredLength < 0) {
        throw new Error("Supplied negative desiredLength parameter to LTTB: ".concat(desiredLength));
      }
      var length = data.length;
      if (length <= 1 || length <= desiredLength)
        return data;
      var normalizedData = normalize(data);
      var buckets = splitIntoBuckets(normalizedData, desiredLength);
      var bucketDataPointIndexes = LTTBIndexesForBuckets(buckets);
      return bucketDataPointIndexes.map((index2) => data[index2]);
    };
  };
  var LTTB2 = createLTTB(createLegacyDataPointConfig());
  var mergeBucketAt = (buckets, index2) => {
    var bucketA = buckets[index2];
    var bucketB = buckets[index2 + 1];
    if (!bucketA || !bucketB) {
      throw new Error("Bucket index out of range for merging: ".concat(index2, " (allowed indexes are 0 - ").concat(buckets.length - 2));
    }
    var mergedBucket = [...bucketA, ...bucketB];
    var newBuckets = buckets.slice();
    newBuckets.splice(index2, 2, mergedBucket);
    return newBuckets;
  };
  var splitBucketAt = (buckets, index2) => {
    var bucket = buckets[index2];
    if (!bucket) {
      throw new Error("Bucket index out of range for splitting: ".concat(index2, " (allowed indexes are 0 - ").concat(buckets.length - 1));
    }
    var bucketSize = bucket.length;
    if (bucketSize < 2) {
      return buckets;
    }
    var bucketALength = Math.ceil(bucketSize / 2);
    var bucketA = bucket.slice(0, bucketALength);
    var bucketB = bucket.slice(bucketALength);
    var newBuckets = buckets.slice();
    newBuckets.splice(index2, 1, bucketA, bucketB);
    return newBuckets;
  };
  var calculateLinearRegressionCoefficients = (data) => {
    var N = data.length;
    var averageX = 0;
    var averageY = 0;
    for (var i2 = 0; i2 < N; i2++) {
      averageX += data[i2][0];
      averageY += data[i2][1];
    }
    averageX /= N;
    averageY /= N;
    var aNumerator = 0;
    var aDenominator = 0;
    for (var _i = 0; _i < N; _i++) {
      var _data$_i = _slicedToArray(data[_i], 2), x = _data$_i[0], y = _data$_i[1];
      aNumerator += (x - averageX) * (y - averageY);
      aDenominator += (x - averageX) * (x - averageX);
    }
    var a = aNumerator / aDenominator;
    var b = averageY - a * averageX;
    return [a, b];
  };
  var calculateSSEForBucket = (dataPoints) => {
    var _calculateLinearRegre = calculateLinearRegressionCoefficients(dataPoints), _calculateLinearRegre2 = _slicedToArray(_calculateLinearRegre, 2), a = _calculateLinearRegre2[0], b = _calculateLinearRegre2[1];
    var sumStandardErrorsSquared = 0;
    for (var i2 = 0; i2 < dataPoints.length; i2++) {
      var dataPoint = dataPoints[i2];
      var standardError = dataPoint[1] - (a * dataPoint[0] + b);
      sumStandardErrorsSquared += standardError * standardError;
    }
    return sumStandardErrorsSquared;
  };
  var calculateSSEForBuckets = (buckets) => {
    var sse = [0];
    for (var i2 = 1; i2 < buckets.length - 1; i2++) {
      var previousBucket = buckets[i2 - 1];
      var currentBucket = buckets[i2];
      var nextBucket = buckets[i2 + 1];
      var bucketWithAdjacentPoints = [previousBucket[previousBucket.length - 1], ...currentBucket, nextBucket[0]];
      sse.push(calculateSSEForBucket(bucketWithAdjacentPoints));
    }
    sse.push(0);
    return sse;
  };
  var findLowestSSEAdjacentBucketsIndex = (sse, ignoreIndex) => {
    var minSSESum = Number.MAX_VALUE;
    var minSSEIndex = void 0;
    for (var i2 = 1; i2 < sse.length - 2; i2++) {
      if (i2 === ignoreIndex || i2 + 1 === ignoreIndex) {
        continue;
      }
      if (sse[i2] + sse[i2 + 1] < minSSESum) {
        minSSESum = sse[i2] + sse[i2 + 1];
        minSSEIndex = i2;
      }
    }
    return minSSEIndex;
  };
  var findHighestSSEBucketIndex = (buckets, sse) => {
    var maxSSE = 0;
    var maxSSEIndex = void 0;
    for (var i2 = 1; i2 < sse.length - 1; i2++) {
      if (buckets[i2].length > 1 && sse[i2] > maxSSE) {
        maxSSE = sse[i2];
        maxSSEIndex = i2;
      }
    }
    return maxSSEIndex;
  };
  var createLTD = (config) => {
    var normalize = createNormalize(config.x, config.y);
    return (data, desiredLength) => {
      if (desiredLength < 0) {
        throw new Error("Supplied negative desiredLength parameter to LTD: ".concat(desiredLength));
      }
      var length = data.length;
      if (length <= 2 || length <= desiredLength) {
        return data;
      }
      var normalizedData = normalize(data);
      var buckets = splitIntoBuckets(normalizedData, desiredLength);
      var numIterations = length * 10 / desiredLength;
      for (var iteration = 0; iteration < numIterations; iteration++) {
        var sseForBuckets = calculateSSEForBuckets(buckets);
        var highestSSEBucketIndex = findHighestSSEBucketIndex(buckets, sseForBuckets);
        if (highestSSEBucketIndex === void 0) {
          break;
        }
        var lowestSSEAdajacentBucketIndex = findLowestSSEAdjacentBucketsIndex(sseForBuckets, highestSSEBucketIndex);
        if (lowestSSEAdajacentBucketIndex === void 0) {
          break;
        }
        buckets = splitBucketAt(buckets, highestSSEBucketIndex);
        buckets = mergeBucketAt(buckets, lowestSSEAdajacentBucketIndex > highestSSEBucketIndex ? lowestSSEAdajacentBucketIndex + 1 : lowestSSEAdajacentBucketIndex);
      }
      var dataPointIndexes = LTTBIndexesForBuckets(buckets);
      var dataPoints = dataPointIndexes.map((index2) => data[index2]);
      return dataPoints;
    };
  };
  var LTD = createLTD(createLegacyDataPointConfig());
  var createLTOB = (config) => {
    var normalize = createNormalize(config.x, config.y);
    return (data, desiredLength) => {
      if (desiredLength < 0) {
        throw new Error("Supplied negative desiredLength parameter to LTOB: ".concat(desiredLength));
      }
      var length = data.length;
      if (length <= 1 || length <= desiredLength) {
        return data;
      }
      var bucketSize = length / desiredLength;
      var normalizedData = normalize(data);
      var sampledData = [data[0]];
      for (var bucket = 1; bucket < desiredLength - 1; bucket++) {
        var startIndex = Math.floor(bucket * bucketSize);
        var endIndex = Math.min(length - 1, (bucket + 1) * bucketSize);
        var maxArea = -1;
        var maxAreaIndex = -1;
        for (var j = startIndex; j < endIndex; j++) {
          var previousDataPoint = normalizedData[j - 1];
          var dataPoint = normalizedData[j];
          var nextDataPoint = normalizedData[j + 1];
          var area = calculateTriangleArea(previousDataPoint, dataPoint, nextDataPoint);
          if (area > maxArea) {
            maxArea = area;
            maxAreaIndex = j;
          }
        }
        sampledData.push(data[maxAreaIndex]);
      }
      sampledData.push(data[length - 1]);
      return sampledData;
    };
  };
  var LTOB = createLTOB(createLegacyDataPointConfig());
  var index = {
    ASAP,
    LTD,
    LTOB,
    LTTB: LTTB2,
    SMA,
    createASAP,
    createLTD,
    createLTOB,
    createLTTB,
    createSMA
  };
  exports2.ASAP = ASAP;
  exports2.LTD = LTD;
  exports2.LTOB = LTOB;
  exports2.LTTB = LTTB2;
  exports2.SMA = SMA;
  exports2.createASAP = createASAP;
  exports2.createLTD = createLTD;
  exports2.createLTOB = createLTOB;
  exports2.createLTTB = createLTTB;
  exports2.createSMA = createSMA;
  exports2.default = index;
});
var require_xxhash_wasm = __commonJS((exports2, module2) => {
  "use strict";
  var t = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 20, 3, 96, 2, 127, 127, 0, 96, 3, 127, 127, 127, 1, 127, 96, 3, 127, 127, 126, 1, 126, 3, 4, 3, 1, 2, 0, 5, 3, 1, 0, 1, 7, 23, 3, 3, 109, 101, 109, 2, 0, 5, 120, 120, 104, 51, 50, 0, 0, 5, 120, 120, 104, 54, 52, 0, 2, 10, 192, 9, 3, 242, 2, 1, 4, 127, 32, 0, 32, 1, 106, 33, 3, 32, 1, 32, 1, 65, 16, 79, 4, 127, 32, 3, 65, 16, 107, 33, 6, 32, 2, 65, 168, 136, 141, 161, 2, 106, 33, 1, 32, 2, 65, 247, 148, 175, 175, 120, 106, 33, 4, 32, 2, 65, 177, 243, 221, 241, 121, 107, 33, 5, 3, 64, 32, 1, 32, 0, 40, 2, 0, 65, 247, 148, 175, 175, 120, 108, 106, 65, 13, 119, 65, 177, 243, 221, 241, 121, 108, 33, 1, 32, 4, 32, 0, 65, 4, 106, 34, 0, 40, 2, 0, 65, 247, 148, 175, 175, 120, 108, 106, 65, 13, 119, 65, 177, 243, 221, 241, 121, 108, 33, 4, 32, 2, 32, 0, 65, 4, 106, 34, 0, 40, 2, 0, 65, 247, 148, 175, 175, 120, 108, 106, 65, 13, 119, 65, 177, 243, 221, 241, 121, 108, 33, 2, 32, 5, 32, 0, 65, 4, 106, 34, 0, 40, 2, 0, 65, 247, 148, 175, 175, 120, 108, 106, 65, 13, 119, 65, 177, 243, 221, 241, 121, 108, 33, 5, 32, 0, 65, 4, 106, 34, 0, 32, 6, 77, 13, 0, 11, 32, 2, 65, 12, 119, 32, 5, 65, 18, 119, 106, 32, 4, 65, 7, 119, 106, 32, 1, 65, 1, 119, 106, 5, 32, 2, 65, 177, 207, 217, 178, 1, 106, 11, 106, 33, 2, 3, 64, 32, 0, 65, 4, 106, 32, 3, 77, 4, 64, 32, 2, 32, 0, 40, 2, 0, 65, 189, 220, 202, 149, 124, 108, 106, 65, 17, 119, 65, 175, 214, 211, 190, 2, 108, 33, 2, 32, 0, 65, 4, 106, 33, 0, 12, 1, 11, 11, 3, 64, 32, 0, 32, 3, 73, 4, 64, 32, 2, 32, 0, 45, 0, 0, 65, 177, 207, 217, 178, 1, 108, 106, 65, 11, 119, 65, 177, 243, 221, 241, 121, 108, 33, 2, 32, 0, 65, 1, 106, 33, 0, 12, 1, 11, 11, 32, 2, 32, 2, 65, 15, 118, 115, 65, 247, 148, 175, 175, 120, 108, 34, 0, 65, 13, 118, 32, 0, 115, 65, 189, 220, 202, 149, 124, 108, 34, 0, 65, 16, 118, 32, 0, 115, 11, 150, 6, 2, 2, 127, 3, 126, 32, 0, 32, 1, 106, 33, 3, 32, 1, 65, 32, 79, 4, 126, 32, 3, 65, 32, 107, 33, 4, 32, 2, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 124, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 124, 33, 5, 32, 2, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 124, 33, 6, 32, 2, 66, 0, 124, 33, 7, 32, 2, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 125, 33, 2, 3, 64, 32, 5, 32, 0, 41, 3, 0, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 124, 66, 31, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 33, 5, 32, 6, 32, 0, 65, 8, 106, 34, 0, 41, 3, 0, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 124, 66, 31, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 33, 6, 32, 7, 32, 0, 65, 8, 106, 34, 0, 41, 3, 0, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 124, 66, 31, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 33, 7, 32, 2, 32, 0, 65, 8, 106, 34, 0, 41, 3, 0, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 124, 66, 31, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 33, 2, 32, 0, 65, 8, 106, 34, 0, 32, 4, 77, 13, 0, 11, 32, 7, 66, 12, 137, 32, 2, 66, 18, 137, 124, 32, 6, 66, 7, 137, 124, 32, 5, 66, 1, 137, 124, 32, 5, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 66, 0, 124, 66, 31, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 133, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 66, 227, 220, 202, 149, 252, 206, 242, 245, 133, 127, 124, 32, 6, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 66, 0, 124, 66, 31, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 133, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 66, 227, 220, 202, 149, 252, 206, 242, 245, 133, 127, 124, 32, 7, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 66, 0, 124, 66, 31, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 133, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 66, 227, 220, 202, 149, 252, 206, 242, 245, 133, 127, 124, 32, 2, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 66, 0, 124, 66, 31, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 133, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 66, 227, 220, 202, 149, 252, 206, 242, 245, 133, 127, 124, 5, 32, 2, 66, 197, 207, 217, 178, 241, 229, 186, 234, 39, 124, 11, 32, 1, 173, 124, 33, 2, 3, 64, 32, 0, 65, 8, 106, 32, 3, 77, 4, 64, 32, 2, 32, 0, 41, 3, 0, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 66, 0, 124, 66, 31, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 133, 66, 27, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 66, 227, 220, 202, 149, 252, 206, 242, 245, 133, 127, 124, 33, 2, 32, 0, 65, 8, 106, 33, 0, 12, 1, 11, 11, 32, 0, 65, 4, 106, 32, 3, 77, 4, 64, 32, 2, 32, 0, 53, 2, 0, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 133, 66, 23, 137, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 66, 249, 243, 221, 241, 153, 246, 153, 171, 22, 124, 33, 2, 32, 0, 65, 4, 106, 33, 0, 11, 3, 64, 32, 0, 32, 3, 73, 4, 64, 32, 2, 32, 0, 49, 0, 0, 66, 197, 207, 217, 178, 241, 229, 186, 234, 39, 126, 133, 66, 11, 137, 66, 135, 149, 175, 175, 152, 182, 222, 155, 158, 127, 126, 33, 2, 32, 0, 65, 1, 106, 33, 0, 12, 1, 11, 11, 32, 2, 32, 2, 66, 33, 136, 133, 66, 207, 214, 211, 190, 210, 199, 171, 217, 66, 126, 34, 2, 66, 29, 136, 32, 2, 133, 66, 249, 243, 221, 241, 153, 246, 153, 171, 22, 126, 34, 2, 66, 32, 136, 32, 2, 133, 11, 50, 1, 1, 126, 32, 0, 32, 0, 65, 8, 106, 32, 1, 32, 0, 65, 4, 106, 53, 2, 0, 32, 0, 53, 2, 0, 66, 32, 134, 132, 16, 1, 34, 2, 66, 32, 136, 62, 2, 0, 32, 0, 65, 4, 106, 32, 2, 62, 2, 0, 11]);
  var n = new (require("util")).TextEncoder();
  function e(t2, n2, e2) {
    if (n2.buffer.byteLength < t2.byteLength + e2) {
      const r = Math.ceil((t2.byteLength + e2 - n2.buffer.byteLength) / 65536);
      n2.grow(r);
    }
    new Uint8Array(n2.buffer, e2).set(t2);
  }
  module2.exports = async function() {
    const {instance: {exports: {mem: r, xxh32: i2, xxh64: o2}}} = await WebAssembly.instantiate(t);
    function u2(t2, n2 = 0) {
      return e(t2, r, 0), i2(0, t2.byteLength, n2) >>> 0;
    }
    function c(t2, n2 = 0, i22 = 0) {
      e(t2, r, 8);
      const u3 = new DataView(r.buffer);
      return u3.setUint32(0, n2, true), u3.setUint32(4, i22, true), o2(0, t2.byteLength), u3;
    }
    return {h32: function(t2, e2 = 0) {
      return u2(n.encode(t2), e2).toString(16);
    }, h32Raw: u2, h64: function(t2, e2 = 0, r2 = 0) {
      const i22 = c(n.encode(t2), e2, r2);
      return i22.getUint32(0, true).toString(16) + i22.getUint32(4, true).toString(16);
    }, h64Raw: function(t2, n2 = 0, e2 = 0) {
      return new Uint8Array(c(t2, n2, e2).buffer, 0, 8);
    }};
  };
});
var require_ieee754 = __commonJS((exports2) => {
  exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i2 = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i2];
    i2 += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
    }
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i2], i2 += d, nBits -= 8) {
    }
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i2 = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i2] = m & 255, i2 += d, m /= 256, mLen -= 8) {
    }
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
    }
    buffer[offset + i2 - d] |= s * 128;
  };
});
var require_pbf = __commonJS((exports2, module2) => {
  "use strict";
  module2.exports = Pbf2;
  var ieee754 = require_ieee754();
  function Pbf2(buf) {
    this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
    this.pos = 0;
    this.type = 0;
    this.length = this.buf.length;
  }
  Pbf2.Varint = 0;
  Pbf2.Fixed64 = 1;
  Pbf2.Bytes = 2;
  Pbf2.Fixed32 = 5;
  var SHIFT_LEFT_32 = (1 << 16) * (1 << 16);
  var SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;
  var TEXT_DECODER_MIN_LENGTH = 12;
  var utf8TextDecoder = typeof TextDecoder === "undefined" ? null : new TextDecoder("utf8");
  Pbf2.prototype = {
    destroy: function() {
      this.buf = null;
    },
    readFields: function(readField, result, end) {
      end = end || this.length;
      while (this.pos < end) {
        var val = this.readVarint(), tag = val >> 3, startPos = this.pos;
        this.type = val & 7;
        readField(tag, result, this);
        if (this.pos === startPos)
          this.skip(val);
      }
      return result;
    },
    readMessage: function(readField, result) {
      return this.readFields(readField, result, this.readVarint() + this.pos);
    },
    readFixed32: function() {
      var val = readUInt32(this.buf, this.pos);
      this.pos += 4;
      return val;
    },
    readSFixed32: function() {
      var val = readInt32(this.buf, this.pos);
      this.pos += 4;
      return val;
    },
    readFixed64: function() {
      var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
      this.pos += 8;
      return val;
    },
    readSFixed64: function() {
      var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
      this.pos += 8;
      return val;
    },
    readFloat: function() {
      var val = ieee754.read(this.buf, this.pos, true, 23, 4);
      this.pos += 4;
      return val;
    },
    readDouble: function() {
      var val = ieee754.read(this.buf, this.pos, true, 52, 8);
      this.pos += 8;
      return val;
    },
    readVarint: function(isSigned) {
      var buf = this.buf, val, b;
      b = buf[this.pos++];
      val = b & 127;
      if (b < 128)
        return val;
      b = buf[this.pos++];
      val |= (b & 127) << 7;
      if (b < 128)
        return val;
      b = buf[this.pos++];
      val |= (b & 127) << 14;
      if (b < 128)
        return val;
      b = buf[this.pos++];
      val |= (b & 127) << 21;
      if (b < 128)
        return val;
      b = buf[this.pos];
      val |= (b & 15) << 28;
      return readVarintRemainder(val, isSigned, this);
    },
    readVarint64: function() {
      return this.readVarint(true);
    },
    readSVarint: function() {
      var num = this.readVarint();
      return num % 2 === 1 ? (num + 1) / -2 : num / 2;
    },
    readBoolean: function() {
      return Boolean(this.readVarint());
    },
    readString: function() {
      var end = this.readVarint() + this.pos;
      var pos = this.pos;
      this.pos = end;
      if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
        return readUtf8TextDecoder(this.buf, pos, end);
      }
      return readUtf8(this.buf, pos, end);
    },
    readBytes: function() {
      var end = this.readVarint() + this.pos, buffer = this.buf.subarray(this.pos, end);
      this.pos = end;
      return buffer;
    },
    readPackedVarint: function(arr, isSigned) {
      if (this.type !== Pbf2.Bytes)
        return arr.push(this.readVarint(isSigned));
      var end = readPackedEnd(this);
      arr = arr || [];
      while (this.pos < end)
        arr.push(this.readVarint(isSigned));
      return arr;
    },
    readPackedSVarint: function(arr) {
      if (this.type !== Pbf2.Bytes)
        return arr.push(this.readSVarint());
      var end = readPackedEnd(this);
      arr = arr || [];
      while (this.pos < end)
        arr.push(this.readSVarint());
      return arr;
    },
    readPackedBoolean: function(arr) {
      if (this.type !== Pbf2.Bytes)
        return arr.push(this.readBoolean());
      var end = readPackedEnd(this);
      arr = arr || [];
      while (this.pos < end)
        arr.push(this.readBoolean());
      return arr;
    },
    readPackedFloat: function(arr) {
      if (this.type !== Pbf2.Bytes)
        return arr.push(this.readFloat());
      var end = readPackedEnd(this);
      arr = arr || [];
      while (this.pos < end)
        arr.push(this.readFloat());
      return arr;
    },
    readPackedDouble: function(arr) {
      if (this.type !== Pbf2.Bytes)
        return arr.push(this.readDouble());
      var end = readPackedEnd(this);
      arr = arr || [];
      while (this.pos < end)
        arr.push(this.readDouble());
      return arr;
    },
    readPackedFixed32: function(arr) {
      if (this.type !== Pbf2.Bytes)
        return arr.push(this.readFixed32());
      var end = readPackedEnd(this);
      arr = arr || [];
      while (this.pos < end)
        arr.push(this.readFixed32());
      return arr;
    },
    readPackedSFixed32: function(arr) {
      if (this.type !== Pbf2.Bytes)
        return arr.push(this.readSFixed32());
      var end = readPackedEnd(this);
      arr = arr || [];
      while (this.pos < end)
        arr.push(this.readSFixed32());
      return arr;
    },
    readPackedFixed64: function(arr) {
      if (this.type !== Pbf2.Bytes)
        return arr.push(this.readFixed64());
      var end = readPackedEnd(this);
      arr = arr || [];
      while (this.pos < end)
        arr.push(this.readFixed64());
      return arr;
    },
    readPackedSFixed64: function(arr) {
      if (this.type !== Pbf2.Bytes)
        return arr.push(this.readSFixed64());
      var end = readPackedEnd(this);
      arr = arr || [];
      while (this.pos < end)
        arr.push(this.readSFixed64());
      return arr;
    },
    skip: function(val) {
      var type = val & 7;
      if (type === Pbf2.Varint)
        while (this.buf[this.pos++] > 127) {
        }
      else if (type === Pbf2.Bytes)
        this.pos = this.readVarint() + this.pos;
      else if (type === Pbf2.Fixed32)
        this.pos += 4;
      else if (type === Pbf2.Fixed64)
        this.pos += 8;
      else
        throw new Error("Unimplemented type: " + type);
    },
    writeTag: function(tag, type) {
      this.writeVarint(tag << 3 | type);
    },
    realloc: function(min) {
      var length = this.length || 16;
      while (length < this.pos + min)
        length *= 2;
      if (length !== this.length) {
        var buf = new Uint8Array(length);
        buf.set(this.buf);
        this.buf = buf;
        this.length = length;
      }
    },
    finish: function() {
      this.length = this.pos;
      this.pos = 0;
      return this.buf.subarray(0, this.length);
    },
    writeFixed32: function(val) {
      this.realloc(4);
      writeInt32(this.buf, val, this.pos);
      this.pos += 4;
    },
    writeSFixed32: function(val) {
      this.realloc(4);
      writeInt32(this.buf, val, this.pos);
      this.pos += 4;
    },
    writeFixed64: function(val) {
      this.realloc(8);
      writeInt32(this.buf, val & -1, this.pos);
      writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
      this.pos += 8;
    },
    writeSFixed64: function(val) {
      this.realloc(8);
      writeInt32(this.buf, val & -1, this.pos);
      writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
      this.pos += 8;
    },
    writeVarint: function(val) {
      val = +val || 0;
      if (val > 268435455 || val < 0) {
        writeBigVarint(val, this);
        return;
      }
      this.realloc(4);
      this.buf[this.pos++] = val & 127 | (val > 127 ? 128 : 0);
      if (val <= 127)
        return;
      this.buf[this.pos++] = (val >>>= 7) & 127 | (val > 127 ? 128 : 0);
      if (val <= 127)
        return;
      this.buf[this.pos++] = (val >>>= 7) & 127 | (val > 127 ? 128 : 0);
      if (val <= 127)
        return;
      this.buf[this.pos++] = val >>> 7 & 127;
    },
    writeSVarint: function(val) {
      this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
    },
    writeBoolean: function(val) {
      this.writeVarint(Boolean(val));
    },
    writeString: function(str) {
      str = String(str);
      this.realloc(str.length * 4);
      this.pos++;
      var startPos = this.pos;
      this.pos = writeUtf8(this.buf, str, this.pos);
      var len = this.pos - startPos;
      if (len >= 128)
        makeRoomForExtraLength(startPos, len, this);
      this.pos = startPos - 1;
      this.writeVarint(len);
      this.pos += len;
    },
    writeFloat: function(val) {
      this.realloc(4);
      ieee754.write(this.buf, val, this.pos, true, 23, 4);
      this.pos += 4;
    },
    writeDouble: function(val) {
      this.realloc(8);
      ieee754.write(this.buf, val, this.pos, true, 52, 8);
      this.pos += 8;
    },
    writeBytes: function(buffer) {
      var len = buffer.length;
      this.writeVarint(len);
      this.realloc(len);
      for (var i2 = 0; i2 < len; i2++)
        this.buf[this.pos++] = buffer[i2];
    },
    writeRawMessage: function(fn, obj) {
      this.pos++;
      var startPos = this.pos;
      fn(obj, this);
      var len = this.pos - startPos;
      if (len >= 128)
        makeRoomForExtraLength(startPos, len, this);
      this.pos = startPos - 1;
      this.writeVarint(len);
      this.pos += len;
    },
    writeMessage: function(tag, fn, obj) {
      this.writeTag(tag, Pbf2.Bytes);
      this.writeRawMessage(fn, obj);
    },
    writePackedVarint: function(tag, arr) {
      if (arr.length)
        this.writeMessage(tag, writePackedVarint, arr);
    },
    writePackedSVarint: function(tag, arr) {
      if (arr.length)
        this.writeMessage(tag, writePackedSVarint, arr);
    },
    writePackedBoolean: function(tag, arr) {
      if (arr.length)
        this.writeMessage(tag, writePackedBoolean, arr);
    },
    writePackedFloat: function(tag, arr) {
      if (arr.length)
        this.writeMessage(tag, writePackedFloat, arr);
    },
    writePackedDouble: function(tag, arr) {
      if (arr.length)
        this.writeMessage(tag, writePackedDouble, arr);
    },
    writePackedFixed32: function(tag, arr) {
      if (arr.length)
        this.writeMessage(tag, writePackedFixed32, arr);
    },
    writePackedSFixed32: function(tag, arr) {
      if (arr.length)
        this.writeMessage(tag, writePackedSFixed32, arr);
    },
    writePackedFixed64: function(tag, arr) {
      if (arr.length)
        this.writeMessage(tag, writePackedFixed64, arr);
    },
    writePackedSFixed64: function(tag, arr) {
      if (arr.length)
        this.writeMessage(tag, writePackedSFixed64, arr);
    },
    writeBytesField: function(tag, buffer) {
      this.writeTag(tag, Pbf2.Bytes);
      this.writeBytes(buffer);
    },
    writeFixed32Field: function(tag, val) {
      this.writeTag(tag, Pbf2.Fixed32);
      this.writeFixed32(val);
    },
    writeSFixed32Field: function(tag, val) {
      this.writeTag(tag, Pbf2.Fixed32);
      this.writeSFixed32(val);
    },
    writeFixed64Field: function(tag, val) {
      this.writeTag(tag, Pbf2.Fixed64);
      this.writeFixed64(val);
    },
    writeSFixed64Field: function(tag, val) {
      this.writeTag(tag, Pbf2.Fixed64);
      this.writeSFixed64(val);
    },
    writeVarintField: function(tag, val) {
      this.writeTag(tag, Pbf2.Varint);
      this.writeVarint(val);
    },
    writeSVarintField: function(tag, val) {
      this.writeTag(tag, Pbf2.Varint);
      this.writeSVarint(val);
    },
    writeStringField: function(tag, str) {
      this.writeTag(tag, Pbf2.Bytes);
      this.writeString(str);
    },
    writeFloatField: function(tag, val) {
      this.writeTag(tag, Pbf2.Fixed32);
      this.writeFloat(val);
    },
    writeDoubleField: function(tag, val) {
      this.writeTag(tag, Pbf2.Fixed64);
      this.writeDouble(val);
    },
    writeBooleanField: function(tag, val) {
      this.writeVarintField(tag, Boolean(val));
    }
  };
  function readVarintRemainder(l, s, p) {
    var buf = p.buf, h2, b;
    b = buf[p.pos++];
    h2 = (b & 112) >> 4;
    if (b < 128)
      return toNum(l, h2, s);
    b = buf[p.pos++];
    h2 |= (b & 127) << 3;
    if (b < 128)
      return toNum(l, h2, s);
    b = buf[p.pos++];
    h2 |= (b & 127) << 10;
    if (b < 128)
      return toNum(l, h2, s);
    b = buf[p.pos++];
    h2 |= (b & 127) << 17;
    if (b < 128)
      return toNum(l, h2, s);
    b = buf[p.pos++];
    h2 |= (b & 127) << 24;
    if (b < 128)
      return toNum(l, h2, s);
    b = buf[p.pos++];
    h2 |= (b & 1) << 31;
    if (b < 128)
      return toNum(l, h2, s);
    throw new Error("Expected varint not more than 10 bytes");
  }
  function readPackedEnd(pbf) {
    return pbf.type === Pbf2.Bytes ? pbf.readVarint() + pbf.pos : pbf.pos + 1;
  }
  function toNum(low, high, isSigned) {
    if (isSigned) {
      return high * 4294967296 + (low >>> 0);
    }
    return (high >>> 0) * 4294967296 + (low >>> 0);
  }
  function writeBigVarint(val, pbf) {
    var low, high;
    if (val >= 0) {
      low = val % 4294967296 | 0;
      high = val / 4294967296 | 0;
    } else {
      low = ~(-val % 4294967296);
      high = ~(-val / 4294967296);
      if (low ^ 4294967295) {
        low = low + 1 | 0;
      } else {
        low = 0;
        high = high + 1 | 0;
      }
    }
    if (val >= 18446744073709552e3 || val < -18446744073709552e3) {
      throw new Error("Given varint doesn't fit into 10 bytes");
    }
    pbf.realloc(10);
    writeBigVarintLow(low, high, pbf);
    writeBigVarintHigh(high, pbf);
  }
  function writeBigVarintLow(low, high, pbf) {
    pbf.buf[pbf.pos++] = low & 127 | 128;
    low >>>= 7;
    pbf.buf[pbf.pos++] = low & 127 | 128;
    low >>>= 7;
    pbf.buf[pbf.pos++] = low & 127 | 128;
    low >>>= 7;
    pbf.buf[pbf.pos++] = low & 127 | 128;
    low >>>= 7;
    pbf.buf[pbf.pos] = low & 127;
  }
  function writeBigVarintHigh(high, pbf) {
    var lsb = (high & 7) << 4;
    pbf.buf[pbf.pos++] |= lsb | ((high >>>= 3) ? 128 : 0);
    if (!high)
      return;
    pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
    if (!high)
      return;
    pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
    if (!high)
      return;
    pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
    if (!high)
      return;
    pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
    if (!high)
      return;
    pbf.buf[pbf.pos++] = high & 127;
  }
  function makeRoomForExtraLength(startPos, len, pbf) {
    var extraLen = len <= 16383 ? 1 : len <= 2097151 ? 2 : len <= 268435455 ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));
    pbf.realloc(extraLen);
    for (var i2 = pbf.pos - 1; i2 >= startPos; i2--)
      pbf.buf[i2 + extraLen] = pbf.buf[i2];
  }
  function writePackedVarint(arr, pbf) {
    for (var i2 = 0; i2 < arr.length; i2++)
      pbf.writeVarint(arr[i2]);
  }
  function writePackedSVarint(arr, pbf) {
    for (var i2 = 0; i2 < arr.length; i2++)
      pbf.writeSVarint(arr[i2]);
  }
  function writePackedFloat(arr, pbf) {
    for (var i2 = 0; i2 < arr.length; i2++)
      pbf.writeFloat(arr[i2]);
  }
  function writePackedDouble(arr, pbf) {
    for (var i2 = 0; i2 < arr.length; i2++)
      pbf.writeDouble(arr[i2]);
  }
  function writePackedBoolean(arr, pbf) {
    for (var i2 = 0; i2 < arr.length; i2++)
      pbf.writeBoolean(arr[i2]);
  }
  function writePackedFixed32(arr, pbf) {
    for (var i2 = 0; i2 < arr.length; i2++)
      pbf.writeFixed32(arr[i2]);
  }
  function writePackedSFixed32(arr, pbf) {
    for (var i2 = 0; i2 < arr.length; i2++)
      pbf.writeSFixed32(arr[i2]);
  }
  function writePackedFixed64(arr, pbf) {
    for (var i2 = 0; i2 < arr.length; i2++)
      pbf.writeFixed64(arr[i2]);
  }
  function writePackedSFixed64(arr, pbf) {
    for (var i2 = 0; i2 < arr.length; i2++)
      pbf.writeSFixed64(arr[i2]);
  }
  function readUInt32(buf, pos) {
    return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + buf[pos + 3] * 16777216;
  }
  function writeInt32(buf, val, pos) {
    buf[pos] = val;
    buf[pos + 1] = val >>> 8;
    buf[pos + 2] = val >>> 16;
    buf[pos + 3] = val >>> 24;
  }
  function readInt32(buf, pos) {
    return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + (buf[pos + 3] << 24);
  }
  function readUtf8(buf, pos, end) {
    var str = "";
    var i2 = pos;
    while (i2 < end) {
      var b0 = buf[i2];
      var c = null;
      var bytesPerSequence = b0 > 239 ? 4 : b0 > 223 ? 3 : b0 > 191 ? 2 : 1;
      if (i2 + bytesPerSequence > end)
        break;
      var b1, b2, b3;
      if (bytesPerSequence === 1) {
        if (b0 < 128) {
          c = b0;
        }
      } else if (bytesPerSequence === 2) {
        b1 = buf[i2 + 1];
        if ((b1 & 192) === 128) {
          c = (b0 & 31) << 6 | b1 & 63;
          if (c <= 127) {
            c = null;
          }
        }
      } else if (bytesPerSequence === 3) {
        b1 = buf[i2 + 1];
        b2 = buf[i2 + 2];
        if ((b1 & 192) === 128 && (b2 & 192) === 128) {
          c = (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63;
          if (c <= 2047 || c >= 55296 && c <= 57343) {
            c = null;
          }
        }
      } else if (bytesPerSequence === 4) {
        b1 = buf[i2 + 1];
        b2 = buf[i2 + 2];
        b3 = buf[i2 + 3];
        if ((b1 & 192) === 128 && (b2 & 192) === 128 && (b3 & 192) === 128) {
          c = (b0 & 15) << 18 | (b1 & 63) << 12 | (b2 & 63) << 6 | b3 & 63;
          if (c <= 65535 || c >= 1114112) {
            c = null;
          }
        }
      }
      if (c === null) {
        c = 65533;
        bytesPerSequence = 1;
      } else if (c > 65535) {
        c -= 65536;
        str += String.fromCharCode(c >>> 10 & 1023 | 55296);
        c = 56320 | c & 1023;
      }
      str += String.fromCharCode(c);
      i2 += bytesPerSequence;
    }
    return str;
  }
  function readUtf8TextDecoder(buf, pos, end) {
    return utf8TextDecoder.decode(buf.subarray(pos, end));
  }
  function writeUtf8(buf, str, pos) {
    for (var i2 = 0, c, lead; i2 < str.length; i2++) {
      c = str.charCodeAt(i2);
      if (c > 55295 && c < 57344) {
        if (lead) {
          if (c < 56320) {
            buf[pos++] = 239;
            buf[pos++] = 191;
            buf[pos++] = 189;
            lead = c;
            continue;
          } else {
            c = lead - 55296 << 10 | c - 56320 | 65536;
            lead = null;
          }
        } else {
          if (c > 56319 || i2 + 1 === str.length) {
            buf[pos++] = 239;
            buf[pos++] = 191;
            buf[pos++] = 189;
          } else {
            lead = c;
          }
          continue;
        }
      } else if (lead) {
        buf[pos++] = 239;
        buf[pos++] = 191;
        buf[pos++] = 189;
        lead = null;
      }
      if (c < 128) {
        buf[pos++] = c;
      } else {
        if (c < 2048) {
          buf[pos++] = c >> 6 | 192;
        } else {
          if (c < 65536) {
            buf[pos++] = c >> 12 | 224;
          } else {
            buf[pos++] = c >> 18 | 240;
            buf[pos++] = c >> 12 & 63 | 128;
          }
          buf[pos++] = c >> 6 & 63 | 128;
        }
        buf[pos++] = c & 63 | 128;
      }
    }
    return pos;
  }
});
var require_lodash = __commonJS((exports2, module2) => {
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  (function() {
    var undefined2;
    var VERSION = "4.17.20";
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = "__lodash_placeholder__";
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [
      ["ary", WRAP_ARY_FLAG],
      ["bind", WRAP_BIND_FLAG],
      ["bindKey", WRAP_BIND_KEY_FLAG],
      ["curry", WRAP_CURRY_FLAG],
      ["curryRight", WRAP_CURRY_RIGHT_FLAG],
      ["flip", WRAP_FLIP_FLAG],
      ["partial", WRAP_PARTIAL_FLAG],
      ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
      ["rearg", WRAP_REARG_FLAG]
    ];
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g, reTrimStart = /^\s+/, reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reApos = RegExp(rsApos, "g");
    var reComboMark = RegExp(rsCombo, "g");
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      \u00C0: "A",
      \u00C1: "A",
      \u00C2: "A",
      \u00C3: "A",
      \u00C4: "A",
      \u00C5: "A",
      \u00E0: "a",
      \u00E1: "a",
      \u00E2: "a",
      \u00E3: "a",
      \u00E4: "a",
      \u00E5: "a",
      \u00C7: "C",
      \u00E7: "c",
      \u00D0: "D",
      \u00F0: "d",
      \u00C8: "E",
      \u00C9: "E",
      \u00CA: "E",
      \u00CB: "E",
      \u00E8: "e",
      \u00E9: "e",
      \u00EA: "e",
      \u00EB: "e",
      \u00CC: "I",
      \u00CD: "I",
      \u00CE: "I",
      \u00CF: "I",
      \u00EC: "i",
      \u00ED: "i",
      \u00EE: "i",
      \u00EF: "i",
      \u00D1: "N",
      \u00F1: "n",
      \u00D2: "O",
      \u00D3: "O",
      \u00D4: "O",
      \u00D5: "O",
      \u00D6: "O",
      \u00D8: "O",
      \u00F2: "o",
      \u00F3: "o",
      \u00F4: "o",
      \u00F5: "o",
      \u00F6: "o",
      \u00F8: "o",
      \u00D9: "U",
      \u00DA: "U",
      \u00DB: "U",
      \u00DC: "U",
      \u00F9: "u",
      \u00FA: "u",
      \u00FB: "u",
      \u00FC: "u",
      \u00DD: "Y",
      \u00FD: "y",
      \u00FF: "y",
      \u00C6: "Ae",
      \u00E6: "ae",
      \u00DE: "Th",
      \u00FE: "th",
      \u00DF: "ss",
      \u0100: "A",
      \u0102: "A",
      \u0104: "A",
      \u0101: "a",
      \u0103: "a",
      \u0105: "a",
      \u0106: "C",
      \u0108: "C",
      \u010A: "C",
      \u010C: "C",
      \u0107: "c",
      \u0109: "c",
      \u010B: "c",
      \u010D: "c",
      \u010E: "D",
      \u0110: "D",
      \u010F: "d",
      \u0111: "d",
      \u0112: "E",
      \u0114: "E",
      \u0116: "E",
      \u0118: "E",
      \u011A: "E",
      \u0113: "e",
      \u0115: "e",
      \u0117: "e",
      \u0119: "e",
      \u011B: "e",
      \u011C: "G",
      \u011E: "G",
      \u0120: "G",
      \u0122: "G",
      \u011D: "g",
      \u011F: "g",
      \u0121: "g",
      \u0123: "g",
      \u0124: "H",
      \u0126: "H",
      \u0125: "h",
      \u0127: "h",
      \u0128: "I",
      \u012A: "I",
      \u012C: "I",
      \u012E: "I",
      \u0130: "I",
      \u0129: "i",
      \u012B: "i",
      \u012D: "i",
      \u012F: "i",
      \u0131: "i",
      \u0134: "J",
      \u0135: "j",
      \u0136: "K",
      \u0137: "k",
      \u0138: "k",
      \u0139: "L",
      \u013B: "L",
      \u013D: "L",
      \u013F: "L",
      \u0141: "L",
      \u013A: "l",
      \u013C: "l",
      \u013E: "l",
      \u0140: "l",
      \u0142: "l",
      \u0143: "N",
      \u0145: "N",
      \u0147: "N",
      \u014A: "N",
      \u0144: "n",
      \u0146: "n",
      \u0148: "n",
      \u014B: "n",
      \u014C: "O",
      \u014E: "O",
      \u0150: "O",
      \u014D: "o",
      \u014F: "o",
      \u0151: "o",
      \u0154: "R",
      \u0156: "R",
      \u0158: "R",
      \u0155: "r",
      \u0157: "r",
      \u0159: "r",
      \u015A: "S",
      \u015C: "S",
      \u015E: "S",
      \u0160: "S",
      \u015B: "s",
      \u015D: "s",
      \u015F: "s",
      \u0161: "s",
      \u0162: "T",
      \u0164: "T",
      \u0166: "T",
      \u0163: "t",
      \u0165: "t",
      \u0167: "t",
      \u0168: "U",
      \u016A: "U",
      \u016C: "U",
      \u016E: "U",
      \u0170: "U",
      \u0172: "U",
      \u0169: "u",
      \u016B: "u",
      \u016D: "u",
      \u016F: "u",
      \u0171: "u",
      \u0173: "u",
      \u0174: "W",
      \u0175: "w",
      \u0176: "Y",
      \u0177: "y",
      \u0178: "Y",
      \u0179: "Z",
      \u017B: "Z",
      \u017D: "Z",
      \u017A: "z",
      \u017C: "z",
      \u017E: "z",
      \u0132: "IJ",
      \u0133: "ij",
      \u0152: "Oe",
      \u0153: "oe",
      \u0149: "'n",
      \u017F: "s"
    };
    var htmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    var htmlUnescapes = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    };
    var stringEscapes = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    var freeParseFloat = parseFloat, freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;
      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayEvery(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    var asciiSize = baseProperty("length");
    function asciiToArray(string2) {
      return string2.split("");
    }
    function asciiWords(string2) {
      return string2.match(reAsciiWord) || [];
    }
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection2) {
        if (predicate(value, key, collection2)) {
          result = key;
          return false;
        }
      });
      return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined2 : object[key];
      };
    }
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined2 : object[key];
      };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection2) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
      });
      return accumulator;
    }
    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }
    function baseSum(array, iteratee) {
      var result, index = -1, length = array.length;
      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined2) {
          result = result === undefined2 ? current : result + current;
        }
      }
      return result;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1, length = strSymbols.length;
      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
      }
      return index;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;
      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
      }
      return index;
    }
    function countHolders(array, placeholder) {
      var length = array.length, result = 0;
      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    function escapeStringChar(chr) {
      return "\\" + stringEscapes[chr];
    }
    function getValue(object, key) {
      return object == null ? undefined2 : object[key];
    }
    function hasUnicode(string2) {
      return reHasUnicode.test(string2);
    }
    function hasUnicodeWord(string2) {
      return reHasUnicodeWord.test(string2);
    }
    function iteratorToArray(iterator) {
      var data, result = [];
      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function replaceHolders(array, placeholder) {
      var index = -1, length = array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    function setToPairs(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }
    function stringSize(string2) {
      return hasUnicode(string2) ? unicodeSize(string2) : asciiSize(string2);
    }
    function stringToArray(string2) {
      return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
    }
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    function unicodeSize(string2) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string2)) {
        ++result;
      }
      return result;
    }
    function unicodeToArray(string2) {
      return string2.match(reUnicode) || [];
    }
    function unicodeWords(string2) {
      return string2.match(reUnicodeWord) || [];
    }
    var runInContext = function runInContext2(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
      var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
      var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
      var coreJsData = context["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object2);
      var oldDash = root._;
      var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
      var defineProperty = function() {
        try {
          var func = getNative(Object2, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
      var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap);
      var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, "__wrapped__")) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }
      var baseCreate = function() {
        function object() {
        }
        return function(proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result2 = new object();
          object.prototype = undefined2;
          return result2;
        };
      }();
      function baseLodash() {
      }
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined2;
      }
      lodash.templateSettings = {
        escape: reEscape,
        evaluate: reEvaluate,
        interpolate: reInterpolate,
        variable: "",
        imports: {
          _: lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }
      function lazyClone() {
        var result2 = new LazyWrapper(this.__wrapped__);
        result2.__actions__ = copyArray(this.__actions__);
        result2.__dir__ = this.__dir__;
        result2.__filtered__ = this.__filtered__;
        result2.__iteratees__ = copyArray(this.__iteratees__);
        result2.__takeCount__ = this.__takeCount__;
        result2.__views__ = copyArray(this.__views__);
        return result2;
      }
      function lazyReverse() {
        if (this.__filtered__) {
          var result2 = new LazyWrapper(this);
          result2.__dir__ = -1;
          result2.__filtered__ = true;
        } else {
          result2 = this.clone();
          result2.__dir__ *= -1;
        }
        return result2;
      }
      function lazyValue() {
        var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result2 = [];
        outer:
          while (length-- && resIndex < takeCount) {
            index += dir;
            var iterIndex = -1, value = array[index];
            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result2[resIndex++] = value;
          }
        return result2;
      }
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result2 = this.has(key) && delete this.__data__[key];
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result2 = data[key];
          return result2 === HASH_UNDEFINED ? undefined2 : result2;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined2;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? undefined2 : data[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          hash: new Hash(),
          map: new (Map2 || ListCache)(),
          string: new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result2 = getMapData(this, key)["delete"](key);
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size2 = data.size;
        data.set(key, value);
        this.size += data.size == size2 ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values2) {
        var index = -1, length = values2 == null ? 0 : values2.length;
        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values2[index]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data = this.__data__, result2 = data["delete"](key);
        this.size = data.size;
        return result2;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined2;
      }
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }
      function assignMergeValue(object, key, value) {
        if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseAggregator(collection, setter, iteratee2, accumulator) {
        baseEach(collection, function(value, key, collection2) {
          setter(accumulator, value, iteratee2(value), collection2);
        });
        return accumulator;
      }
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        } else {
          object[key] = value;
        }
      }
      function baseAt(object, paths) {
        var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
        while (++index < length) {
          result2[index] = skip ? undefined2 : get(object, paths[index]);
        }
        return result2;
      }
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined2) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined2) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
        if (customizer) {
          result2 = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result2 !== undefined2) {
          return result2;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result2 = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result2);
          }
        } else {
          var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result2 = isFlat || isFunc ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result2 = initCloneByTag(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result2);
        if (isSet(value)) {
          value.forEach(function(subValue) {
            result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key2) {
            result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined2 : keysFunc(value);
        arrayEach(props || value, function(subValue, key2) {
          if (props) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
        return result2;
      }
      function baseConforms(source) {
        var props = keys(source);
        return function(object) {
          return baseConformsTo(object, source, props);
        };
      }
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object2(object);
        while (length--) {
          var key = props[length], predicate = source[key], value = object[key];
          if (value === undefined2 && !(key in object) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }
      function baseDelay(func, wait, args) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        return setTimeout2(function() {
          func.apply(undefined2, args);
        }, wait);
      }
      function baseDifference(array, values2, iteratee2, comparator) {
        var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
        if (!length) {
          return result2;
        }
        if (iteratee2) {
          values2 = arrayMap(values2, baseUnary(iteratee2));
        }
        if (comparator) {
          includes2 = arrayIncludesWith;
          isCommon = false;
        } else if (values2.length >= LARGE_ARRAY_SIZE) {
          includes2 = cacheHas;
          isCommon = false;
          values2 = new SetCache(values2);
        }
        outer:
          while (++index < length) {
            var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values2[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result2.push(value);
            } else if (!includes2(values2, computed, comparator)) {
              result2.push(value);
            }
          }
        return result2;
      }
      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);
      function baseEvery(collection, predicate) {
        var result2 = true;
        baseEach(collection, function(value, index, collection2) {
          result2 = !!predicate(value, index, collection2);
          return result2;
        });
        return result2;
      }
      function baseExtremum(array, iteratee2, comparator) {
        var index = -1, length = array.length;
        while (++index < length) {
          var value = array[index], current = iteratee2(value);
          if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current, result2 = value;
          }
        }
        return result2;
      }
      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end === undefined2 || end > length ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }
      function baseFilter(collection, predicate) {
        var result2 = [];
        baseEach(collection, function(value, index, collection2) {
          if (predicate(value, index, collection2)) {
            result2.push(value);
          }
        });
        return result2;
      }
      function baseFlatten(array, depth, predicate, isStrict, result2) {
        var index = -1, length = array.length;
        predicate || (predicate = isFlattenable);
        result2 || (result2 = []);
        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result2);
            } else {
              arrayPush(result2, value);
            }
          } else if (!isStrict) {
            result2[result2.length] = value;
          }
        }
        return result2;
      }
      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);
      function baseForOwn(object, iteratee2) {
        return object && baseFor(object, iteratee2, keys);
      }
      function baseForOwnRight(object, iteratee2) {
        return object && baseForRight(object, iteratee2, keys);
      }
      function baseFunctions(object, props) {
        return arrayFilter(props, function(key) {
          return isFunction(object[key]);
        });
      }
      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0, length = path.length;
        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return index && index == length ? object : undefined2;
      }
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result2 = keysFunc(object);
        return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
      }
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined2 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
      }
      function baseGt(value, other) {
        return value > other;
      }
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }
      function baseHasIn(object, key) {
        return object != null && key in Object2(object);
      }
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }
      function baseIntersection(arrays, iteratee2, comparator) {
        var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee2) {
            array = arrayMap(array, baseUnary(iteratee2));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
        }
        array = arrays[0];
        var index = -1, seen = caches[0];
        outer:
          while (++index < length && result2.length < maxLength) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseInverter(object, setter, iteratee2, accumulator) {
        baseForOwn(object, function(value, key, object2) {
          setter(accumulator, iteratee2(value), key, object2);
        });
        return accumulator;
      }
      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined2 : apply(func, object, args);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length, length = index, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object2(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === undefined2 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result2 = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
              return false;
            }
          }
        }
        return true;
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result2 = [];
        for (var key in Object2(object)) {
          if (hasOwnProperty.call(object, key) && key != "constructor") {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result2 = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseLt(value, other) {
        return value < other;
      }
      function baseMap(collection, iteratee2) {
        var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value, key, collection2) {
          result2[++index] = iteratee2(value, key, collection2);
        });
        return result2;
      }
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get(object, path);
          return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack());
          if (isObject(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
            if (newValue === undefined2) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
        var isCommon = newValue === undefined2;
        if (isCommon) {
          var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined2;
      }
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap(iteratees, function(iteratee2) {
            if (isArray(iteratee2)) {
              return function(value) {
                return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
              };
            }
            return iteratee2;
          });
        } else {
          iteratees = [identity];
        }
        var index = -1;
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        var result2 = baseMap(collection, function(value, key, collection2) {
          var criteria = arrayMap(iteratees, function(iteratee2) {
            return iteratee2(value);
          });
          return {criteria, index: ++index, value};
        });
        return baseSortBy(result2, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path) {
          return hasIn(object, path);
        });
      }
      function basePickBy(object, paths, predicate) {
        var index = -1, length = paths.length, result2 = {};
        while (++index < length) {
          var path = paths[index], value = baseGet(object, path);
          if (predicate(value, path)) {
            baseSet(result2, castPath(path, object), value);
          }
        }
        return result2;
      }
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }
      function basePullAll(array, values2, iteratee2, comparator) {
        var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
        if (array === values2) {
          values2 = copyArray(values2);
        }
        if (iteratee2) {
          seen = arrayMap(array, baseUnary(iteratee2));
        }
        while (++index < length) {
          var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
          while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0, lastIndex = length - 1;
        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }
        return array;
      }
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }
      function baseRange(start, end, step, fromRight) {
        var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
        while (length--) {
          result2[fromRight ? length : ++index] = start;
          start += step;
        }
        return result2;
      }
      function baseRepeat(string2, n) {
        var result2 = "";
        if (!string2 || n < 1 || n > MAX_SAFE_INTEGER) {
          return result2;
        }
        do {
          if (n % 2) {
            result2 += string2;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string2 += string2;
          }
        } while (n);
        return result2;
      }
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + "");
      }
      function baseSample(collection) {
        return arraySample(values(collection));
      }
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }
      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path = castPath(path, object);
        var index = -1, length = path.length, lastIndex = length - 1, nested = object;
        while (nested != null && ++index < length) {
          var key = toKey(path[index]), newValue = value;
          if (key === "__proto__" || key === "constructor" || key === "prototype") {
            return object;
          }
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined2;
            if (newValue === undefined2) {
              newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }
      var baseSetData = !metaMap ? identity : function(func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function(func, string2) {
        return defineProperty(func, "toString", {
          configurable: true,
          enumerable: false,
          value: constant(string2),
          writable: true
        });
      };
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }
      function baseSlice(array, start, end) {
        var index = -1, length = array.length;
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result2 = Array2(length);
        while (++index < length) {
          result2[index] = array[index + start];
        }
        return result2;
      }
      function baseSome(collection, predicate) {
        var result2;
        baseEach(collection, function(value, index, collection2) {
          result2 = predicate(value, index, collection2);
          return !result2;
        });
        return !!result2;
      }
      function baseSortedIndex(array, value, retHighest) {
        var low = 0, high = array == null ? low : array.length;
        if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1, computed = array[mid];
            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }
      function baseSortedIndexBy(array, value, iteratee2, retHighest) {
        var low = 0, high = array == null ? 0 : array.length;
        if (high === 0) {
          return 0;
        }
        value = iteratee2(value);
        var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
        while (low < high) {
          var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }
      function baseSortedUniq(array, iteratee2) {
        var index = -1, length = array.length, resIndex = 0, result2 = [];
        while (++index < length) {
          var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result2[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result2;
      }
      function baseToNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      function baseUniq(array, iteratee2, comparator) {
        var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
        if (comparator) {
          isCommon = false;
          includes2 = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set2 = iteratee2 ? null : createSet(array);
          if (set2) {
            return setToArray(set2);
          }
          isCommon = false;
          includes2 = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee2 ? [] : result2;
        }
        outer:
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee2) {
                seen.push(computed);
              }
              result2.push(value);
            } else if (!includes2(seen, computed, comparator)) {
              if (seen !== result2) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length, index = fromRight ? length : -1;
        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
        }
        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }
      function baseWrapperValue(value, actions) {
        var result2 = value;
        if (result2 instanceof LazyWrapper) {
          result2 = result2.value();
        }
        return arrayReduce(actions, function(result3, action) {
          return action.func.apply(action.thisArg, arrayPush([result3], action.args));
        }, result2);
      }
      function baseXor(arrays, iteratee2, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index = -1, result2 = Array2(length);
        while (++index < length) {
          var array = arrays[index], othIndex = -1;
          while (++othIndex < length) {
            if (othIndex != index) {
              result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
      }
      function baseZipObject(props, values2, assignFunc) {
        var index = -1, length = props.length, valsLength = values2.length, result2 = {};
        while (++index < length) {
          var value = index < valsLength ? values2[index] : undefined2;
          assignFunc(result2, props[index], value);
        }
        return result2;
      }
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }
      function castFunction(value) {
        return typeof value == "function" ? value : identity;
      }
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }
      var castRest = baseRest;
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined2 ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }
      var clearTimeout = ctxClearTimeout || function(id) {
        return root.clearTimeout(id);
      };
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result2);
        return result2;
      }
      function cloneArrayBuffer(arrayBuffer) {
        var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
        return result2;
      }
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      function cloneRegExp(regexp) {
        var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result2.lastIndex = regexp.lastIndex;
        return result2;
      }
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      function compareMultiple(object, other, orders) {
        var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
        while (++index < length) {
          var result2 = compareAscending(objCriteria[index], othCriteria[index]);
          if (result2) {
            if (index >= ordersLength) {
              return result2;
            }
            var order = orders[index];
            return result2 * (order == "desc" ? -1 : 1);
          }
        }
        return object.index - other.index;
      }
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
        while (++leftIndex < leftLength) {
          result2[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result2[leftIndex++] = args[argsIndex++];
        }
        return result2;
      }
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
        while (++argsIndex < rangeLength) {
          result2[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result2[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result2;
      }
      function copyArray(source, array) {
        var index = -1, length = source.length;
        array || (array = Array2(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
          if (newValue === undefined2) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }
      function createAggregator(setter, initializer) {
        return function(collection, iteratee2) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
        };
      }
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined2 : customizer;
            length = 1;
          }
          object = Object2(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee2) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee2);
          }
          var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
          while (fromRight ? index-- : ++index < length) {
            if (iteratee2(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      function createBaseFor(fromRight) {
        return function(object, iteratee2, keysFunc) {
          var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee2(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }
      function createCaseFirst(methodName) {
        return function(string2) {
          string2 = toString(string2);
          var strSymbols = hasUnicode(string2) ? stringToArray(string2) : undefined2;
          var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      function createCompounder(callback) {
        return function(string2) {
          return arrayReduce(words(deburr2(string2).replace(reApos, "")), callback, "");
        };
      }
      function createCtor(Ctor) {
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return new Ctor();
            case 1:
              return new Ctor(args[0]);
            case 2:
              return new Ctor(args[0], args[1]);
            case 3:
              return new Ctor(args[0], args[1], args[2]);
            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
          return isObject(result2) ? result2 : thisBinding;
        };
      }
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);
        function wrapper() {
          var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
          while (index--) {
            args[index] = arguments[index];
          }
          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;
          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
          }
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object2(collection);
          if (!isArrayLike(collection)) {
            var iteratee2 = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) {
              return iteratee2(iterable[key], key, iterable);
            };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
        };
      }
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == "wrapper") {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
            if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments, value = args[0];
            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }
            var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
            while (++index2 < length) {
              result2 = funcs[index2].call(this, result2);
            }
            return result2;
          };
        });
      }
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
        function wrapper() {
          var length = arguments.length, args = Array2(length), index = length;
          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
          }
          var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary2 < length) {
            args.length = ary2;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }
      function createInverter(setter, toIteratee) {
        return function(object, iteratee2) {
          return baseInverter(object, setter, toIteratee(iteratee2), {});
        };
      }
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result2;
          if (value === undefined2 && other === undefined2) {
            return defaultValue;
          }
          if (value !== undefined2) {
            result2 = value;
          }
          if (other !== undefined2) {
            if (result2 === undefined2) {
              return other;
            }
            if (typeof value == "string" || typeof other == "string") {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result2 = operator(value, other);
          }
          return result2;
        };
      }
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee2) {
              return apply(iteratee2, thisArg, args);
            });
          });
        });
      }
      function createPadding(length, chars) {
        chars = chars === undefined2 ? " " : baseToString(chars);
        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
      }
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
            end = step = undefined2;
          }
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == "string" && typeof other == "string")) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func,
          bitmask,
          thisArg,
          newPartials,
          newHolders,
          newPartialsRight,
          newHoldersRight,
          argPos,
          ary2,
          arity
        ];
        var result2 = wrapFunc.apply(undefined2, newData);
        if (isLaziable(func)) {
          setData(result2, newData);
        }
        result2.placeholder = placeholder;
        return setWrapToString(result2, func, bitmask);
      }
      function createRound(methodName) {
        var func = Math2[methodName];
        return function(number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision && nativeIsFinite(number)) {
            var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (toString(value) + "e").split("e");
            return +(pair[0] + "e" + (+pair[1] - precision));
          }
          return func(number);
        };
      }
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
        return new Set2(values2);
      };
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined2;
        }
        ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
        arity = arity === undefined2 ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;
        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials, holdersRight = holders;
          partials = holders = undefined2;
        }
        var data = isBindKey ? undefined2 : getData(func);
        var newData = [
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary2,
          arity
        ];
        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result2 = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result2 = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result2 = createPartial(func, bitmask, thisArg, partials);
        } else {
          result2 = createHybrid.apply(undefined2, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result2, newData), func, bitmask);
      }
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }
        return objValue;
      }
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
          stack["delete"](srcValue);
        }
        return objValue;
      }
      function customOmitClone(value) {
        return isPlainObject(value) ? undefined2 : value;
      }
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
        stack.set(array, other);
        stack.set(other, array);
        while (++index < arrLength) {
          var arrValue = array[index], othValue = other[index];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined2) {
            if (compared) {
              continue;
            }
            result2 = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result2 = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result2 = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result2;
      }
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result2;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result2 = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result2 = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result2 && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result2 = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result2;
      }
      function flatRest(func) {
        return setToString(overRest(func, undefined2, flatten), func + "");
      }
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }
      var getData = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };
      function getFuncName(func) {
        var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
        while (length--) {
          var data = array[length], otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result2;
      }
      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
        return object.placeholder;
      }
      function getIteratee() {
        var result2 = lodash.iteratee || iteratee;
        result2 = result2 === iteratee ? baseIteratee : result2;
        return arguments.length ? result2(arguments[0], arguments[1]) : result2;
      }
      function getMapData(map2, key) {
        var data = map2.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getMatchData(object) {
        var result2 = keys(object), length = result2.length;
        while (length--) {
          var key = result2[length], value = object[key];
          result2[length] = [key, value, isStrictComparable(value)];
        }
        return result2;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined2;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = undefined2;
          var unmasked = true;
        } catch (e) {
        }
        var result2 = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result2;
      }
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object2(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result2 = [];
        while (object) {
          arrayPush(result2, getSymbols(object));
          object = getPrototype(object);
        }
        return result2;
      };
      var getTag = baseGetTag;
      if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function(value) {
          var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result2;
        };
      }
      function getView(start, end, transforms) {
        var index = -1, length = transforms.length;
        while (++index < length) {
          var data = transforms[index], size2 = data.size;
          switch (data.type) {
            case "drop":
              start += size2;
              break;
            case "dropRight":
              end -= size2;
              break;
            case "take":
              end = nativeMin(end, start + size2);
              break;
            case "takeRight":
              start = nativeMax(start, end - size2);
              break;
          }
        }
        return {start, end};
      }
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1, length = path.length, result2 = false;
        while (++index < length) {
          var key = toKey(path[index]);
          if (!(result2 = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result2 || ++index != length) {
          return result2;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }
      function initCloneArray(array) {
        var length = array.length, result2 = new array.constructor(length);
        if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
          result2.index = array.index;
          result2.input = array.input;
        }
        return result2;
      }
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);
          case boolTag:
          case dateTag:
            return new Ctor(+object);
          case dataViewTag:
            return cloneDataView(object, isDeep);
          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);
          case mapTag:
            return new Ctor();
          case numberTag:
          case stringTag:
            return new Ctor(object);
          case regexpTag:
            return cloneRegExp(object);
          case setTag:
            return new Ctor();
          case symbolTag:
            return cloneSymbol(object);
        }
      }
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
        details = details.join(length > 2 ? ", " : " ");
        return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
      }
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
          return eq(object[index], value);
        }
        return false;
      }
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isLaziable(func) {
        var funcName = getFuncName(func), other = lodash[funcName];
        if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var isMaskable = coreJsData ? isFunction : stubFalse;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
        };
      }
      function memoizeCapped(func) {
        var result2 = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result2.cache;
        return result2;
      }
      function mergeData(data, source) {
        var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
        if (!(isCommon || isCombo)) {
          return data;
        }
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        value = source[7];
        if (value) {
          data[7] = value;
        }
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        if (data[9] == null) {
          data[9] = source[9];
        }
        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }
      function nativeKeysIn(object) {
        var result2 = [];
        if (object != null) {
          for (var key in Object2(object)) {
            result2.push(key);
          }
        }
        return result2;
      }
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      function overRest(func, start, transform2) {
        start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array2(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform2(array);
          return apply(func, this, otherArgs);
        };
      }
      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }
      function reorder(array, indexes) {
        var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
        }
        return array;
      }
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var setData = shortOut(baseSetData);
      var setTimeout2 = ctxSetTimeout || function(func, wait) {
        return root.setTimeout(func, wait);
      };
      var setToString = shortOut(baseSetToString);
      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + "";
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined2, arguments);
        };
      }
      function shuffleSelf(array, size2) {
        var index = -1, length = array.length, lastIndex = length - 1;
        size2 = size2 === undefined2 ? length : size2;
        while (++index < size2) {
          var rand = baseRandom(index, lastIndex), value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size2;
        return array;
      }
      var stringToPath = memoizeCapped(function(string2) {
        var result2 = [];
        if (string2.charCodeAt(0) === 46) {
          result2.push("");
        }
        string2.replace(rePropName, function(match, number, quote, subString) {
          result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
        });
        return result2;
      });
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function(pair) {
          var value = "_." + pair[0];
          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result2.__actions__ = copyArray(wrapper.__actions__);
        result2.__index__ = wrapper.__index__;
        result2.__values__ = wrapper.__values__;
        return result2;
      }
      function chunk(array, size2, guard) {
        if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
          size2 = 1;
        } else {
          size2 = nativeMax(toInteger(size2), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size2 < 1) {
          return [];
        }
        var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
        while (index < length) {
          result2[resIndex++] = baseSlice(array, index, index += size2);
        }
        return result2;
      }
      function compact(array) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
        while (++index < length) {
          var value = array[index];
          if (value) {
            result2[resIndex++] = value;
          }
        }
        return result2;
      }
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array2(length - 1), array = arguments[0], index = length;
        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }
      var difference = baseRest(function(array, values2) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function(array, values2) {
        var iteratee2 = last(values2);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined2;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
      });
      var differenceWith = baseRest(function(array, values2) {
        var comparator = last(values2);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined2;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
      });
      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }
      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined2) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined2 ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }
      function fromPairs(pairs) {
        var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
        while (++index < length) {
          var pair = pairs[index];
          result2[pair[0]] = pair[1];
        }
        return result2;
      }
      function head(array) {
        return array && array.length ? array[0] : undefined2;
      }
      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
        if (iteratee2 === last(mapped)) {
          iteratee2 = undefined2;
        } else {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
      });
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == "function" ? comparator : undefined2;
        if (comparator) {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
      });
      function join(array, separator) {
        return array == null ? "" : nativeJoin.call(array, separator);
      }
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined2;
      }
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined2) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }
      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
      }
      var pull = baseRest(pullAll);
      function pullAll(array, values2) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
      }
      function pullAllBy(array, values2, iteratee2) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
      }
      function pullAllWith(array, values2, comparator) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
      }
      var pullAt = flatRest(function(array, indexes) {
        var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function(index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result2;
      });
      function remove(array, predicate) {
        var result2 = [];
        if (!(array && array.length)) {
          return result2;
        }
        var index = -1, indexes = [], length = array.length;
        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result2.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result2;
      }
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined2 ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }
      function sortedIndexBy(array, value, iteratee2) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
      }
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }
      function sortedLastIndexBy(array, value, iteratee2) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
      }
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }
      function sortedUniqBy(array, iteratee2) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
      }
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined2 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }
      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined2;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
      });
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined2;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
      });
      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }
      function uniqBy(array, iteratee2) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
      }
      function uniqWith(array, comparator) {
        comparator = typeof comparator == "function" ? comparator : undefined2;
        return array && array.length ? baseUniq(array, undefined2, comparator) : [];
      }
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function(index) {
          return arrayMap(array, baseProperty(index));
        });
      }
      function unzipWith(array, iteratee2) {
        if (!(array && array.length)) {
          return [];
        }
        var result2 = unzip(array);
        if (iteratee2 == null) {
          return result2;
        }
        return arrayMap(result2, function(group) {
          return apply(iteratee2, undefined2, group);
        });
      }
      var without = baseRest(function(array, values2) {
        return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
      });
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined2;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
      });
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined2;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
      });
      var zip = baseRest(unzip);
      function zipObject(props, values2) {
        return baseZipObject(props || [], values2 || [], assignValue);
      }
      function zipObjectDeep(props, values2) {
        return baseZipObject(props || [], values2 || [], baseSet);
      }
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
        iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
        return unzipWith(arrays, iteratee2);
      });
      function chain(value) {
        var result2 = lodash(value);
        result2.__chain__ = true;
        return result2;
      }
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }
      function thru(value, interceptor) {
        return interceptor(value);
      }
      var wrapperAt = flatRest(function(paths) {
        var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
          return baseAt(object, paths);
        };
        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          func: thru,
          args: [interceptor],
          thisArg: undefined2
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array) {
          if (length && !array.length) {
            array.push(undefined2);
          }
          return array;
        });
      });
      function wrapperChain() {
        return chain(this);
      }
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }
      function wrapperNext() {
        if (this.__values__ === undefined2) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
        return {done, value};
      }
      function wrapperToIterator() {
        return this;
      }
      function wrapperPlant(value) {
        var result2, parent2 = this;
        while (parent2 instanceof baseLodash) {
          var clone2 = wrapperClone(parent2);
          clone2.__index__ = 0;
          clone2.__values__ = undefined2;
          if (result2) {
            previous.__wrapped__ = clone2;
          } else {
            result2 = clone2;
          }
          var previous = clone2;
          parent2 = parent2.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result2;
      }
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            func: thru,
            args: [reverse],
            thisArg: undefined2
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }
      var countBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty.call(result2, key)) {
          ++result2[key];
        } else {
          baseAssignValue(result2, key, 1);
        }
      });
      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined2;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }
      var find = createFind(findIndex);
      var findLast = createFind(findLastIndex);
      function flatMap(collection, iteratee2) {
        return baseFlatten(map(collection, iteratee2), 1);
      }
      function flatMapDeep(collection, iteratee2) {
        return baseFlatten(map(collection, iteratee2), INFINITY);
      }
      function flatMapDepth(collection, iteratee2, depth) {
        depth = depth === undefined2 ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee2), depth);
      }
      function forEach(collection, iteratee2) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function forEachRight(collection, iteratee2) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee2, 3));
      }
      var groupBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty.call(result2, key)) {
          result2[key].push(value);
        } else {
          baseAssignValue(result2, key, [value]);
        }
      });
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }
      var invokeMap = baseRest(function(collection, path, args) {
        var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value) {
          result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result2;
      });
      var keyBy = createAggregator(function(result2, value, key) {
        baseAssignValue(result2, key, value);
      });
      function map(collection, iteratee2) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined2 : orders;
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }
      var partition = createAggregator(function(result2, value, key) {
        result2[key ? 0 : 1].push(value);
      }, function() {
        return [[], []];
      });
      function reduce(collection, iteratee2, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
      }
      function reduceRight(collection, iteratee2, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
      }
      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }
      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }
      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }
      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }
      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined2;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });
      var now = ctxNow || function() {
        return root.Date.now();
      };
      function after(n, func) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }
      function ary(func, n, guard) {
        n = guard ? undefined2 : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
      }
      function before(n, func) {
        var result2;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result2 = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined2;
          }
          return result2;
        };
      }
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });
      function curry(func, arity, guard) {
        arity = guard ? undefined2 : arity;
        var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
        result2.placeholder = curry.placeholder;
        return result2;
      }
      function curryRight(func, arity, guard) {
        arity = guard ? undefined2 : arity;
        var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
        result2.placeholder = curryRight.placeholder;
        return result2;
      }
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = undefined2;
          lastInvokeTime = time;
          result2 = func.apply(thisArg, args);
          return result2;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout2(timerExpired, wait);
          return leading ? invokeFunc(time) : result2;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout2(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = undefined2;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined2;
          return result2;
        }
        function cancel() {
          if (timerId !== undefined2) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined2;
        }
        function flush() {
          return timerId === undefined2 ? result2 : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === undefined2) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout2(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined2) {
            timerId = setTimeout2(timerExpired, wait);
          }
          return result2;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result2 = func.apply(this, args);
          memoized.cache = cache.set(key, result2) || cache;
          return result2;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function negate(predicate) {
        if (typeof predicate != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return !predicate.call(this);
            case 1:
              return !predicate.call(this, args[0]);
            case 2:
              return !predicate.call(this, args[0], args[1]);
            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }
      function once(func) {
        return before(2, func);
      }
      var overArgs = castRest(function(func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index = -1, length = nativeMin(args.length, funcsLength);
          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
      });
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
      });
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
      });
      function rest(func, start) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        start = start === undefined2 ? start : toInteger(start);
        return baseRest(func, start);
      }
      function spread(func, start) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array = args[start], otherArgs = castSlice(args, 0, start);
          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }
      function throttle(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          leading,
          maxWait: wait,
          trailing
        });
      }
      function unary(func) {
        return ary(func, 1);
      }
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray(value) ? value : [value];
      }
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }
      function cloneWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArray = Array2.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }
      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        var result2 = customizer ? customizer(value, other) : undefined2;
        return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
      }
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
      }
      function isFinite(value) {
        return typeof value == "number" && nativeIsFinite(value);
      }
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      function isInteger(value) {
        return typeof value == "number" && value == toInteger(value);
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }
      function isNaN2(value) {
        return isNumber(value) && value != +value;
      }
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error2(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }
      function isNull(value) {
        return value === null;
      }
      function isNil(value) {
        return value == null;
      }
      function isNumber(value) {
        return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
      }
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
      function isString(value) {
        return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function isUndefined(value) {
        return value === undefined2;
      }
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }
      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      function toInteger(value) {
        var result2 = toFinite(value), remainder = result2 % 1;
        return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
      }
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, "");
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      var assign = createAssigner(function(object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function(object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);
      function create(prototype, properties) {
        var result2 = baseCreate(prototype);
        return properties == null ? result2 : baseAssign(result2, properties);
      }
      var defaults = baseRest(function(object, sources) {
        object = Object2(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined2;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;
          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];
            if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          }
        }
        return object;
      });
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined2, customDefaultsMerge);
        return apply(mergeWith, undefined2, args);
      });
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }
      function forIn(object, iteratee2) {
        return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
      }
      function forInRight(object, iteratee2) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
      }
      function forOwn(object, iteratee2) {
        return object && baseForOwn(object, getIteratee(iteratee2, 3));
      }
      function forOwnRight(object, iteratee2) {
        return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
      }
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }
      function get(object, path, defaultValue) {
        var result2 = object == null ? undefined2 : baseGet(object, path);
        return result2 === undefined2 ? defaultValue : result2;
      }
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }
      var invert = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString.call(value);
        }
        result2[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString.call(value);
        }
        if (hasOwnProperty.call(result2, value)) {
          result2[value].push(key);
        } else {
          result2[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      function mapKeys(object, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn(object, function(value, key, object2) {
          baseAssignValue(result2, iteratee2(value, key, object2), value);
        });
        return result2;
      }
      function mapValues(object, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn(object, function(value, key, object2) {
          baseAssignValue(result2, key, iteratee2(value, key, object2));
        });
        return result2;
      }
      var merge = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function(object, paths) {
        var result2 = {};
        if (object == null) {
          return result2;
        }
        var isDeep = false;
        paths = arrayMap(paths, function(path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result2);
        if (isDeep) {
          result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result2, paths[length]);
        }
        return result2;
      });
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function(value, path) {
          return predicate(value, path[0]);
        });
      }
      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index = -1, length = path.length;
        if (!length) {
          length = 1;
          object = undefined2;
        }
        while (++index < length) {
          var value = object == null ? undefined2 : object[toKey(path[index])];
          if (value === undefined2) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }
      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return object == null ? object : baseSet(object, path, value, customizer);
      }
      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);
      function transform(object, iteratee2, accumulator) {
        var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee2 = getIteratee(iteratee2, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
          return iteratee2(accumulator, value, index, object2);
        });
        return accumulator;
      }
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }
      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined2;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }
      function clamp(number, lower, upper) {
        if (upper === undefined2) {
          upper = lower;
          lower = undefined2;
        }
        if (upper !== undefined2) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined2) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined2) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }
      function random(lower, upper, floating) {
        if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined2;
        }
        if (floating === undefined2) {
          if (typeof upper == "boolean") {
            floating = upper;
            upper = undefined2;
          } else if (typeof lower == "boolean") {
            floating = lower;
            lower = undefined2;
          }
        }
        if (lower === undefined2 && upper === undefined2) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);
          if (upper === undefined2) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
        }
        return baseRandom(lower, upper);
      }
      var camelCase = createCompounder(function(result2, word, index) {
        word = word.toLowerCase();
        return result2 + (index ? capitalize(word) : word);
      });
      function capitalize(string2) {
        return upperFirst(toString(string2).toLowerCase());
      }
      function deburr2(string2) {
        string2 = toString(string2);
        return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
      }
      function endsWith(string2, target, position) {
        string2 = toString(string2);
        target = baseToString(target);
        var length = string2.length;
        position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string2.slice(position, end) == target;
      }
      function escape(string2) {
        string2 = toString(string2);
        return string2 && reHasUnescapedHtml.test(string2) ? string2.replace(reUnescapedHtml, escapeHtmlChar) : string2;
      }
      function escapeRegExp(string2) {
        string2 = toString(string2);
        return string2 && reHasRegExpChar.test(string2) ? string2.replace(reRegExpChar, "\\$&") : string2;
      }
      var kebabCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? "-" : "") + word.toLowerCase();
      });
      var lowerCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? " " : "") + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst("toLowerCase");
      function pad(string2, length, chars) {
        string2 = toString(string2);
        length = toInteger(length);
        var strLength = length ? stringSize(string2) : 0;
        if (!length || strLength >= length) {
          return string2;
        }
        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string2 + createPadding(nativeCeil(mid), chars);
      }
      function padEnd(string2, length, chars) {
        string2 = toString(string2);
        length = toInteger(length);
        var strLength = length ? stringSize(string2) : 0;
        return length && strLength < length ? string2 + createPadding(length - strLength, chars) : string2;
      }
      function padStart(string2, length, chars) {
        string2 = toString(string2);
        length = toInteger(length);
        var strLength = length ? stringSize(string2) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string2 : string2;
      }
      function parseInt2(string2, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string2).replace(reTrimStart, ""), radix || 0);
      }
      function repeat(string2, n, guard) {
        if (guard ? isIterateeCall(string2, n, guard) : n === undefined2) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string2), n);
      }
      function replace() {
        var args = arguments, string2 = toString(args[0]);
        return args.length < 3 ? string2 : string2.replace(args[1], args[2]);
      }
      var snakeCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? "_" : "") + word.toLowerCase();
      });
      function split(string2, separator, limit) {
        if (limit && typeof limit != "number" && isIterateeCall(string2, separator, limit)) {
          separator = limit = undefined2;
        }
        limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string2 = toString(string2);
        if (string2 && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string2)) {
            return castSlice(stringToArray(string2), 0, limit);
          }
        }
        return string2.split(separator, limit);
      }
      var startCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? " " : "") + upperFirst(word);
      });
      function startsWith(string2, target, position) {
        string2 = toString(string2);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string2.length);
        target = baseToString(target);
        return string2.slice(position, position + target.length) == target;
      }
      function template(string2, options, guard) {
        var settings = lodash.templateSettings;
        if (guard && isIterateeCall(string2, options, guard)) {
          options = undefined2;
        }
        string2 = toString(string2);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
        var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
        var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
        var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
        string2.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string2.slice(index, offset).replace(reUnescapedString, escapeStringChar);
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = hasOwnProperty.call(options, "variable") && options.variable;
        if (!variable) {
          source = "with (obj) {\n" + source + "\n}\n";
        }
        source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
        source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
        var result2 = attempt(function() {
          return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
        });
        result2.source = source;
        if (isError(result2)) {
          throw result2;
        }
        return result2;
      }
      function toLower(value) {
        return toString(value).toLowerCase();
      }
      function toUpper(value) {
        return toString(value).toUpperCase();
      }
      function trim(string2, chars, guard) {
        string2 = toString(string2);
        if (string2 && (guard || chars === undefined2)) {
          return string2.replace(reTrim, "");
        }
        if (!string2 || !(chars = baseToString(chars))) {
          return string2;
        }
        var strSymbols = stringToArray(string2), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join("");
      }
      function trimEnd(string2, chars, guard) {
        string2 = toString(string2);
        if (string2 && (guard || chars === undefined2)) {
          return string2.replace(reTrimEnd, "");
        }
        if (!string2 || !(chars = baseToString(chars))) {
          return string2;
        }
        var strSymbols = stringToArray(string2), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join("");
      }
      function trimStart(string2, chars, guard) {
        string2 = toString(string2);
        if (string2 && (guard || chars === undefined2)) {
          return string2.replace(reTrimStart, "");
        }
        if (!string2 || !(chars = baseToString(chars))) {
          return string2;
        }
        var strSymbols = stringToArray(string2), start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join("");
      }
      function truncate(string2, options) {
        var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
        if (isObject(options)) {
          var separator = "separator" in options ? options.separator : separator;
          length = "length" in options ? toInteger(options.length) : length;
          omission = "omission" in options ? baseToString(options.omission) : omission;
        }
        string2 = toString(string2);
        var strLength = string2.length;
        if (hasUnicode(string2)) {
          var strSymbols = stringToArray(string2);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string2;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string2.slice(0, end);
        if (separator === undefined2) {
          return result2 + omission;
        }
        if (strSymbols) {
          end += result2.length - end;
        }
        if (isRegExp(separator)) {
          if (string2.slice(end).search(separator)) {
            var match, substring = result2;
            if (!separator.global) {
              separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
            }
            separator.lastIndex = 0;
            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }
            result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
          }
        } else if (string2.indexOf(baseToString(separator), end) != end) {
          var index = result2.lastIndexOf(separator);
          if (index > -1) {
            result2 = result2.slice(0, index);
          }
        }
        return result2 + omission;
      }
      function unescape(string2) {
        string2 = toString(string2);
        return string2 && reHasEscapedHtml.test(string2) ? string2.replace(reEscapedHtml, unescapeHtmlChar) : string2;
      }
      var upperCase = createCompounder(function(result2, word, index) {
        return result2 + (index ? " " : "") + word.toUpperCase();
      });
      var upperFirst = createCaseFirst("toUpperCase");
      function words(string2, pattern, guard) {
        string2 = toString(string2);
        pattern = guard ? undefined2 : pattern;
        if (pattern === undefined2) {
          return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
        }
        return string2.match(pattern) || [];
      }
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined2, args);
        } catch (e) {
          return isError(e) ? e : new Error2(e);
        }
      });
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function(pair) {
          if (typeof pair[1] != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function(args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }
      function constant(value) {
        return function() {
          return value;
        };
      }
      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }
      var flow = createFlow();
      var flowRight = createFlow(true);
      function identity(value) {
        return value;
      }
      function iteratee(func) {
        return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
      }
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }
      var method = baseRest(function(path, args) {
        return function(object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function(object, args) {
        return function(path) {
          return baseInvoke(object, path, args);
        };
      });
      function mixin(object, source, options) {
        var props = keys(source), methodNames = baseFunctions(source, props);
        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
        arrayEach(methodNames, function(methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain2 || chainAll) {
                var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                actions.push({func, args: arguments, thisArg: object});
                result2.__chain__ = chainAll;
                return result2;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }
      function noop() {
      }
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }
      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }
      function propertyOf(object) {
        return function(path) {
          return object == null ? undefined2 : baseGet(object, path);
        };
      }
      var range = createRange();
      var rangeRight = createRange(true);
      function stubArray() {
        return [];
      }
      function stubFalse() {
        return false;
      }
      function stubObject() {
        return {};
      }
      function stubString() {
        return "";
      }
      function stubTrue() {
        return true;
      }
      function times(n, iteratee2) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee2 = getIteratee(iteratee2);
        n -= MAX_ARRAY_LENGTH;
        var result2 = baseTimes(length, iteratee2);
        while (++index < n) {
          iteratee2(index);
        }
        return result2;
      }
      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound("ceil");
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound("floor");
      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
      }
      function maxBy(array, iteratee2) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
      }
      function mean(array) {
        return baseMean(array, identity);
      }
      function meanBy(array, iteratee2) {
        return baseMean(array, getIteratee(iteratee2, 2));
      }
      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
      }
      function minBy(array, iteratee2) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
      }
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound("round");
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);
      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }
      function sumBy(array, iteratee2) {
        return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
      }
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr2;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN2;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt2;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext2;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {chain: false});
      lodash.VERSION = VERSION;
      arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(["drop", "take"], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
          var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
          if (result2.__filtered__) {
            result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
          } else {
            result2.__views__.push({
              size: nativeMin(n, MAX_ARRAY_LENGTH),
              type: methodName + (result2.__dir__ < 0 ? "Right" : "")
            });
          }
          return result2;
        };
        LazyWrapper.prototype[methodName + "Right"] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
        var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
        LazyWrapper.prototype[methodName] = function(iteratee2) {
          var result2 = this.clone();
          result2.__iteratees__.push({
            iteratee: getIteratee(iteratee2, 3),
            type
          });
          result2.__filtered__ = result2.__filtered__ || isFilter;
          return result2;
        };
      });
      arrayEach(["head", "last"], function(methodName, index) {
        var takeName = "take" + (index ? "Right" : "");
        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(["initial", "tail"], function(methodName, index) {
        var dropName = "drop" + (index ? "" : "Right");
        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });
      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };
      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };
      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };
      LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
        if (typeof path == "function") {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path, args);
        });
      });
      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };
      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);
        var result2 = this;
        if (result2.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result2);
        }
        if (start < 0) {
          result2 = result2.takeRight(-start);
        } else if (start) {
          result2 = result2.drop(start);
        }
        if (end !== undefined2) {
          end = toInteger(end);
          result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
        }
        return result2;
      };
      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };
      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function() {
          var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
          var interceptor = function(value2) {
            var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
            return isTaker && chainAll ? result3[0] : result3;
          };
          if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result2 = func.apply(value, args);
            result2.__actions__.push({func: thru, args: [interceptor], thisArg: undefined2});
            return new LodashWrapper(result2, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result2 = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
        };
      });
      arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
        var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
        lodash.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }
          return this[chainName](function(value2) {
            return func.apply(isArray(value2) ? value2 : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + "";
          if (!hasOwnProperty.call(realNames, key)) {
            realNames[key] = [];
          }
          realNames[key].push({name: methodName, func: lodashFunc});
        }
      });
      realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
        name: "wrapper",
        func: undefined2
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;
      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }
      return lodash;
    };
    var _ = runInContext();
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
      root._ = _;
      define(function() {
        return _;
      });
    } else if (freeModule) {
      (freeModule.exports = _)._ = _;
      freeExports._ = _;
    } else {
      root._ = _;
    }
  }).call(exports2);
});
var require_interopRequireDefault = __commonJS((exports2, module2) => {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }
  module2.exports = _interopRequireDefault;
});
var require_global = __commonJS((exports2, module2) => {
  var check = function(it) {
    return it && it.Math == Math && it;
  };
  module2.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || function() {
    return this;
  }() || Function("return this")();
});
var require_fails = __commonJS((exports2, module2) => {
  module2.exports = function(exec) {
    try {
      return !!exec();
    } catch (error) {
      return true;
    }
  };
});
var require_descriptors = __commonJS((exports2, module2) => {
  var fails = require_fails();
  module2.exports = !fails(function() {
    return Object.defineProperty({}, 1, {get: function() {
      return 7;
    }})[1] != 7;
  });
});
var require_object_property_is_enumerable = __commonJS((exports2) => {
  "use strict";
  var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({1: 2}, 1);
  exports2.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor(this, V);
    return !!descriptor && descriptor.enumerable;
  } : nativePropertyIsEnumerable;
});
var require_create_property_descriptor = __commonJS((exports2, module2) => {
  module2.exports = function(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value
    };
  };
});
var require_classof_raw = __commonJS((exports2, module2) => {
  var toString = {}.toString;
  module2.exports = function(it) {
    return toString.call(it).slice(8, -1);
  };
});
var require_indexed_object = __commonJS((exports2, module2) => {
  var fails = require_fails();
  var classof = require_classof_raw();
  var split = "".split;
  module2.exports = fails(function() {
    return !Object("z").propertyIsEnumerable(0);
  }) ? function(it) {
    return classof(it) == "String" ? split.call(it, "") : Object(it);
  } : Object;
});
var require_require_object_coercible = __commonJS((exports2, module2) => {
  module2.exports = function(it) {
    if (it == void 0)
      throw TypeError("Can't call method on " + it);
    return it;
  };
});
var require_to_indexed_object = __commonJS((exports2, module2) => {
  var IndexedObject = require_indexed_object();
  var requireObjectCoercible = require_require_object_coercible();
  module2.exports = function(it) {
    return IndexedObject(requireObjectCoercible(it));
  };
});
var require_is_object = __commonJS((exports2, module2) => {
  module2.exports = function(it) {
    return typeof it === "object" ? it !== null : typeof it === "function";
  };
});
var require_to_primitive = __commonJS((exports2, module2) => {
  var isObject = require_is_object();
  module2.exports = function(input, PREFERRED_STRING) {
    if (!isObject(input))
      return input;
    var fn, val;
    if (PREFERRED_STRING && typeof (fn = input.toString) == "function" && !isObject(val = fn.call(input)))
      return val;
    if (typeof (fn = input.valueOf) == "function" && !isObject(val = fn.call(input)))
      return val;
    if (!PREFERRED_STRING && typeof (fn = input.toString) == "function" && !isObject(val = fn.call(input)))
      return val;
    throw TypeError("Can't convert object to primitive value");
  };
});
var require_has = __commonJS((exports2, module2) => {
  var hasOwnProperty = {}.hasOwnProperty;
  module2.exports = function(it, key) {
    return hasOwnProperty.call(it, key);
  };
});
var require_document_create_element = __commonJS((exports2, module2) => {
  var global2 = require_global();
  var isObject = require_is_object();
  var document2 = global2.document;
  var EXISTS = isObject(document2) && isObject(document2.createElement);
  module2.exports = function(it) {
    return EXISTS ? document2.createElement(it) : {};
  };
});
var require_ie8_dom_define = __commonJS((exports2, module2) => {
  var DESCRIPTORS = require_descriptors();
  var fails = require_fails();
  var createElement = require_document_create_element();
  module2.exports = !DESCRIPTORS && !fails(function() {
    return Object.defineProperty(createElement("div"), "a", {
      get: function() {
        return 7;
      }
    }).a != 7;
  });
});
var require_object_get_own_property_descriptor = __commonJS((exports2) => {
  var DESCRIPTORS = require_descriptors();
  var propertyIsEnumerableModule = require_object_property_is_enumerable();
  var createPropertyDescriptor = require_create_property_descriptor();
  var toIndexedObject = require_to_indexed_object();
  var toPrimitive = require_to_primitive();
  var has = require_has();
  var IE8_DOM_DEFINE = require_ie8_dom_define();
  var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  exports2.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject(O);
    P = toPrimitive(P, true);
    if (IE8_DOM_DEFINE)
      try {
        return nativeGetOwnPropertyDescriptor(O, P);
      } catch (error) {
      }
    if (has(O, P))
      return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
  };
});
var require_is_forced = __commonJS((exports2, module2) => {
  var fails = require_fails();
  var replacement = /#|\.prototype\./;
  var isForced = function(feature, detection) {
    var value = data[normalize(feature)];
    return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == "function" ? fails(detection) : !!detection;
  };
  var normalize = isForced.normalize = function(string2) {
    return String(string2).replace(replacement, ".").toLowerCase();
  };
  var data = isForced.data = {};
  var NATIVE = isForced.NATIVE = "N";
  var POLYFILL = isForced.POLYFILL = "P";
  module2.exports = isForced;
});
var require_path = __commonJS((exports2, module2) => {
  module2.exports = {};
});
var require_a_function = __commonJS((exports2, module2) => {
  module2.exports = function(it) {
    if (typeof it != "function") {
      throw TypeError(String(it) + " is not a function");
    }
    return it;
  };
});
var require_function_bind_context = __commonJS((exports2, module2) => {
  var aFunction = require_a_function();
  module2.exports = function(fn, that, length) {
    aFunction(fn);
    if (that === void 0)
      return fn;
    switch (length) {
      case 0:
        return function() {
          return fn.call(that);
        };
      case 1:
        return function(a) {
          return fn.call(that, a);
        };
      case 2:
        return function(a, b) {
          return fn.call(that, a, b);
        };
      case 3:
        return function(a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
    return function() {
      return fn.apply(that, arguments);
    };
  };
});
var require_an_object = __commonJS((exports2, module2) => {
  var isObject = require_is_object();
  module2.exports = function(it) {
    if (!isObject(it)) {
      throw TypeError(String(it) + " is not an object");
    }
    return it;
  };
});
var require_object_define_property = __commonJS((exports2) => {
  var DESCRIPTORS = require_descriptors();
  var IE8_DOM_DEFINE = require_ie8_dom_define();
  var anObject = require_an_object();
  var toPrimitive = require_to_primitive();
  var nativeDefineProperty = Object.defineProperty;
  exports2.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE)
      try {
        return nativeDefineProperty(O, P, Attributes);
      } catch (error) {
      }
    if ("get" in Attributes || "set" in Attributes)
      throw TypeError("Accessors not supported");
    if ("value" in Attributes)
      O[P] = Attributes.value;
    return O;
  };
});
var require_create_non_enumerable_property = __commonJS((exports2, module2) => {
  var DESCRIPTORS = require_descriptors();
  var definePropertyModule = require_object_define_property();
  var createPropertyDescriptor = require_create_property_descriptor();
  module2.exports = DESCRIPTORS ? function(object, key, value) {
    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
  } : function(object, key, value) {
    object[key] = value;
    return object;
  };
});
var require_export = __commonJS((exports2, module2) => {
  "use strict";
  var global2 = require_global();
  var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
  var isForced = require_is_forced();
  var path = require_path();
  var bind = require_function_bind_context();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var has = require_has();
  var wrapConstructor = function(NativeConstructor) {
    var Wrapper = function(a, b, c) {
      if (this instanceof NativeConstructor) {
        switch (arguments.length) {
          case 0:
            return new NativeConstructor();
          case 1:
            return new NativeConstructor(a);
          case 2:
            return new NativeConstructor(a, b);
        }
        return new NativeConstructor(a, b, c);
      }
      return NativeConstructor.apply(this, arguments);
    };
    Wrapper.prototype = NativeConstructor.prototype;
    return Wrapper;
  };
  module2.exports = function(options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var PROTO = options.proto;
    var nativeSource = GLOBAL ? global2 : STATIC ? global2[TARGET] : (global2[TARGET] || {}).prototype;
    var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});
    var targetPrototype = target.prototype;
    var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
    var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
    for (key in source) {
      FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
      USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);
      targetProperty = target[key];
      if (USE_NATIVE)
        if (options.noTargetGet) {
          descriptor = getOwnPropertyDescriptor(nativeSource, key);
          nativeProperty = descriptor && descriptor.value;
        } else
          nativeProperty = nativeSource[key];
      sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
      if (USE_NATIVE && typeof targetProperty === typeof sourceProperty)
        continue;
      if (options.bind && USE_NATIVE)
        resultProperty = bind(sourceProperty, global2);
      else if (options.wrap && USE_NATIVE)
        resultProperty = wrapConstructor(sourceProperty);
      else if (PROTO && typeof sourceProperty == "function")
        resultProperty = bind(Function.call, sourceProperty);
      else
        resultProperty = sourceProperty;
      if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
        createNonEnumerableProperty(resultProperty, "sham", true);
      }
      target[key] = resultProperty;
      if (PROTO) {
        VIRTUAL_PROTOTYPE = TARGET + "Prototype";
        if (!has(path, VIRTUAL_PROTOTYPE)) {
          createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
        }
        path[VIRTUAL_PROTOTYPE][key] = sourceProperty;
        if (options.real && targetPrototype && !targetPrototype[key]) {
          createNonEnumerableProperty(targetPrototype, key, sourceProperty);
        }
      }
    }
  };
});
var require_es_object_define_property = __commonJS(() => {
  var $ = require_export();
  var DESCRIPTORS = require_descriptors();
  var objectDefinePropertyModile = require_object_define_property();
  $({target: "Object", stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS}, {
    defineProperty: objectDefinePropertyModile.f
  });
});
var require_define_property = __commonJS((exports2, module2) => {
  require_es_object_define_property();
  var path = require_path();
  var Object2 = path.Object;
  var defineProperty = module2.exports = function defineProperty2(it, key, desc) {
    return Object2.defineProperty(it, key, desc);
  };
  if (Object2.defineProperty.sham)
    defineProperty.sham = true;
});
var require_define_property2 = __commonJS((exports2, module2) => {
  var parent = require_define_property();
  module2.exports = parent;
});
var require_define_property3 = __commonJS((exports2, module2) => {
  module2.exports = require_define_property2();
});
var require_add_to_unscopables = __commonJS((exports2, module2) => {
  module2.exports = function() {
  };
});
var require_iterators = __commonJS((exports2, module2) => {
  module2.exports = {};
});
var require_set_global = __commonJS((exports2, module2) => {
  var global2 = require_global();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  module2.exports = function(key, value) {
    try {
      createNonEnumerableProperty(global2, key, value);
    } catch (error) {
      global2[key] = value;
    }
    return value;
  };
});
var require_shared_store = __commonJS((exports2, module2) => {
  var global2 = require_global();
  var setGlobal = require_set_global();
  var SHARED = "__core-js_shared__";
  var store = global2[SHARED] || setGlobal(SHARED, {});
  module2.exports = store;
});
var require_inspect_source = __commonJS((exports2, module2) => {
  var store = require_shared_store();
  var functionToString = Function.toString;
  if (typeof store.inspectSource != "function") {
    store.inspectSource = function(it) {
      return functionToString.call(it);
    };
  }
  module2.exports = store.inspectSource;
});
var require_native_weak_map = __commonJS((exports2, module2) => {
  var global2 = require_global();
  var inspectSource = require_inspect_source();
  var WeakMap = global2.WeakMap;
  module2.exports = typeof WeakMap === "function" && /native code/.test(inspectSource(WeakMap));
});
var require_is_pure = __commonJS((exports2, module2) => {
  module2.exports = true;
});
var require_shared = __commonJS((exports2, module2) => {
  var IS_PURE = require_is_pure();
  var store = require_shared_store();
  (module2.exports = function(key, value) {
    return store[key] || (store[key] = value !== void 0 ? value : {});
  })("versions", []).push({
    version: "3.8.3",
    mode: IS_PURE ? "pure" : "global",
    copyright: "\xA9 2021 Denis Pushkarev (zloirock.ru)"
  });
});
var require_uid = __commonJS((exports2, module2) => {
  var id = 0;
  var postfix = Math.random();
  module2.exports = function(key) {
    return "Symbol(" + String(key === void 0 ? "" : key) + ")_" + (++id + postfix).toString(36);
  };
});
var require_shared_key = __commonJS((exports2, module2) => {
  var shared = require_shared();
  var uid = require_uid();
  var keys = shared("keys");
  module2.exports = function(key) {
    return keys[key] || (keys[key] = uid(key));
  };
});
var require_hidden_keys = __commonJS((exports2, module2) => {
  module2.exports = {};
});
var require_internal_state = __commonJS((exports2, module2) => {
  var NATIVE_WEAK_MAP = require_native_weak_map();
  var global2 = require_global();
  var isObject = require_is_object();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var objectHas = require_has();
  var shared = require_shared_store();
  var sharedKey = require_shared_key();
  var hiddenKeys = require_hidden_keys();
  var WeakMap = global2.WeakMap;
  var set;
  var get;
  var has;
  var enforce = function(it) {
    return has(it) ? get(it) : set(it, {});
  };
  var getterFor = function(TYPE) {
    return function(it) {
      var state;
      if (!isObject(it) || (state = get(it)).type !== TYPE) {
        throw TypeError("Incompatible receiver, " + TYPE + " required");
      }
      return state;
    };
  };
  if (NATIVE_WEAK_MAP) {
    store = shared.state || (shared.state = new WeakMap());
    wmget = store.get;
    wmhas = store.has;
    wmset = store.set;
    set = function(it, metadata) {
      metadata.facade = it;
      wmset.call(store, it, metadata);
      return metadata;
    };
    get = function(it) {
      return wmget.call(store, it) || {};
    };
    has = function(it) {
      return wmhas.call(store, it);
    };
  } else {
    STATE = sharedKey("state");
    hiddenKeys[STATE] = true;
    set = function(it, metadata) {
      metadata.facade = it;
      createNonEnumerableProperty(it, STATE, metadata);
      return metadata;
    };
    get = function(it) {
      return objectHas(it, STATE) ? it[STATE] : {};
    };
    has = function(it) {
      return objectHas(it, STATE);
    };
  }
  var store;
  var wmget;
  var wmhas;
  var wmset;
  var STATE;
  module2.exports = {
    set,
    get,
    has,
    enforce,
    getterFor
  };
});
var require_to_object = __commonJS((exports2, module2) => {
  var requireObjectCoercible = require_require_object_coercible();
  module2.exports = function(argument) {
    return Object(requireObjectCoercible(argument));
  };
});
var require_correct_prototype_getter = __commonJS((exports2, module2) => {
  var fails = require_fails();
  module2.exports = !fails(function() {
    function F() {
    }
    F.prototype.constructor = null;
    return Object.getPrototypeOf(new F()) !== F.prototype;
  });
});
var require_object_get_prototype_of = __commonJS((exports2, module2) => {
  var has = require_has();
  var toObject = require_to_object();
  var sharedKey = require_shared_key();
  var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
  var IE_PROTO = sharedKey("IE_PROTO");
  var ObjectPrototype = Object.prototype;
  module2.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {
    O = toObject(O);
    if (has(O, IE_PROTO))
      return O[IE_PROTO];
    if (typeof O.constructor == "function" && O instanceof O.constructor) {
      return O.constructor.prototype;
    }
    return O instanceof Object ? ObjectPrototype : null;
  };
});
var require_native_symbol = __commonJS((exports2, module2) => {
  var fails = require_fails();
  module2.exports = !!Object.getOwnPropertySymbols && !fails(function() {
    return !String(Symbol());
  });
});
var require_use_symbol_as_uid = __commonJS((exports2, module2) => {
  var NATIVE_SYMBOL = require_native_symbol();
  module2.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
});
var require_well_known_symbol = __commonJS((exports2, module2) => {
  var global2 = require_global();
  var shared = require_shared();
  var has = require_has();
  var uid = require_uid();
  var NATIVE_SYMBOL = require_native_symbol();
  var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
  var WellKnownSymbolsStore = shared("wks");
  var Symbol2 = global2.Symbol;
  var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
  module2.exports = function(name) {
    if (!has(WellKnownSymbolsStore, name)) {
      if (NATIVE_SYMBOL && has(Symbol2, name))
        WellKnownSymbolsStore[name] = Symbol2[name];
      else
        WellKnownSymbolsStore[name] = createWellKnownSymbol("Symbol." + name);
    }
    return WellKnownSymbolsStore[name];
  };
});
var require_iterators_core = __commonJS((exports2, module2) => {
  "use strict";
  var fails = require_fails();
  var getPrototypeOf = require_object_get_prototype_of();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var has = require_has();
  var wellKnownSymbol = require_well_known_symbol();
  var IS_PURE = require_is_pure();
  var ITERATOR = wellKnownSymbol("iterator");
  var BUGGY_SAFARI_ITERATORS = false;
  var returnThis = function() {
    return this;
  };
  var IteratorPrototype;
  var PrototypeOfArrayIteratorPrototype;
  var arrayIterator;
  if ([].keys) {
    arrayIterator = [].keys();
    if (!("next" in arrayIterator))
      BUGGY_SAFARI_ITERATORS = true;
    else {
      PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
      if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
        IteratorPrototype = PrototypeOfArrayIteratorPrototype;
    }
  }
  var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
    var test = {};
    return IteratorPrototype[ITERATOR].call(test) !== test;
  });
  if (NEW_ITERATOR_PROTOTYPE)
    IteratorPrototype = {};
  if ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) {
    createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
  }
  module2.exports = {
    IteratorPrototype,
    BUGGY_SAFARI_ITERATORS
  };
});
var require_to_integer = __commonJS((exports2, module2) => {
  var ceil = Math.ceil;
  var floor = Math.floor;
  module2.exports = function(argument) {
    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
  };
});
var require_to_length = __commonJS((exports2, module2) => {
  var toInteger = require_to_integer();
  var min = Math.min;
  module2.exports = function(argument) {
    return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0;
  };
});
var require_to_absolute_index = __commonJS((exports2, module2) => {
  var toInteger = require_to_integer();
  var max = Math.max;
  var min = Math.min;
  module2.exports = function(index, length) {
    var integer = toInteger(index);
    return integer < 0 ? max(integer + length, 0) : min(integer, length);
  };
});
var require_array_includes = __commonJS((exports2, module2) => {
  var toIndexedObject = require_to_indexed_object();
  var toLength = require_to_length();
  var toAbsoluteIndex = require_to_absolute_index();
  var createMethod = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
      var O = toIndexedObject($this);
      var length = toLength(O.length);
      var index = toAbsoluteIndex(fromIndex, length);
      var value;
      if (IS_INCLUDES && el != el)
        while (length > index) {
          value = O[index++];
          if (value != value)
            return true;
        }
      else
        for (; length > index; index++) {
          if ((IS_INCLUDES || index in O) && O[index] === el)
            return IS_INCLUDES || index || 0;
        }
      return !IS_INCLUDES && -1;
    };
  };
  module2.exports = {
    includes: createMethod(true),
    indexOf: createMethod(false)
  };
});
var require_object_keys_internal = __commonJS((exports2, module2) => {
  var has = require_has();
  var toIndexedObject = require_to_indexed_object();
  var indexOf = require_array_includes().indexOf;
  var hiddenKeys = require_hidden_keys();
  module2.exports = function(object, names) {
    var O = toIndexedObject(object);
    var i2 = 0;
    var result = [];
    var key;
    for (key in O)
      !has(hiddenKeys, key) && has(O, key) && result.push(key);
    while (names.length > i2)
      if (has(O, key = names[i2++])) {
        ~indexOf(result, key) || result.push(key);
      }
    return result;
  };
});
var require_enum_bug_keys = __commonJS((exports2, module2) => {
  module2.exports = [
    "constructor",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "toLocaleString",
    "toString",
    "valueOf"
  ];
});
var require_object_keys = __commonJS((exports2, module2) => {
  var internalObjectKeys = require_object_keys_internal();
  var enumBugKeys = require_enum_bug_keys();
  module2.exports = Object.keys || function keys(O) {
    return internalObjectKeys(O, enumBugKeys);
  };
});
var require_object_define_properties = __commonJS((exports2, module2) => {
  var DESCRIPTORS = require_descriptors();
  var definePropertyModule = require_object_define_property();
  var anObject = require_an_object();
  var objectKeys = require_object_keys();
  module2.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = objectKeys(Properties);
    var length = keys.length;
    var index = 0;
    var key;
    while (length > index)
      definePropertyModule.f(O, key = keys[index++], Properties[key]);
    return O;
  };
});
var require_get_built_in = __commonJS((exports2, module2) => {
  var path = require_path();
  var global2 = require_global();
  var aFunction = function(variable) {
    return typeof variable == "function" ? variable : void 0;
  };
  module2.exports = function(namespace, method) {
    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
  };
});
var require_html = __commonJS((exports2, module2) => {
  var getBuiltIn = require_get_built_in();
  module2.exports = getBuiltIn("document", "documentElement");
});
var require_object_create = __commonJS((exports2, module2) => {
  var anObject = require_an_object();
  var defineProperties = require_object_define_properties();
  var enumBugKeys = require_enum_bug_keys();
  var hiddenKeys = require_hidden_keys();
  var html = require_html();
  var documentCreateElement = require_document_create_element();
  var sharedKey = require_shared_key();
  var GT = ">";
  var LT = "<";
  var PROTOTYPE = "prototype";
  var SCRIPT = "script";
  var IE_PROTO = sharedKey("IE_PROTO");
  var EmptyConstructor = function() {
  };
  var scriptTag = function(content) {
    return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
  };
  var NullProtoObjectViaActiveX = function(activeXDocument2) {
    activeXDocument2.write(scriptTag(""));
    activeXDocument2.close();
    var temp = activeXDocument2.parentWindow.Object;
    activeXDocument2 = null;
    return temp;
  };
  var NullProtoObjectViaIFrame = function() {
    var iframe = documentCreateElement("iframe");
    var JS = "java" + SCRIPT + ":";
    var iframeDocument;
    iframe.style.display = "none";
    html.appendChild(iframe);
    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag("document.F=Object"));
    iframeDocument.close();
    return iframeDocument.F;
  };
  var activeXDocument;
  var NullProtoObject = function() {
    try {
      activeXDocument = document.domain && new ActiveXObject("htmlfile");
    } catch (error) {
    }
    NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
    var length = enumBugKeys.length;
    while (length--)
      delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
    return NullProtoObject();
  };
  hiddenKeys[IE_PROTO] = true;
  module2.exports = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      EmptyConstructor[PROTOTYPE] = anObject(O);
      result = new EmptyConstructor();
      EmptyConstructor[PROTOTYPE] = null;
      result[IE_PROTO] = O;
    } else
      result = NullProtoObject();
    return Properties === void 0 ? result : defineProperties(result, Properties);
  };
});
var require_to_string_tag_support = __commonJS((exports2, module2) => {
  var wellKnownSymbol = require_well_known_symbol();
  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
  var test = {};
  test[TO_STRING_TAG] = "z";
  module2.exports = String(test) === "[object z]";
});
var require_classof = __commonJS((exports2, module2) => {
  var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
  var classofRaw = require_classof_raw();
  var wellKnownSymbol = require_well_known_symbol();
  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
  var CORRECT_ARGUMENTS = classofRaw(function() {
    return arguments;
  }()) == "Arguments";
  var tryGet = function(it, key) {
    try {
      return it[key];
    } catch (error) {
    }
  };
  module2.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
    var O, tag, result;
    return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : result;
  };
});
var require_object_to_string = __commonJS((exports2, module2) => {
  "use strict";
  var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
  var classof = require_classof();
  module2.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
    return "[object " + classof(this) + "]";
  };
});
var require_set_to_string_tag = __commonJS((exports2, module2) => {
  var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
  var defineProperty = require_object_define_property().f;
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var has = require_has();
  var toString = require_object_to_string();
  var wellKnownSymbol = require_well_known_symbol();
  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
  module2.exports = function(it, TAG, STATIC, SET_METHOD) {
    if (it) {
      var target = STATIC ? it : it.prototype;
      if (!has(target, TO_STRING_TAG)) {
        defineProperty(target, TO_STRING_TAG, {configurable: true, value: TAG});
      }
      if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
        createNonEnumerableProperty(target, "toString", toString);
      }
    }
  };
});
var require_create_iterator_constructor = __commonJS((exports2, module2) => {
  "use strict";
  var IteratorPrototype = require_iterators_core().IteratorPrototype;
  var create = require_object_create();
  var createPropertyDescriptor = require_create_property_descriptor();
  var setToStringTag = require_set_to_string_tag();
  var Iterators = require_iterators();
  var returnThis = function() {
    return this;
  };
  module2.exports = function(IteratorConstructor, NAME, next) {
    var TO_STRING_TAG = NAME + " Iterator";
    IteratorConstructor.prototype = create(IteratorPrototype, {next: createPropertyDescriptor(1, next)});
    setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
    Iterators[TO_STRING_TAG] = returnThis;
    return IteratorConstructor;
  };
});
var require_a_possible_prototype = __commonJS((exports2, module2) => {
  var isObject = require_is_object();
  module2.exports = function(it) {
    if (!isObject(it) && it !== null) {
      throw TypeError("Can't set " + String(it) + " as a prototype");
    }
    return it;
  };
});
var require_object_set_prototype_of = __commonJS((exports2, module2) => {
  var anObject = require_an_object();
  var aPossiblePrototype = require_a_possible_prototype();
  module2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
    var CORRECT_SETTER = false;
    var test = {};
    var setter;
    try {
      setter = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set;
      setter.call(test, []);
      CORRECT_SETTER = test instanceof Array;
    } catch (error) {
    }
    return function setPrototypeOf(O, proto) {
      anObject(O);
      aPossiblePrototype(proto);
      if (CORRECT_SETTER)
        setter.call(O, proto);
      else
        O.__proto__ = proto;
      return O;
    };
  }() : void 0);
});
var require_redefine = __commonJS((exports2, module2) => {
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  module2.exports = function(target, key, value, options) {
    if (options && options.enumerable)
      target[key] = value;
    else
      createNonEnumerableProperty(target, key, value);
  };
});
var require_define_iterator = __commonJS((exports2, module2) => {
  "use strict";
  var $ = require_export();
  var createIteratorConstructor = require_create_iterator_constructor();
  var getPrototypeOf = require_object_get_prototype_of();
  var setPrototypeOf = require_object_set_prototype_of();
  var setToStringTag = require_set_to_string_tag();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var redefine = require_redefine();
  var wellKnownSymbol = require_well_known_symbol();
  var IS_PURE = require_is_pure();
  var Iterators = require_iterators();
  var IteratorsCore = require_iterators_core();
  var IteratorPrototype = IteratorsCore.IteratorPrototype;
  var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
  var ITERATOR = wellKnownSymbol("iterator");
  var KEYS = "keys";
  var VALUES = "values";
  var ENTRIES = "entries";
  var returnThis = function() {
    return this;
  };
  module2.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME, next);
    var getIterationMethod = function(KIND) {
      if (KIND === DEFAULT && defaultIterator)
        return defaultIterator;
      if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
        return IterablePrototype[KIND];
      switch (KIND) {
        case KEYS:
          return function keys() {
            return new IteratorConstructor(this, KIND);
          };
        case VALUES:
          return function values() {
            return new IteratorConstructor(this, KIND);
          };
        case ENTRIES:
          return function entries() {
            return new IteratorConstructor(this, KIND);
          };
      }
      return function() {
        return new IteratorConstructor(this);
      };
    };
    var TO_STRING_TAG = NAME + " Iterator";
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
    var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY;
    if (anyNativeIterator) {
      CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
      if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
        if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
          if (setPrototypeOf) {
            setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
          } else if (typeof CurrentIteratorPrototype[ITERATOR] != "function") {
            createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
          }
        }
        setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
        if (IS_PURE)
          Iterators[TO_STRING_TAG] = returnThis;
      }
    }
    if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() {
        return nativeIterator.call(this);
      };
    }
    if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
      createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
    }
    Iterators[NAME] = defaultIterator;
    if (DEFAULT) {
      methods = {
        values: getIterationMethod(VALUES),
        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
        entries: getIterationMethod(ENTRIES)
      };
      if (FORCED)
        for (KEY in methods) {
          if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
            redefine(IterablePrototype, KEY, methods[KEY]);
          }
        }
      else
        $({target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME}, methods);
    }
    return methods;
  };
});
var require_es_array_iterator = __commonJS((exports2, module2) => {
  "use strict";
  var toIndexedObject = require_to_indexed_object();
  var addToUnscopables = require_add_to_unscopables();
  var Iterators = require_iterators();
  var InternalStateModule = require_internal_state();
  var defineIterator = require_define_iterator();
  var ARRAY_ITERATOR = "Array Iterator";
  var setInternalState = InternalStateModule.set;
  var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
  module2.exports = defineIterator(Array, "Array", function(iterated, kind) {
    setInternalState(this, {
      type: ARRAY_ITERATOR,
      target: toIndexedObject(iterated),
      index: 0,
      kind
    });
  }, function() {
    var state = getInternalState(this);
    var target = state.target;
    var kind = state.kind;
    var index = state.index++;
    if (!target || index >= target.length) {
      state.target = void 0;
      return {value: void 0, done: true};
    }
    if (kind == "keys")
      return {value: index, done: false};
    if (kind == "values")
      return {value: target[index], done: false};
    return {value: [index, target[index]], done: false};
  }, "values");
  Iterators.Arguments = Iterators.Array;
  addToUnscopables("keys");
  addToUnscopables("values");
  addToUnscopables("entries");
});
var require_dom_iterables = __commonJS((exports2, module2) => {
  module2.exports = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };
});
var require_web_dom_collections_iterator = __commonJS(() => {
  require_es_array_iterator();
  var DOMIterables = require_dom_iterables();
  var global2 = require_global();
  var classof = require_classof();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var Iterators = require_iterators();
  var wellKnownSymbol = require_well_known_symbol();
  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
  for (var COLLECTION_NAME in DOMIterables) {
    Collection = global2[COLLECTION_NAME];
    CollectionPrototype = Collection && Collection.prototype;
    if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    Iterators[COLLECTION_NAME] = Iterators.Array;
  }
  var Collection;
  var CollectionPrototype;
});
var require_string_multibyte = __commonJS((exports2, module2) => {
  var toInteger = require_to_integer();
  var requireObjectCoercible = require_require_object_coercible();
  var createMethod = function(CONVERT_TO_STRING) {
    return function($this, pos) {
      var S = String(requireObjectCoercible($this));
      var position = toInteger(pos);
      var size = S.length;
      var first, second;
      if (position < 0 || position >= size)
        return CONVERT_TO_STRING ? "" : void 0;
      first = S.charCodeAt(position);
      return first < 55296 || first > 56319 || position + 1 === size || (second = S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
    };
  };
  module2.exports = {
    codeAt: createMethod(false),
    charAt: createMethod(true)
  };
});
var require_es_string_iterator = __commonJS(() => {
  "use strict";
  var charAt = require_string_multibyte().charAt;
  var InternalStateModule = require_internal_state();
  var defineIterator = require_define_iterator();
  var STRING_ITERATOR = "String Iterator";
  var setInternalState = InternalStateModule.set;
  var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
  defineIterator(String, "String", function(iterated) {
    setInternalState(this, {
      type: STRING_ITERATOR,
      string: String(iterated),
      index: 0
    });
  }, function next() {
    var state = getInternalState(this);
    var string2 = state.string;
    var index = state.index;
    var point;
    if (index >= string2.length)
      return {value: void 0, done: true};
    point = charAt(string2, index);
    state.index += point.length;
    return {value: point, done: false};
  });
});
var require_get_iterator_method = __commonJS((exports2, module2) => {
  var classof = require_classof();
  var Iterators = require_iterators();
  var wellKnownSymbol = require_well_known_symbol();
  var ITERATOR = wellKnownSymbol("iterator");
  module2.exports = function(it) {
    if (it != void 0)
      return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
  };
});
var require_get_iterator = __commonJS((exports2, module2) => {
  var anObject = require_an_object();
  var getIteratorMethod = require_get_iterator_method();
  module2.exports = function(it) {
    var iteratorMethod = getIteratorMethod(it);
    if (typeof iteratorMethod != "function") {
      throw TypeError(String(it) + " is not iterable");
    }
    return anObject(iteratorMethod.call(it));
  };
});
var require_get_iterator2 = __commonJS((exports2, module2) => {
  require_web_dom_collections_iterator();
  require_es_string_iterator();
  var getIterator = require_get_iterator();
  module2.exports = getIterator;
});
var require_get_iterator3 = __commonJS((exports2, module2) => {
  module2.exports = require_get_iterator2();
});
var require_is_array = __commonJS((exports2, module2) => {
  var classof = require_classof_raw();
  module2.exports = Array.isArray || function isArray(arg) {
    return classof(arg) == "Array";
  };
});
var require_es_array_is_array = __commonJS(() => {
  var $ = require_export();
  var isArray = require_is_array();
  $({target: "Array", stat: true}, {
    isArray
  });
});
var require_is_array2 = __commonJS((exports2, module2) => {
  require_es_array_is_array();
  var path = require_path();
  module2.exports = path.Array.isArray;
});
var require_is_array3 = __commonJS((exports2, module2) => {
  var parent = require_is_array2();
  module2.exports = parent;
});
var require_is_array4 = __commonJS((exports2, module2) => {
  module2.exports = require_is_array3();
});
var require_get_iterator_method2 = __commonJS((exports2, module2) => {
  require_web_dom_collections_iterator();
  require_es_string_iterator();
  var getIteratorMethod = require_get_iterator_method();
  module2.exports = getIteratorMethod;
});
var require_get_iterator_method3 = __commonJS((exports2, module2) => {
  module2.exports = require_get_iterator_method2();
});
var require_create_property = __commonJS((exports2, module2) => {
  "use strict";
  var toPrimitive = require_to_primitive();
  var definePropertyModule = require_object_define_property();
  var createPropertyDescriptor = require_create_property_descriptor();
  module2.exports = function(object, key, value) {
    var propertyKey = toPrimitive(key);
    if (propertyKey in object)
      definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
    else
      object[propertyKey] = value;
  };
});
var require_array_species_create = __commonJS((exports2, module2) => {
  var isObject = require_is_object();
  var isArray = require_is_array();
  var wellKnownSymbol = require_well_known_symbol();
  var SPECIES = wellKnownSymbol("species");
  module2.exports = function(originalArray, length) {
    var C;
    if (isArray(originalArray)) {
      C = originalArray.constructor;
      if (typeof C == "function" && (C === Array || isArray(C.prototype)))
        C = void 0;
      else if (isObject(C)) {
        C = C[SPECIES];
        if (C === null)
          C = void 0;
      }
    }
    return new (C === void 0 ? Array : C)(length === 0 ? 0 : length);
  };
});
var require_engine_user_agent = __commonJS((exports2, module2) => {
  var getBuiltIn = require_get_built_in();
  module2.exports = getBuiltIn("navigator", "userAgent") || "";
});
var require_engine_v8_version = __commonJS((exports2, module2) => {
  var global2 = require_global();
  var userAgent = require_engine_user_agent();
  var process2 = global2.process;
  var versions = process2 && process2.versions;
  var v8 = versions && versions.v8;
  var match;
  var version;
  if (v8) {
    match = v8.split(".");
    version = match[0] + match[1];
  } else if (userAgent) {
    match = userAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
      match = userAgent.match(/Chrome\/(\d+)/);
      if (match)
        version = match[1];
    }
  }
  module2.exports = version && +version;
});
var require_array_method_has_species_support = __commonJS((exports2, module2) => {
  var fails = require_fails();
  var wellKnownSymbol = require_well_known_symbol();
  var V8_VERSION = require_engine_v8_version();
  var SPECIES = wellKnownSymbol("species");
  module2.exports = function(METHOD_NAME) {
    return V8_VERSION >= 51 || !fails(function() {
      var array = [];
      var constructor = array.constructor = {};
      constructor[SPECIES] = function() {
        return {foo: 1};
      };
      return array[METHOD_NAME](Boolean).foo !== 1;
    });
  };
});
var require_es_array_concat = __commonJS(() => {
  "use strict";
  var $ = require_export();
  var fails = require_fails();
  var isArray = require_is_array();
  var isObject = require_is_object();
  var toObject = require_to_object();
  var toLength = require_to_length();
  var createProperty = require_create_property();
  var arraySpeciesCreate = require_array_species_create();
  var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
  var wellKnownSymbol = require_well_known_symbol();
  var V8_VERSION = require_engine_v8_version();
  var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
  var MAX_SAFE_INTEGER = 9007199254740991;
  var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";
  var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
    var array = [];
    array[IS_CONCAT_SPREADABLE] = false;
    return array.concat()[0] !== array;
  });
  var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
  var isConcatSpreadable = function(O) {
    if (!isObject(O))
      return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== void 0 ? !!spreadable : isArray(O);
  };
  var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
  $({target: "Array", proto: true, forced: FORCED}, {
    concat: function concat(arg) {
      var O = toObject(this);
      var A = arraySpeciesCreate(O, 0);
      var n = 0;
      var i2, k, length, len, E;
      for (i2 = -1, length = arguments.length; i2 < length; i2++) {
        E = i2 === -1 ? O : arguments[i2];
        if (isConcatSpreadable(E)) {
          len = toLength(E.length);
          if (n + len > MAX_SAFE_INTEGER)
            throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          for (k = 0; k < len; k++, n++)
            if (k in E)
              createProperty(A, n, E[k]);
        } else {
          if (n >= MAX_SAFE_INTEGER)
            throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
          createProperty(A, n++, E);
        }
      }
      A.length = n;
      return A;
    }
  });
});
var require_es_object_to_string = __commonJS(() => {
});
var require_object_get_own_property_names = __commonJS((exports2) => {
  var internalObjectKeys = require_object_keys_internal();
  var enumBugKeys = require_enum_bug_keys();
  var hiddenKeys = enumBugKeys.concat("length", "prototype");
  exports2.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return internalObjectKeys(O, hiddenKeys);
  };
});
var require_object_get_own_property_names_external = __commonJS((exports2, module2) => {
  var toIndexedObject = require_to_indexed_object();
  var nativeGetOwnPropertyNames = require_object_get_own_property_names().f;
  var toString = {}.toString;
  var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
  var getWindowNames = function(it) {
    try {
      return nativeGetOwnPropertyNames(it);
    } catch (error) {
      return windowNames.slice();
    }
  };
  module2.exports.f = function getOwnPropertyNames(it) {
    return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(it) : nativeGetOwnPropertyNames(toIndexedObject(it));
  };
});
var require_object_get_own_property_symbols = __commonJS((exports2) => {
  exports2.f = Object.getOwnPropertySymbols;
});
var require_well_known_symbol_wrapped = __commonJS((exports2) => {
  var wellKnownSymbol = require_well_known_symbol();
  exports2.f = wellKnownSymbol;
});
var require_define_well_known_symbol = __commonJS((exports2, module2) => {
  var path = require_path();
  var has = require_has();
  var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
  var defineProperty = require_object_define_property().f;
  module2.exports = function(NAME) {
    var Symbol2 = path.Symbol || (path.Symbol = {});
    if (!has(Symbol2, NAME))
      defineProperty(Symbol2, NAME, {
        value: wrappedWellKnownSymbolModule.f(NAME)
      });
  };
});
var require_array_iteration = __commonJS((exports2, module2) => {
  var bind = require_function_bind_context();
  var IndexedObject = require_indexed_object();
  var toObject = require_to_object();
  var toLength = require_to_length();
  var arraySpeciesCreate = require_array_species_create();
  var push = [].push;
  var createMethod = function(TYPE) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var IS_FILTER_OUT = TYPE == 7;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    return function($this, callbackfn, that, specificCreate) {
      var O = toObject($this);
      var self2 = IndexedObject(O);
      var boundFunction = bind(callbackfn, that, 3);
      var length = toLength(self2.length);
      var index = 0;
      var create = specificCreate || arraySpeciesCreate;
      var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : void 0;
      var value, result;
      for (; length > index; index++)
        if (NO_HOLES || index in self2) {
          value = self2[index];
          result = boundFunction(value, index, O);
          if (TYPE) {
            if (IS_MAP)
              target[index] = result;
            else if (result)
              switch (TYPE) {
                case 3:
                  return true;
                case 5:
                  return value;
                case 6:
                  return index;
                case 2:
                  push.call(target, value);
              }
            else
              switch (TYPE) {
                case 4:
                  return false;
                case 7:
                  push.call(target, value);
              }
          }
        }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };
  module2.exports = {
    forEach: createMethod(0),
    map: createMethod(1),
    filter: createMethod(2),
    some: createMethod(3),
    every: createMethod(4),
    find: createMethod(5),
    findIndex: createMethod(6),
    filterOut: createMethod(7)
  };
});
var require_es_symbol = __commonJS(() => {
  "use strict";
  var $ = require_export();
  var global2 = require_global();
  var getBuiltIn = require_get_built_in();
  var IS_PURE = require_is_pure();
  var DESCRIPTORS = require_descriptors();
  var NATIVE_SYMBOL = require_native_symbol();
  var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
  var fails = require_fails();
  var has = require_has();
  var isArray = require_is_array();
  var isObject = require_is_object();
  var anObject = require_an_object();
  var toObject = require_to_object();
  var toIndexedObject = require_to_indexed_object();
  var toPrimitive = require_to_primitive();
  var createPropertyDescriptor = require_create_property_descriptor();
  var nativeObjectCreate = require_object_create();
  var objectKeys = require_object_keys();
  var getOwnPropertyNamesModule = require_object_get_own_property_names();
  var getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
  var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
  var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
  var definePropertyModule = require_object_define_property();
  var propertyIsEnumerableModule = require_object_property_is_enumerable();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var redefine = require_redefine();
  var shared = require_shared();
  var sharedKey = require_shared_key();
  var hiddenKeys = require_hidden_keys();
  var uid = require_uid();
  var wellKnownSymbol = require_well_known_symbol();
  var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
  var defineWellKnownSymbol = require_define_well_known_symbol();
  var setToStringTag = require_set_to_string_tag();
  var InternalStateModule = require_internal_state();
  var $forEach = require_array_iteration().forEach;
  var HIDDEN = sharedKey("hidden");
  var SYMBOL = "Symbol";
  var PROTOTYPE = "prototype";
  var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
  var setInternalState = InternalStateModule.set;
  var getInternalState = InternalStateModule.getterFor(SYMBOL);
  var ObjectPrototype = Object[PROTOTYPE];
  var $Symbol = global2.Symbol;
  var $stringify = getBuiltIn("JSON", "stringify");
  var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  var nativeDefineProperty = definePropertyModule.f;
  var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
  var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
  var AllSymbols = shared("symbols");
  var ObjectPrototypeSymbols = shared("op-symbols");
  var StringToSymbolRegistry = shared("string-to-symbol-registry");
  var SymbolToStringRegistry = shared("symbol-to-string-registry");
  var WellKnownSymbolsStore = shared("wks");
  var QObject = global2.QObject;
  var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
  var setSymbolDescriptor = DESCRIPTORS && fails(function() {
    return nativeObjectCreate(nativeDefineProperty({}, "a", {
      get: function() {
        return nativeDefineProperty(this, "a", {value: 7}).a;
      }
    })).a != 7;
  }) ? function(O, P, Attributes) {
    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
    if (ObjectPrototypeDescriptor)
      delete ObjectPrototype[P];
    nativeDefineProperty(O, P, Attributes);
    if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
      nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
    }
  } : nativeDefineProperty;
  var wrap = function(tag, description) {
    var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
    setInternalState(symbol, {
      type: SYMBOL,
      tag,
      description
    });
    if (!DESCRIPTORS)
      symbol.description = description;
    return symbol;
  };
  var isSymbol = USE_SYMBOL_AS_UID ? function(it) {
    return typeof it == "symbol";
  } : function(it) {
    return Object(it) instanceof $Symbol;
  };
  var $defineProperty = function defineProperty(O, P, Attributes) {
    if (O === ObjectPrototype)
      $defineProperty(ObjectPrototypeSymbols, P, Attributes);
    anObject(O);
    var key = toPrimitive(P, true);
    anObject(Attributes);
    if (has(AllSymbols, key)) {
      if (!Attributes.enumerable) {
        if (!has(O, HIDDEN))
          nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
        O[HIDDEN][key] = true;
      } else {
        if (has(O, HIDDEN) && O[HIDDEN][key])
          O[HIDDEN][key] = false;
        Attributes = nativeObjectCreate(Attributes, {enumerable: createPropertyDescriptor(0, false)});
      }
      return setSymbolDescriptor(O, key, Attributes);
    }
    return nativeDefineProperty(O, key, Attributes);
  };
  var $defineProperties = function defineProperties(O, Properties) {
    anObject(O);
    var properties = toIndexedObject(Properties);
    var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
    $forEach(keys, function(key) {
      if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key))
        $defineProperty(O, key, properties[key]);
    });
    return O;
  };
  var $create = function create(O, Properties) {
    return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(V) {
    var P = toPrimitive(V, true);
    var enumerable = nativePropertyIsEnumerable.call(this, P);
    if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P))
      return false;
    return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
    var it = toIndexedObject(O);
    var key = toPrimitive(P, true);
    if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key))
      return;
    var descriptor = nativeGetOwnPropertyDescriptor(it, key);
    if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
      descriptor.enumerable = true;
    }
    return descriptor;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(O) {
    var names = nativeGetOwnPropertyNames(toIndexedObject(O));
    var result = [];
    $forEach(names, function(key) {
      if (!has(AllSymbols, key) && !has(hiddenKeys, key))
        result.push(key);
    });
    return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
    var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
    var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
    var result = [];
    $forEach(names, function(key) {
      if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
        result.push(AllSymbols[key]);
      }
    });
    return result;
  };
  if (!NATIVE_SYMBOL) {
    $Symbol = function Symbol2() {
      if (this instanceof $Symbol)
        throw TypeError("Symbol is not a constructor");
      var description = !arguments.length || arguments[0] === void 0 ? void 0 : String(arguments[0]);
      var tag = uid(description);
      var setter = function(value) {
        if (this === ObjectPrototype)
          setter.call(ObjectPrototypeSymbols, value);
        if (has(this, HIDDEN) && has(this[HIDDEN], tag))
          this[HIDDEN][tag] = false;
        setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
      };
      if (DESCRIPTORS && USE_SETTER)
        setSymbolDescriptor(ObjectPrototype, tag, {configurable: true, set: setter});
      return wrap(tag, description);
    };
    redefine($Symbol[PROTOTYPE], "toString", function toString() {
      return getInternalState(this).tag;
    });
    redefine($Symbol, "withoutSetter", function(description) {
      return wrap(uid(description), description);
    });
    propertyIsEnumerableModule.f = $propertyIsEnumerable;
    definePropertyModule.f = $defineProperty;
    getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
    getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
    getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
    wrappedWellKnownSymbolModule.f = function(name) {
      return wrap(wellKnownSymbol(name), name);
    };
    if (DESCRIPTORS) {
      nativeDefineProperty($Symbol[PROTOTYPE], "description", {
        configurable: true,
        get: function description() {
          return getInternalState(this).description;
        }
      });
      if (!IS_PURE) {
        redefine(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, {unsafe: true});
      }
    }
  }
  $({global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL}, {
    Symbol: $Symbol
  });
  $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
    defineWellKnownSymbol(name);
  });
  $({target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL}, {
    for: function(key) {
      var string2 = String(key);
      if (has(StringToSymbolRegistry, string2))
        return StringToSymbolRegistry[string2];
      var symbol = $Symbol(string2);
      StringToSymbolRegistry[string2] = symbol;
      SymbolToStringRegistry[symbol] = string2;
      return symbol;
    },
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym))
        throw TypeError(sym + " is not a symbol");
      if (has(SymbolToStringRegistry, sym))
        return SymbolToStringRegistry[sym];
    },
    useSetter: function() {
      USE_SETTER = true;
    },
    useSimple: function() {
      USE_SETTER = false;
    }
  });
  $({target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS}, {
    create: $create,
    defineProperty: $defineProperty,
    defineProperties: $defineProperties,
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor
  });
  $({target: "Object", stat: true, forced: !NATIVE_SYMBOL}, {
    getOwnPropertyNames: $getOwnPropertyNames,
    getOwnPropertySymbols: $getOwnPropertySymbols
  });
  $({target: "Object", stat: true, forced: fails(function() {
    getOwnPropertySymbolsModule.f(1);
  })}, {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return getOwnPropertySymbolsModule.f(toObject(it));
    }
  });
  if ($stringify) {
    FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {
      var symbol = $Symbol();
      return $stringify([symbol]) != "[null]" || $stringify({a: symbol}) != "{}" || $stringify(Object(symbol)) != "{}";
    });
    $({target: "JSON", stat: true, forced: FORCED_JSON_STRINGIFY}, {
      stringify: function stringify(it, replacer, space) {
        var args = [it];
        var index = 1;
        var $replacer;
        while (arguments.length > index)
          args.push(arguments[index++]);
        $replacer = replacer;
        if (!isObject(replacer) && it === void 0 || isSymbol(it))
          return;
        if (!isArray(replacer))
          replacer = function(key, value) {
            if (typeof $replacer == "function")
              value = $replacer.call(this, key, value);
            if (!isSymbol(value))
              return value;
          };
        args[1] = replacer;
        return $stringify.apply(null, args);
      }
    });
  }
  var FORCED_JSON_STRINGIFY;
  if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
    createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
  }
  setToStringTag($Symbol, SYMBOL);
  hiddenKeys[HIDDEN] = true;
});
var require_es_symbol_async_iterator = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("asyncIterator");
});
var require_es_symbol_description = __commonJS(() => {
});
var require_es_symbol_has_instance = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("hasInstance");
});
var require_es_symbol_is_concat_spreadable = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("isConcatSpreadable");
});
var require_es_symbol_iterator = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("iterator");
});
var require_es_symbol_match = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("match");
});
var require_es_symbol_match_all = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("matchAll");
});
var require_es_symbol_replace = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("replace");
});
var require_es_symbol_search = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("search");
});
var require_es_symbol_species = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("species");
});
var require_es_symbol_split = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("split");
});
var require_es_symbol_to_primitive = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("toPrimitive");
});
var require_es_symbol_to_string_tag = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("toStringTag");
});
var require_es_symbol_unscopables = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("unscopables");
});
var require_es_json_to_string_tag = __commonJS(() => {
  var global2 = require_global();
  var setToStringTag = require_set_to_string_tag();
  setToStringTag(global2.JSON, "JSON", true);
});
var require_es_math_to_string_tag = __commonJS(() => {
});
var require_es_reflect_to_string_tag = __commonJS(() => {
});
var require_symbol = __commonJS((exports2, module2) => {
  require_es_array_concat();
  require_es_object_to_string();
  require_es_symbol();
  require_es_symbol_async_iterator();
  require_es_symbol_description();
  require_es_symbol_has_instance();
  require_es_symbol_is_concat_spreadable();
  require_es_symbol_iterator();
  require_es_symbol_match();
  require_es_symbol_match_all();
  require_es_symbol_replace();
  require_es_symbol_search();
  require_es_symbol_species();
  require_es_symbol_split();
  require_es_symbol_to_primitive();
  require_es_symbol_to_string_tag();
  require_es_symbol_unscopables();
  require_es_json_to_string_tag();
  require_es_math_to_string_tag();
  require_es_reflect_to_string_tag();
  var path = require_path();
  module2.exports = path.Symbol;
});
var require_symbol2 = __commonJS((exports2, module2) => {
  var parent = require_symbol();
  module2.exports = parent;
});
var require_symbol3 = __commonJS((exports2, module2) => {
  module2.exports = require_symbol2();
});
var require_iterator_close = __commonJS((exports2, module2) => {
  var anObject = require_an_object();
  module2.exports = function(iterator) {
    var returnMethod = iterator["return"];
    if (returnMethod !== void 0) {
      return anObject(returnMethod.call(iterator)).value;
    }
  };
});
var require_call_with_safe_iteration_closing = __commonJS((exports2, module2) => {
  var anObject = require_an_object();
  var iteratorClose = require_iterator_close();
  module2.exports = function(iterator, fn, value, ENTRIES) {
    try {
      return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
    } catch (error) {
      iteratorClose(iterator);
      throw error;
    }
  };
});
var require_is_array_iterator_method = __commonJS((exports2, module2) => {
  var wellKnownSymbol = require_well_known_symbol();
  var Iterators = require_iterators();
  var ITERATOR = wellKnownSymbol("iterator");
  var ArrayPrototype = Array.prototype;
  module2.exports = function(it) {
    return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
  };
});
var require_array_from = __commonJS((exports2, module2) => {
  "use strict";
  var bind = require_function_bind_context();
  var toObject = require_to_object();
  var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
  var isArrayIteratorMethod = require_is_array_iterator_method();
  var toLength = require_to_length();
  var createProperty = require_create_property();
  var getIteratorMethod = require_get_iterator_method();
  module2.exports = function from(arrayLike) {
    var O = toObject(arrayLike);
    var C = typeof this == "function" ? this : Array;
    var argumentsLength = arguments.length;
    var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
    var mapping = mapfn !== void 0;
    var iteratorMethod = getIteratorMethod(O);
    var index = 0;
    var length, result, step, iterator, next, value;
    if (mapping)
      mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0, 2);
    if (iteratorMethod != void 0 && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
      iterator = iteratorMethod.call(O);
      next = iterator.next;
      result = new C();
      for (; !(step = next.call(iterator)).done; index++) {
        value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
        createProperty(result, index, value);
      }
    } else {
      length = toLength(O.length);
      result = new C(length);
      for (; length > index; index++) {
        value = mapping ? mapfn(O[index], index) : O[index];
        createProperty(result, index, value);
      }
    }
    result.length = index;
    return result;
  };
});
var require_check_correctness_of_iteration = __commonJS((exports2, module2) => {
  var wellKnownSymbol = require_well_known_symbol();
  var ITERATOR = wellKnownSymbol("iterator");
  var SAFE_CLOSING = false;
  try {
    called = 0;
    iteratorWithReturn = {
      next: function() {
        return {done: !!called++};
      },
      return: function() {
        SAFE_CLOSING = true;
      }
    };
    iteratorWithReturn[ITERATOR] = function() {
      return this;
    };
    Array.from(iteratorWithReturn, function() {
      throw 2;
    });
  } catch (error) {
  }
  var called;
  var iteratorWithReturn;
  module2.exports = function(exec, SKIP_CLOSING) {
    if (!SKIP_CLOSING && !SAFE_CLOSING)
      return false;
    var ITERATION_SUPPORT = false;
    try {
      var object = {};
      object[ITERATOR] = function() {
        return {
          next: function() {
            return {done: ITERATION_SUPPORT = true};
          }
        };
      };
      exec(object);
    } catch (error) {
    }
    return ITERATION_SUPPORT;
  };
});
var require_es_array_from = __commonJS(() => {
  var $ = require_export();
  var from = require_array_from();
  var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
  var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
    Array.from(iterable);
  });
  $({target: "Array", stat: true, forced: INCORRECT_ITERATION}, {
    from
  });
});
var require_from = __commonJS((exports2, module2) => {
  require_es_string_iterator();
  require_es_array_from();
  var path = require_path();
  module2.exports = path.Array.from;
});
var require_from2 = __commonJS((exports2, module2) => {
  var parent = require_from();
  module2.exports = parent;
});
var require_from3 = __commonJS((exports2, module2) => {
  module2.exports = require_from2();
});
var require_entry_virtual = __commonJS((exports2, module2) => {
  var path = require_path();
  module2.exports = function(CONSTRUCTOR) {
    return path[CONSTRUCTOR + "Prototype"];
  };
});
var require_concat = __commonJS((exports2, module2) => {
  require_es_array_concat();
  var entryVirtual = require_entry_virtual();
  module2.exports = entryVirtual("Array").concat;
});
var require_concat2 = __commonJS((exports2, module2) => {
  var concat = require_concat();
  var ArrayPrototype = Array.prototype;
  module2.exports = function(it) {
    var own = it.concat;
    return it === ArrayPrototype || it instanceof Array && own === ArrayPrototype.concat ? concat : own;
  };
});
var require_concat3 = __commonJS((exports2, module2) => {
  var parent = require_concat2();
  module2.exports = parent;
});
var require_concat4 = __commonJS((exports2, module2) => {
  module2.exports = require_concat3();
});
var require_array_method_is_strict = __commonJS((exports2, module2) => {
  "use strict";
  var fails = require_fails();
  module2.exports = function(METHOD_NAME, argument) {
    var method = [][METHOD_NAME];
    return !!method && fails(function() {
      method.call(null, argument || function() {
        throw 1;
      }, 1);
    });
  };
});
var require_array_method_uses_to_length = __commonJS((exports2, module2) => {
  var DESCRIPTORS = require_descriptors();
  var fails = require_fails();
  var has = require_has();
  var defineProperty = Object.defineProperty;
  var cache = {};
  var thrower = function(it) {
    throw it;
  };
  module2.exports = function(METHOD_NAME, options) {
    if (has(cache, METHOD_NAME))
      return cache[METHOD_NAME];
    if (!options)
      options = {};
    var method = [][METHOD_NAME];
    var ACCESSORS = has(options, "ACCESSORS") ? options.ACCESSORS : false;
    var argument0 = has(options, 0) ? options[0] : thrower;
    var argument1 = has(options, 1) ? options[1] : void 0;
    return cache[METHOD_NAME] = !!method && !fails(function() {
      if (ACCESSORS && !DESCRIPTORS)
        return true;
      var O = {length: -1};
      if (ACCESSORS)
        defineProperty(O, 1, {enumerable: true, get: thrower});
      else
        O[1] = 1;
      method.call(O, argument0, argument1);
    });
  };
});
var require_es_array_index_of = __commonJS(() => {
  "use strict";
  var $ = require_export();
  var $indexOf = require_array_includes().indexOf;
  var arrayMethodIsStrict = require_array_method_is_strict();
  var arrayMethodUsesToLength = require_array_method_uses_to_length();
  var nativeIndexOf = [].indexOf;
  var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
  var STRICT_METHOD = arrayMethodIsStrict("indexOf");
  var USES_TO_LENGTH = arrayMethodUsesToLength("indexOf", {ACCESSORS: true, 1: 0});
  $({target: "Array", proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH}, {
    indexOf: function indexOf(searchElement) {
      return NEGATIVE_ZERO ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
});
var require_index_of = __commonJS((exports2, module2) => {
  require_es_array_index_of();
  var entryVirtual = require_entry_virtual();
  module2.exports = entryVirtual("Array").indexOf;
});
var require_index_of2 = __commonJS((exports2, module2) => {
  var indexOf = require_index_of();
  var ArrayPrototype = Array.prototype;
  module2.exports = function(it) {
    var own = it.indexOf;
    return it === ArrayPrototype || it instanceof Array && own === ArrayPrototype.indexOf ? indexOf : own;
  };
});
var require_index_of3 = __commonJS((exports2, module2) => {
  var parent = require_index_of2();
  module2.exports = parent;
});
var require_index_of4 = __commonJS((exports2, module2) => {
  module2.exports = require_index_of3();
});
var require_es_object_create = __commonJS(() => {
  var $ = require_export();
  var DESCRIPTORS = require_descriptors();
  var create = require_object_create();
  $({target: "Object", stat: true, sham: !DESCRIPTORS}, {
    create
  });
});
var require_create = __commonJS((exports2, module2) => {
  require_es_object_create();
  var path = require_path();
  var Object2 = path.Object;
  module2.exports = function create(P, D) {
    return Object2.create(P, D);
  };
});
var require_create2 = __commonJS((exports2, module2) => {
  var parent = require_create();
  module2.exports = parent;
});
var require_create3 = __commonJS((exports2, module2) => {
  module2.exports = require_create2();
});
var require_is_array5 = __commonJS((exports2, module2) => {
  var parent = require_is_array2();
  module2.exports = parent;
});
var require_is_array6 = __commonJS((exports2, module2) => {
  module2.exports = require_is_array5();
});
var require_arrayWithHoles = __commonJS((exports2, module2) => {
  var _Array$isArray = require_is_array6();
  function _arrayWithHoles(arr) {
    if (_Array$isArray(arr))
      return arr;
  }
  module2.exports = _arrayWithHoles;
});
var require_is_iterable = __commonJS((exports2, module2) => {
  var classof = require_classof();
  var wellKnownSymbol = require_well_known_symbol();
  var Iterators = require_iterators();
  var ITERATOR = wellKnownSymbol("iterator");
  module2.exports = function(it) {
    var O = Object(it);
    return O[ITERATOR] !== void 0 || "@@iterator" in O || Iterators.hasOwnProperty(classof(O));
  };
});
var require_is_iterable2 = __commonJS((exports2, module2) => {
  require_web_dom_collections_iterator();
  require_es_string_iterator();
  var isIterable = require_is_iterable();
  module2.exports = isIterable;
});
var require_is_iterable3 = __commonJS((exports2, module2) => {
  module2.exports = require_is_iterable2();
});
var require_esnext_symbol_async_dispose = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("asyncDispose");
});
var require_esnext_symbol_dispose = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("dispose");
});
var require_esnext_symbol_observable = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("observable");
});
var require_esnext_symbol_pattern_match = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("patternMatch");
});
var require_esnext_symbol_replace_all = __commonJS(() => {
  var defineWellKnownSymbol = require_define_well_known_symbol();
  defineWellKnownSymbol("replaceAll");
});
var require_symbol4 = __commonJS((exports2, module2) => {
  var parent = require_symbol();
  require_esnext_symbol_async_dispose();
  require_esnext_symbol_dispose();
  require_esnext_symbol_observable();
  require_esnext_symbol_pattern_match();
  require_esnext_symbol_replace_all();
  module2.exports = parent;
});
var require_symbol5 = __commonJS((exports2, module2) => {
  module2.exports = require_symbol4();
});
var require_iterableToArrayLimit = __commonJS((exports2, module2) => {
  var _getIterator = require_get_iterator3();
  var _isIterable = require_is_iterable3();
  var _Symbol = require_symbol5();
  function _iterableToArrayLimit(arr, i2) {
    if (typeof _Symbol === "undefined" || !_isIterable(Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  module2.exports = _iterableToArrayLimit;
});
var require_from4 = __commonJS((exports2, module2) => {
  var parent = require_from();
  module2.exports = parent;
});
var require_from5 = __commonJS((exports2, module2) => {
  module2.exports = require_from4();
});
var require_es_array_slice = __commonJS(() => {
  "use strict";
  var $ = require_export();
  var isObject = require_is_object();
  var isArray = require_is_array();
  var toAbsoluteIndex = require_to_absolute_index();
  var toLength = require_to_length();
  var toIndexedObject = require_to_indexed_object();
  var createProperty = require_create_property();
  var wellKnownSymbol = require_well_known_symbol();
  var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
  var arrayMethodUsesToLength = require_array_method_uses_to_length();
  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
  var USES_TO_LENGTH = arrayMethodUsesToLength("slice", {ACCESSORS: true, 0: 0, 1: 2});
  var SPECIES = wellKnownSymbol("species");
  var nativeSlice = [].slice;
  var max = Math.max;
  $({target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH}, {
    slice: function slice(start, end) {
      var O = toIndexedObject(this);
      var length = toLength(O.length);
      var k = toAbsoluteIndex(start, length);
      var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
      var Constructor, result, n;
      if (isArray(O)) {
        Constructor = O.constructor;
        if (typeof Constructor == "function" && (Constructor === Array || isArray(Constructor.prototype))) {
          Constructor = void 0;
        } else if (isObject(Constructor)) {
          Constructor = Constructor[SPECIES];
          if (Constructor === null)
            Constructor = void 0;
        }
        if (Constructor === Array || Constructor === void 0) {
          return nativeSlice.call(O, k, fin);
        }
      }
      result = new (Constructor === void 0 ? Array : Constructor)(max(fin - k, 0));
      for (n = 0; k < fin; k++, n++)
        if (k in O)
          createProperty(result, n, O[k]);
      result.length = n;
      return result;
    }
  });
});
var require_slice = __commonJS((exports2, module2) => {
  require_es_array_slice();
  var entryVirtual = require_entry_virtual();
  module2.exports = entryVirtual("Array").slice;
});
var require_slice2 = __commonJS((exports2, module2) => {
  var slice = require_slice();
  var ArrayPrototype = Array.prototype;
  module2.exports = function(it) {
    var own = it.slice;
    return it === ArrayPrototype || it instanceof Array && own === ArrayPrototype.slice ? slice : own;
  };
});
var require_slice3 = __commonJS((exports2, module2) => {
  var parent = require_slice2();
  module2.exports = parent;
});
var require_slice4 = __commonJS((exports2, module2) => {
  module2.exports = require_slice3();
});
var require_arrayLikeToArray = __commonJS((exports2, module2) => {
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  module2.exports = _arrayLikeToArray;
});
var require_unsupportedIterableToArray = __commonJS((exports2, module2) => {
  var _Array$from = require_from5();
  var _sliceInstanceProperty = require_slice4();
  var arrayLikeToArray = require_arrayLikeToArray();
  function _unsupportedIterableToArray(o2, minLen) {
    var _context;
    if (!o2)
      return;
    if (typeof o2 === "string")
      return arrayLikeToArray(o2, minLen);
    var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o2)).call(_context, 8, -1);
    if (n === "Object" && o2.constructor)
      n = o2.constructor.name;
    if (n === "Map" || n === "Set")
      return _Array$from(o2);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return arrayLikeToArray(o2, minLen);
  }
  module2.exports = _unsupportedIterableToArray;
});
var require_nonIterableRest = __commonJS((exports2, module2) => {
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  module2.exports = _nonIterableRest;
});
var require_slicedToArray = __commonJS((exports2, module2) => {
  var arrayWithHoles = require_arrayWithHoles();
  var iterableToArrayLimit = require_iterableToArrayLimit();
  var unsupportedIterableToArray = require_unsupportedIterableToArray();
  var nonIterableRest = require_nonIterableRest();
  function _slicedToArray(arr, i2) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i2) || unsupportedIterableToArray(arr, i2) || nonIterableRest();
  }
  module2.exports = _slicedToArray;
});
var require_array_for_each = __commonJS((exports2, module2) => {
  "use strict";
  var $forEach = require_array_iteration().forEach;
  var arrayMethodIsStrict = require_array_method_is_strict();
  var arrayMethodUsesToLength = require_array_method_uses_to_length();
  var STRICT_METHOD = arrayMethodIsStrict("forEach");
  var USES_TO_LENGTH = arrayMethodUsesToLength("forEach");
  module2.exports = !STRICT_METHOD || !USES_TO_LENGTH ? function forEach(callbackfn) {
    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  } : [].forEach;
});
var require_es_array_for_each = __commonJS(() => {
  "use strict";
  var $ = require_export();
  var forEach = require_array_for_each();
  $({target: "Array", proto: true, forced: [].forEach != forEach}, {
    forEach
  });
});
var require_for_each = __commonJS((exports2, module2) => {
  require_es_array_for_each();
  var entryVirtual = require_entry_virtual();
  module2.exports = entryVirtual("Array").forEach;
});
var require_for_each2 = __commonJS((exports2, module2) => {
  var parent = require_for_each();
  module2.exports = parent;
});
var require_for_each3 = __commonJS((exports2, module2) => {
  require_web_dom_collections_iterator();
  var forEach = require_for_each2();
  var classof = require_classof();
  var ArrayPrototype = Array.prototype;
  var DOMIterables = {
    DOMTokenList: true,
    NodeList: true
  };
  module2.exports = function(it) {
    var own = it.forEach;
    return it === ArrayPrototype || it instanceof Array && own === ArrayPrototype.forEach || DOMIterables.hasOwnProperty(classof(it)) ? forEach : own;
  };
});
var require_for_each4 = __commonJS((exports2, module2) => {
  module2.exports = require_for_each3();
});
var require_es_array_includes = __commonJS(() => {
  "use strict";
  var $ = require_export();
  var $includes = require_array_includes().includes;
  var addToUnscopables = require_add_to_unscopables();
  var arrayMethodUsesToLength = require_array_method_uses_to_length();
  var USES_TO_LENGTH = arrayMethodUsesToLength("indexOf", {ACCESSORS: true, 1: 0});
  $({target: "Array", proto: true, forced: !USES_TO_LENGTH}, {
    includes: function includes(el) {
      return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  addToUnscopables("includes");
});
var require_includes = __commonJS((exports2, module2) => {
  require_es_array_includes();
  var entryVirtual = require_entry_virtual();
  module2.exports = entryVirtual("Array").includes;
});
var require_is_regexp = __commonJS((exports2, module2) => {
  var isObject = require_is_object();
  var classof = require_classof_raw();
  var wellKnownSymbol = require_well_known_symbol();
  var MATCH = wellKnownSymbol("match");
  module2.exports = function(it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) == "RegExp");
  };
});
var require_not_a_regexp = __commonJS((exports2, module2) => {
  var isRegExp = require_is_regexp();
  module2.exports = function(it) {
    if (isRegExp(it)) {
      throw TypeError("The method doesn't accept regular expressions");
    }
    return it;
  };
});
var require_correct_is_regexp_logic = __commonJS((exports2, module2) => {
  var wellKnownSymbol = require_well_known_symbol();
  var MATCH = wellKnownSymbol("match");
  module2.exports = function(METHOD_NAME) {
    var regexp = /./;
    try {
      "/./"[METHOD_NAME](regexp);
    } catch (error1) {
      try {
        regexp[MATCH] = false;
        return "/./"[METHOD_NAME](regexp);
      } catch (error2) {
      }
    }
    return false;
  };
});
var require_es_string_includes = __commonJS(() => {
  "use strict";
  var $ = require_export();
  var notARegExp = require_not_a_regexp();
  var requireObjectCoercible = require_require_object_coercible();
  var correctIsRegExpLogic = require_correct_is_regexp_logic();
  $({target: "String", proto: true, forced: !correctIsRegExpLogic("includes")}, {
    includes: function includes(searchString) {
      return !!~String(requireObjectCoercible(this)).indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : void 0);
    }
  });
});
var require_includes2 = __commonJS((exports2, module2) => {
  require_es_string_includes();
  var entryVirtual = require_entry_virtual();
  module2.exports = entryVirtual("String").includes;
});
var require_includes3 = __commonJS((exports2, module2) => {
  var arrayIncludes = require_includes();
  var stringIncludes = require_includes2();
  var ArrayPrototype = Array.prototype;
  var StringPrototype = String.prototype;
  module2.exports = function(it) {
    var own = it.includes;
    if (it === ArrayPrototype || it instanceof Array && own === ArrayPrototype.includes)
      return arrayIncludes;
    if (typeof it === "string" || it === StringPrototype || it instanceof String && own === StringPrototype.includes) {
      return stringIncludes;
    }
    return own;
  };
});
var require_includes4 = __commonJS((exports2, module2) => {
  var parent = require_includes3();
  module2.exports = parent;
});
var require_includes5 = __commonJS((exports2, module2) => {
  module2.exports = require_includes4();
});
var require_whitespaces = __commonJS((exports2, module2) => {
  module2.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
});
var require_string_trim = __commonJS((exports2, module2) => {
  var requireObjectCoercible = require_require_object_coercible();
  var whitespaces = require_whitespaces();
  var whitespace = "[" + whitespaces + "]";
  var ltrim = RegExp("^" + whitespace + whitespace + "*");
  var rtrim = RegExp(whitespace + whitespace + "*$");
  var createMethod = function(TYPE) {
    return function($this) {
      var string2 = String(requireObjectCoercible($this));
      if (TYPE & 1)
        string2 = string2.replace(ltrim, "");
      if (TYPE & 2)
        string2 = string2.replace(rtrim, "");
      return string2;
    };
  };
  module2.exports = {
    start: createMethod(1),
    end: createMethod(2),
    trim: createMethod(3)
  };
});
var require_number_parse_int = __commonJS((exports2, module2) => {
  var global2 = require_global();
  var trim = require_string_trim().trim;
  var whitespaces = require_whitespaces();
  var $parseInt = global2.parseInt;
  var hex = /^[+-]?0[Xx]/;
  var FORCED = $parseInt(whitespaces + "08") !== 8 || $parseInt(whitespaces + "0x16") !== 22;
  module2.exports = FORCED ? function parseInt2(string2, radix) {
    var S = trim(String(string2));
    return $parseInt(S, radix >>> 0 || (hex.test(S) ? 16 : 10));
  } : $parseInt;
});
var require_es_parse_int = __commonJS(() => {
  var $ = require_export();
  var parseIntImplementation = require_number_parse_int();
  $({global: true, forced: parseInt != parseIntImplementation}, {
    parseInt: parseIntImplementation
  });
});
var require_parse_int = __commonJS((exports2, module2) => {
  require_es_parse_int();
  var path = require_path();
  module2.exports = path.parseInt;
});
var require_parse_int2 = __commonJS((exports2, module2) => {
  var parent = require_parse_int();
  module2.exports = parent;
});
var require_parse_int3 = __commonJS((exports2, module2) => {
  module2.exports = require_parse_int2();
});
var require_slice5 = __commonJS((exports2, module2) => {
  var parent = require_slice2();
  module2.exports = parent;
});
var require_slice6 = __commonJS((exports2, module2) => {
  module2.exports = require_slice5();
});
var require_es_array_sort = __commonJS(() => {
  "use strict";
  var $ = require_export();
  var aFunction = require_a_function();
  var toObject = require_to_object();
  var fails = require_fails();
  var arrayMethodIsStrict = require_array_method_is_strict();
  var test = [];
  var nativeSort = test.sort;
  var FAILS_ON_UNDEFINED = fails(function() {
    test.sort(void 0);
  });
  var FAILS_ON_NULL = fails(function() {
    test.sort(null);
  });
  var STRICT_METHOD = arrayMethodIsStrict("sort");
  var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD;
  $({target: "Array", proto: true, forced: FORCED}, {
    sort: function sort(comparefn) {
      return comparefn === void 0 ? nativeSort.call(toObject(this)) : nativeSort.call(toObject(this), aFunction(comparefn));
    }
  });
});
var require_sort = __commonJS((exports2, module2) => {
  require_es_array_sort();
  var entryVirtual = require_entry_virtual();
  module2.exports = entryVirtual("Array").sort;
});
var require_sort2 = __commonJS((exports2, module2) => {
  var sort = require_sort();
  var ArrayPrototype = Array.prototype;
  module2.exports = function(it) {
    var own = it.sort;
    return it === ArrayPrototype || it instanceof Array && own === ArrayPrototype.sort ? sort : own;
  };
});
var require_sort3 = __commonJS((exports2, module2) => {
  var parent = require_sort2();
  module2.exports = parent;
});
var require_sort4 = __commonJS((exports2, module2) => {
  module2.exports = require_sort3();
});
var require_es_regexp_flags = __commonJS(() => {
});
var require_regexp_flags = __commonJS((exports2, module2) => {
  "use strict";
  var anObject = require_an_object();
  module2.exports = function() {
    var that = anObject(this);
    var result = "";
    if (that.global)
      result += "g";
    if (that.ignoreCase)
      result += "i";
    if (that.multiline)
      result += "m";
    if (that.dotAll)
      result += "s";
    if (that.unicode)
      result += "u";
    if (that.sticky)
      result += "y";
    return result;
  };
});
var require_flags = __commonJS((exports2, module2) => {
  require_es_regexp_flags();
  var flags = require_regexp_flags();
  module2.exports = function(it) {
    return flags.call(it);
  };
});
var require_flags2 = __commonJS((exports2, module2) => {
  var flags = require_flags();
  var RegExpPrototype = RegExp.prototype;
  module2.exports = function(it) {
    return (it === RegExpPrototype || it instanceof RegExp) && !("flags" in it) ? flags(it) : it.flags;
  };
});
var require_flags3 = __commonJS((exports2, module2) => {
  var parent = require_flags2();
  module2.exports = parent;
});
var require_flags4 = __commonJS((exports2, module2) => {
  module2.exports = require_flags3();
});
var require_xregexp = __commonJS((exports2, module2) => {
  "use strict";
  var _interopRequireDefault = require_interopRequireDefault();
  var _Object$defineProperty = require_define_property3();
  _Object$defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2["default"] = void 0;
  var _getIterator2 = _interopRequireDefault(require_get_iterator3());
  var _isArray = _interopRequireDefault(require_is_array4());
  var _getIteratorMethod2 = _interopRequireDefault(require_get_iterator_method3());
  var _symbol = _interopRequireDefault(require_symbol3());
  var _from = _interopRequireDefault(require_from3());
  var _concat = _interopRequireDefault(require_concat4());
  var _indexOf = _interopRequireDefault(require_index_of4());
  var _create = _interopRequireDefault(require_create3());
  var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
  var _forEach = _interopRequireDefault(require_for_each4());
  var _includes = _interopRequireDefault(require_includes5());
  var _parseInt2 = _interopRequireDefault(require_parse_int3());
  var _slice = _interopRequireDefault(require_slice6());
  var _sort = _interopRequireDefault(require_sort4());
  var _flags = _interopRequireDefault(require_flags4());
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it;
    if (typeof _symbol["default"] === "undefined" || (0, _getIteratorMethod2["default"])(o2) == null) {
      if ((0, _isArray["default"])(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
        if (it)
          o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return {s: F, n: function n() {
          if (i2 >= o2.length)
            return {done: true};
          return {done: false, value: o2[i2++]};
        }, e: function e(_e) {
          throw _e;
        }, f: F};
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {s: function s() {
      it = (0, _getIterator2["default"])(o2);
    }, n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f() {
      try {
        if (!normalCompletion && it["return"] != null)
          it["return"]();
      } finally {
        if (didErr)
          throw err;
      }
    }};
  }
  function _unsupportedIterableToArray(o2, minLen) {
    var _context9;
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray(o2, minLen);
    var n = (0, _slice["default"])(_context9 = Object.prototype.toString.call(o2)).call(_context9, 8, -1);
    if (n === "Object" && o2.constructor)
      n = o2.constructor.name;
    if (n === "Map" || n === "Set")
      return (0, _from["default"])(o2);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  /*!
   * XRegExp 5.0.1
   * <xregexp.com>
   * Steven Levithan (c) 2007-present MIT License
   */
  var REGEX_DATA = "xregexp";
  var features = {
    astral: false,
    namespacing: true
  };
  var fixed = {};
  var regexCache = {};
  var patternCache = {};
  var tokens = [];
  var defaultScope = "default";
  var classScope = "class";
  var nativeTokens = {
    default: /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
    class: /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
  };
  var replacementToken = /\$(?:\{([^\}]+)\}|<([^>]+)>|(\d\d?|[\s\S]?))/g;
  var correctExecNpcg = /()??/.exec("")[1] === void 0;
  var hasFlagsProp = (0, _flags["default"])(/x/) !== void 0;
  function hasNativeFlag(flag) {
    var isSupported = true;
    try {
      new RegExp("", flag);
      if (flag === "y") {
        var gy = function() {
          return "gy";
        }();
        var incompleteY = ".a".replace(new RegExp("a", gy), ".") === "..";
        if (incompleteY) {
          isSupported = false;
        }
      }
    } catch (exception) {
      isSupported = false;
    }
    return isSupported;
  }
  var hasNativeS = hasNativeFlag("s");
  var hasNativeU = hasNativeFlag("u");
  var hasNativeY = hasNativeFlag("y");
  var registeredFlags = {
    g: true,
    i: true,
    m: true,
    s: hasNativeS,
    u: hasNativeU,
    y: hasNativeY
  };
  var nonnativeFlags = hasNativeS ? /[^gimsuy]+/g : /[^gimuy]+/g;
  function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
    var _context;
    regex[REGEX_DATA] = {
      captureNames
    };
    if (isInternalOnly) {
      return regex;
    }
    if (regex.__proto__) {
      regex.__proto__ = XRegExp2.prototype;
    } else {
      for (var p in XRegExp2.prototype) {
        regex[p] = XRegExp2.prototype[p];
      }
    }
    regex[REGEX_DATA].source = xSource;
    regex[REGEX_DATA].flags = xFlags ? (0, _sort["default"])(_context = xFlags.split("")).call(_context).join("") : xFlags;
    return regex;
  }
  function clipDuplicates(str) {
    return str.replace(/([\s\S])(?=[\s\S]*\1)/g, "");
  }
  function copyRegex(regex, options) {
    var _context2;
    if (!XRegExp2.isRegExp(regex)) {
      throw new TypeError("Type RegExp expected");
    }
    var xData = regex[REGEX_DATA] || {};
    var flags = getNativeFlags(regex);
    var flagsToAdd = "";
    var flagsToRemove = "";
    var xregexpSource = null;
    var xregexpFlags = null;
    options = options || {};
    if (options.removeG) {
      flagsToRemove += "g";
    }
    if (options.removeY) {
      flagsToRemove += "y";
    }
    if (flagsToRemove) {
      flags = flags.replace(new RegExp("[".concat(flagsToRemove, "]+"), "g"), "");
    }
    if (options.addG) {
      flagsToAdd += "g";
    }
    if (options.addY) {
      flagsToAdd += "y";
    }
    if (flagsToAdd) {
      flags = clipDuplicates(flags + flagsToAdd);
    }
    if (!options.isInternalOnly) {
      if (xData.source !== void 0) {
        xregexpSource = xData.source;
      }
      if ((0, _flags["default"])(xData) != null) {
        xregexpFlags = flagsToAdd ? clipDuplicates((0, _flags["default"])(xData) + flagsToAdd) : (0, _flags["default"])(xData);
      }
    }
    regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? (0, _slice["default"])(_context2 = xData.captureNames).call(_context2, 0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);
    return regex;
  }
  function dec(hex2) {
    return (0, _parseInt2["default"])(hex2, 16);
  }
  function getContextualTokenSeparator(match, scope, flags) {
    var matchEndPos = match.index + match[0].length;
    var precedingChar = match.input[match.index - 1];
    var followingChar = match.input[matchEndPos];
    if (/^[()|]$/.test(precedingChar) || /^[()|]$/.test(followingChar) || match.index === 0 || matchEndPos === match.input.length || /\(\?(?:[:=!]|<[=!])$/.test(match.input.substring(match.index - 4, match.index)) || isQuantifierNext(match.input, matchEndPos, flags)) {
      return "";
    }
    return "(?:)";
  }
  function getNativeFlags(regex) {
    return hasFlagsProp ? (0, _flags["default"])(regex) : /\/([a-z]*)$/i.exec(RegExp.prototype.toString.call(regex))[1];
  }
  function hasNamedCapture(regex) {
    return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
  }
  function hex(dec2) {
    return (0, _parseInt2["default"])(dec2, 10).toString(16);
  }
  function isQuantifierNext(pattern, pos, flags) {
    var inlineCommentPattern = "\\(\\?#[^)]*\\)";
    var lineCommentPattern = "#[^#\\n]*";
    var quantifierPattern = "[?*+]|{\\d+(?:,\\d*)?}";
    var regex = (0, _includes["default"])(flags).call(flags, "x") ? /^(?:\s|#[^#\n]*|\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/ : /^(?:\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/;
    return regex.test((0, _slice["default"])(pattern).call(pattern, pos));
  }
  function isType(value, type) {
    return Object.prototype.toString.call(value) === "[object ".concat(type, "]");
  }
  function nullThrows(value) {
    if (value == null) {
      throw new TypeError("Cannot convert null or undefined to object");
    }
    return value;
  }
  function pad4(str) {
    while (str.length < 4) {
      str = "0".concat(str);
    }
    return str;
  }
  function prepareFlags(pattern, flags) {
    if (clipDuplicates(flags) !== flags) {
      throw new SyntaxError("Invalid duplicate regex flag ".concat(flags));
    }
    pattern = pattern.replace(/^\(\?([\w$]+)\)/, function($0, $1) {
      if (/[gy]/.test($1)) {
        throw new SyntaxError("Cannot use flag g or y in mode modifier ".concat($0));
      }
      flags = clipDuplicates(flags + $1);
      return "";
    });
    var _iterator = _createForOfIteratorHelper(flags), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var flag = _step.value;
        if (!registeredFlags[flag]) {
          throw new SyntaxError("Unknown regex flag ".concat(flag));
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return {
      pattern,
      flags
    };
  }
  function prepareOptions(value) {
    var options = {};
    if (isType(value, "String")) {
      (0, _forEach["default"])(XRegExp2).call(XRegExp2, value, /[^\s,]+/, function(match) {
        options[match] = true;
      });
      return options;
    }
    return value;
  }
  function registerFlag(flag) {
    if (!/^[\w$]$/.test(flag)) {
      throw new Error("Flag must be a single character A-Za-z0-9_$");
    }
    registeredFlags[flag] = true;
  }
  function runTokens(pattern, flags, pos, scope, context) {
    var i2 = tokens.length;
    var leadChar = pattern[pos];
    var result = null;
    var match;
    var t;
    while (i2--) {
      t = tokens[i2];
      if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== "all" || t.flag && !(0, _includes["default"])(flags).call(flags, t.flag)) {
        continue;
      }
      match = XRegExp2.exec(pattern, t.regex, pos, "sticky");
      if (match) {
        result = {
          matchLength: match[0].length,
          output: t.handler.call(context, match, scope, flags),
          reparse: t.reparse
        };
        break;
      }
    }
    return result;
  }
  function setAstral(on) {
    features.astral = on;
  }
  function setNamespacing(on) {
    features.namespacing = on;
  }
  function XRegExp2(pattern, flags) {
    if (XRegExp2.isRegExp(pattern)) {
      if (flags !== void 0) {
        throw new TypeError("Cannot supply flags when copying a RegExp");
      }
      return copyRegex(pattern);
    }
    pattern = pattern === void 0 ? "" : String(pattern);
    flags = flags === void 0 ? "" : String(flags);
    if (XRegExp2.isInstalled("astral") && !(0, _includes["default"])(flags).call(flags, "A")) {
      flags += "A";
    }
    if (!patternCache[pattern]) {
      patternCache[pattern] = {};
    }
    if (!patternCache[pattern][flags]) {
      var context = {
        hasNamedCapture: false,
        captureNames: []
      };
      var scope = defaultScope;
      var output = "";
      var pos = 0;
      var result;
      var applied = prepareFlags(pattern, flags);
      var appliedPattern = applied.pattern;
      var appliedFlags = (0, _flags["default"])(applied);
      while (pos < appliedPattern.length) {
        do {
          result = runTokens(appliedPattern, appliedFlags, pos, scope, context);
          if (result && result.reparse) {
            appliedPattern = (0, _slice["default"])(appliedPattern).call(appliedPattern, 0, pos) + result.output + (0, _slice["default"])(appliedPattern).call(appliedPattern, pos + result.matchLength);
          }
        } while (result && result.reparse);
        if (result) {
          output += result.output;
          pos += result.matchLength || 1;
        } else {
          var _XRegExp$exec = XRegExp2.exec(appliedPattern, nativeTokens[scope], pos, "sticky"), _XRegExp$exec2 = (0, _slicedToArray2["default"])(_XRegExp$exec, 1), token = _XRegExp$exec2[0];
          output += token;
          pos += token.length;
          if (token === "[" && scope === defaultScope) {
            scope = classScope;
          } else if (token === "]" && scope === classScope) {
            scope = defaultScope;
          }
        }
      }
      patternCache[pattern][flags] = {
        pattern: output.replace(/(?:\(\?:\))+/g, "(?:)"),
        flags: appliedFlags.replace(nonnativeFlags, ""),
        captures: context.hasNamedCapture ? context.captureNames : null
      };
    }
    var generated = patternCache[pattern][flags];
    return augment(new RegExp(generated.pattern, (0, _flags["default"])(generated)), generated.captures, pattern, flags);
  }
  XRegExp2.prototype = /(?:)/;
  XRegExp2.version = "5.0.1";
  XRegExp2._clipDuplicates = clipDuplicates;
  XRegExp2._hasNativeFlag = hasNativeFlag;
  XRegExp2._dec = dec;
  XRegExp2._hex = hex;
  XRegExp2._pad4 = pad4;
  XRegExp2.addToken = function(regex, handler, options) {
    options = options || {};
    var _options = options, optionalFlags = _options.optionalFlags;
    if (options.flag) {
      registerFlag(options.flag);
    }
    if (optionalFlags) {
      optionalFlags = optionalFlags.split("");
      var _iterator2 = _createForOfIteratorHelper(optionalFlags), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var flag = _step2.value;
          registerFlag(flag);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
    tokens.push({
      regex: copyRegex(regex, {
        addG: true,
        addY: hasNativeY,
        isInternalOnly: true
      }),
      handler,
      scope: options.scope || defaultScope,
      flag: options.flag,
      reparse: options.reparse,
      leadChar: options.leadChar
    });
    XRegExp2.cache.flush("patterns");
  };
  XRegExp2.cache = function(pattern, flags) {
    if (!regexCache[pattern]) {
      regexCache[pattern] = {};
    }
    return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp2(pattern, flags));
  };
  XRegExp2.cache.flush = function(cacheName) {
    if (cacheName === "patterns") {
      patternCache = {};
    } else {
      regexCache = {};
    }
  };
  XRegExp2.escape = function(str) {
    return String(nullThrows(str)).replace(/[-\[\]{}()*+?.,\\^$|#\s]/g, function(match) {
      if (/\s/.test(match)) {
        return "\\u".concat(pad4(hex(match.charCodeAt(0))));
      }
      return "\\".concat(match);
    });
  };
  XRegExp2.exec = function(str, regex, pos, sticky) {
    var cacheKey = "g";
    var addY = false;
    var fakeY = false;
    var match;
    addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);
    if (addY) {
      cacheKey += "y";
    } else if (sticky) {
      fakeY = true;
      cacheKey += "FakeY";
    }
    regex[REGEX_DATA] = regex[REGEX_DATA] || {};
    var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
      addG: true,
      addY,
      source: fakeY ? "".concat(regex.source, "|()") : void 0,
      removeY: sticky === false,
      isInternalOnly: true
    }));
    pos = pos || 0;
    r2.lastIndex = pos;
    match = fixed.exec.call(r2, str);
    if (fakeY && match && match.pop() === "") {
      match = null;
    }
    if (regex.global) {
      regex.lastIndex = match ? r2.lastIndex : 0;
    }
    return match;
  };
  XRegExp2.forEach = function(str, regex, callback) {
    var pos = 0;
    var i2 = -1;
    var match;
    while (match = XRegExp2.exec(str, regex, pos)) {
      callback(match, ++i2, str, regex);
      pos = match.index + (match[0].length || 1);
    }
  };
  XRegExp2.globalize = function(regex) {
    return copyRegex(regex, {
      addG: true
    });
  };
  XRegExp2.install = function(options) {
    options = prepareOptions(options);
    if (!features.astral && options.astral) {
      setAstral(true);
    }
    if (!features.namespacing && options.namespacing) {
      setNamespacing(true);
    }
  };
  XRegExp2.isInstalled = function(feature) {
    return !!features[feature];
  };
  XRegExp2.isRegExp = function(value) {
    return Object.prototype.toString.call(value) === "[object RegExp]";
  };
  XRegExp2.match = function(str, regex, scope) {
    var global2 = regex.global && scope !== "one" || scope === "all";
    var cacheKey = (global2 ? "g" : "") + (regex.sticky ? "y" : "") || "noGY";
    regex[REGEX_DATA] = regex[REGEX_DATA] || {};
    var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
      addG: !!global2,
      removeG: scope === "one",
      isInternalOnly: true
    }));
    var result = String(nullThrows(str)).match(r2);
    if (regex.global) {
      regex.lastIndex = scope === "one" && result ? result.index + result[0].length : 0;
    }
    return global2 ? result || [] : result && result[0];
  };
  XRegExp2.matchChain = function(str, chain) {
    return function recurseChain(values, level) {
      var item = chain[level].regex ? chain[level] : {
        regex: chain[level]
      };
      var matches = [];
      function addMatch(match) {
        if (item.backref) {
          var ERR_UNDEFINED_GROUP = "Backreference to undefined group: ".concat(item.backref);
          var isNamedBackref = isNaN(item.backref);
          if (isNamedBackref && XRegExp2.isInstalled("namespacing")) {
            if (!(match.groups && item.backref in match.groups)) {
              throw new ReferenceError(ERR_UNDEFINED_GROUP);
            }
          } else if (!match.hasOwnProperty(item.backref)) {
            throw new ReferenceError(ERR_UNDEFINED_GROUP);
          }
          var backrefValue = isNamedBackref && XRegExp2.isInstalled("namespacing") ? match.groups[item.backref] : match[item.backref];
          matches.push(backrefValue || "");
        } else {
          matches.push(match[0]);
        }
      }
      var _iterator3 = _createForOfIteratorHelper(values), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var value = _step3.value;
          (0, _forEach["default"])(XRegExp2).call(XRegExp2, value, item.regex, addMatch);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);
    }([str], 0);
  };
  XRegExp2.replace = function(str, search, replacement, scope) {
    var isRegex = XRegExp2.isRegExp(search);
    var global2 = search.global && scope !== "one" || scope === "all";
    var cacheKey = (global2 ? "g" : "") + (search.sticky ? "y" : "") || "noGY";
    var s2 = search;
    if (isRegex) {
      search[REGEX_DATA] = search[REGEX_DATA] || {};
      s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {
        addG: !!global2,
        removeG: scope === "one",
        isInternalOnly: true
      }));
    } else if (global2) {
      s2 = new RegExp(XRegExp2.escape(String(search)), "g");
    }
    var result = fixed.replace.call(nullThrows(str), s2, replacement);
    if (isRegex && search.global) {
      search.lastIndex = 0;
    }
    return result;
  };
  XRegExp2.replaceEach = function(str, replacements) {
    var _iterator4 = _createForOfIteratorHelper(replacements), _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
        var r = _step4.value;
        str = XRegExp2.replace(str, r[0], r[1], r[2]);
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    return str;
  };
  XRegExp2.split = function(str, separator, limit) {
    return fixed.split.call(nullThrows(str), separator, limit);
  };
  XRegExp2.test = function(str, regex, pos, sticky) {
    return !!XRegExp2.exec(str, regex, pos, sticky);
  };
  XRegExp2.uninstall = function(options) {
    options = prepareOptions(options);
    if (features.astral && options.astral) {
      setAstral(false);
    }
    if (features.namespacing && options.namespacing) {
      setNamespacing(false);
    }
  };
  XRegExp2.union = function(patterns, flags, options) {
    options = options || {};
    var conjunction = options.conjunction || "or";
    var numCaptures = 0;
    var numPriorCaptures;
    var captureNames;
    function rewrite(match, paren, backref) {
      var name = captureNames[numCaptures - numPriorCaptures];
      if (paren) {
        ++numCaptures;
        if (name) {
          return "(?<".concat(name, ">");
        }
      } else if (backref) {
        return "\\".concat(+backref + numPriorCaptures);
      }
      return match;
    }
    if (!(isType(patterns, "Array") && patterns.length)) {
      throw new TypeError("Must provide a nonempty array of patterns to merge");
    }
    var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
    var output = [];
    var _iterator5 = _createForOfIteratorHelper(patterns), _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
        var pattern = _step5.value;
        if (XRegExp2.isRegExp(pattern)) {
          numPriorCaptures = numCaptures;
          captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || [];
          output.push(XRegExp2(pattern.source).source.replace(parts, rewrite));
        } else {
          output.push(XRegExp2.escape(pattern));
        }
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    var separator = conjunction === "none" ? "" : "|";
    return XRegExp2(output.join(separator), flags);
  };
  fixed.exec = function(str) {
    var origLastIndex = this.lastIndex;
    var match = RegExp.prototype.exec.apply(this, arguments);
    if (match) {
      if (!correctExecNpcg && match.length > 1 && (0, _includes["default"])(match).call(match, "")) {
        var _context3;
        var r2 = copyRegex(this, {
          removeG: true,
          isInternalOnly: true
        });
        (0, _slice["default"])(_context3 = String(str)).call(_context3, match.index).replace(r2, function() {
          var len = arguments.length;
          for (var i22 = 1; i22 < len - 2; ++i22) {
            if ((i22 < 0 || arguments.length <= i22 ? void 0 : arguments[i22]) === void 0) {
              match[i22] = void 0;
            }
          }
        });
      }
      if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
        var groupsObject = match;
        if (XRegExp2.isInstalled("namespacing")) {
          match.groups = (0, _create["default"])(null);
          groupsObject = match.groups;
        }
        for (var i2 = 1; i2 < match.length; ++i2) {
          var name = this[REGEX_DATA].captureNames[i2 - 1];
          if (name) {
            groupsObject[name] = match[i2];
          }
        }
      } else if (!match.groups && XRegExp2.isInstalled("namespacing")) {
        match.groups = void 0;
      }
      if (this.global && !match[0].length && this.lastIndex > match.index) {
        this.lastIndex = match.index;
      }
    }
    if (!this.global) {
      this.lastIndex = origLastIndex;
    }
    return match;
  };
  fixed.test = function(str) {
    return !!fixed.exec.call(this, str);
  };
  fixed.match = function(regex) {
    if (!XRegExp2.isRegExp(regex)) {
      regex = new RegExp(regex);
    } else if (regex.global) {
      var result = String.prototype.match.apply(this, arguments);
      regex.lastIndex = 0;
      return result;
    }
    return fixed.exec.call(regex, nullThrows(this));
  };
  fixed.replace = function(search, replacement) {
    var isRegex = XRegExp2.isRegExp(search);
    var origLastIndex;
    var captureNames;
    var result;
    if (isRegex) {
      if (search[REGEX_DATA]) {
        captureNames = search[REGEX_DATA].captureNames;
      }
      origLastIndex = search.lastIndex;
    } else {
      search += "";
    }
    if (isType(replacement, "Function")) {
      result = String(this).replace(search, function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (captureNames) {
          var groupsObject;
          if (XRegExp2.isInstalled("namespacing")) {
            groupsObject = (0, _create["default"])(null);
            args.push(groupsObject);
          } else {
            args[0] = new String(args[0]);
            groupsObject = args[0];
          }
          for (var i2 = 0; i2 < captureNames.length; ++i2) {
            if (captureNames[i2]) {
              groupsObject[captureNames[i2]] = args[i2 + 1];
            }
          }
        }
        return replacement.apply(void 0, args);
      });
    } else {
      result = String(nullThrows(this)).replace(search, function() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return String(replacement).replace(replacementToken, replacer);
        function replacer($0, bracketed, angled, dollarToken) {
          bracketed = bracketed || angled;
          var numNonCaptureArgs = isType(args[args.length - 1], "Object") ? 4 : 3;
          var numCaptures = args.length - numNonCaptureArgs;
          if (bracketed) {
            if (/^\d+$/.test(bracketed)) {
              var _n = +bracketed;
              if (_n <= numCaptures) {
                return args[_n] || "";
              }
            }
            var n = captureNames ? (0, _indexOf["default"])(captureNames).call(captureNames, bracketed) : -1;
            if (n < 0) {
              throw new SyntaxError("Backreference to undefined group ".concat($0));
            }
            return args[n + 1] || "";
          }
          if (dollarToken === "" || dollarToken === " ") {
            throw new SyntaxError("Invalid token ".concat($0));
          }
          if (dollarToken === "&" || +dollarToken === 0) {
            return args[0];
          }
          if (dollarToken === "$") {
            return "$";
          }
          if (dollarToken === "`") {
            var _context4;
            return (0, _slice["default"])(_context4 = args[args.length - 1]).call(_context4, 0, args[args.length - 2]);
          }
          if (dollarToken === "'") {
            var _context5;
            return (0, _slice["default"])(_context5 = args[args.length - 1]).call(_context5, args[args.length - 2] + args[0].length);
          }
          dollarToken = +dollarToken;
          if (!isNaN(dollarToken)) {
            if (dollarToken > numCaptures) {
              throw new SyntaxError("Backreference to undefined group ".concat($0));
            }
            return args[dollarToken] || "";
          }
          throw new SyntaxError("Invalid token ".concat($0));
        }
      });
    }
    if (isRegex) {
      if (search.global) {
        search.lastIndex = 0;
      } else {
        search.lastIndex = origLastIndex;
      }
    }
    return result;
  };
  fixed.split = function(separator, limit) {
    if (!XRegExp2.isRegExp(separator)) {
      return String.prototype.split.apply(this, arguments);
    }
    var str = String(this);
    var output = [];
    var origLastIndex = separator.lastIndex;
    var lastLastIndex = 0;
    var lastLength;
    limit = (limit === void 0 ? -1 : limit) >>> 0;
    (0, _forEach["default"])(XRegExp2).call(XRegExp2, str, separator, function(match) {
      if (match.index + match[0].length > lastLastIndex) {
        output.push((0, _slice["default"])(str).call(str, lastLastIndex, match.index));
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, (0, _slice["default"])(match).call(match, 1));
        }
        lastLength = match[0].length;
        lastLastIndex = match.index + lastLength;
      }
    });
    if (lastLastIndex === str.length) {
      if (!separator.test("") || lastLength) {
        output.push("");
      }
    } else {
      output.push((0, _slice["default"])(str).call(str, lastLastIndex));
    }
    separator.lastIndex = origLastIndex;
    return output.length > limit ? (0, _slice["default"])(output).call(output, 0, limit) : output;
  };
  XRegExp2.addToken(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/, function(match, scope) {
    if (match[1] === "B" && scope === defaultScope) {
      return match[0];
    }
    throw new SyntaxError("Invalid escape ".concat(match[0]));
  }, {
    scope: "all",
    leadChar: "\\"
  });
  XRegExp2.addToken(/\\u{([\dA-Fa-f]+)}/, function(match, scope, flags) {
    var code = dec(match[1]);
    if (code > 1114111) {
      throw new SyntaxError("Invalid Unicode code point ".concat(match[0]));
    }
    if (code <= 65535) {
      return "\\u".concat(pad4(hex(code)));
    }
    if (hasNativeU && (0, _includes["default"])(flags).call(flags, "u")) {
      return match[0];
    }
    throw new SyntaxError("Cannot use Unicode code point above \\u{FFFF} without flag u");
  }, {
    scope: "all",
    leadChar: "\\"
  });
  XRegExp2.addToken(/\(\?#[^)]*\)/, getContextualTokenSeparator, {
    leadChar: "("
  });
  XRegExp2.addToken(/\s+|#[^\n]*\n?/, getContextualTokenSeparator, {
    flag: "x"
  });
  if (!hasNativeS) {
    XRegExp2.addToken(/\./, function() {
      return "[\\s\\S]";
    }, {
      flag: "s",
      leadChar: "."
    });
  }
  XRegExp2.addToken(/\\k<([^>]+)>/, function(match) {
    var _context6, _context7;
    var index = isNaN(match[1]) ? (0, _indexOf["default"])(_context6 = this.captureNames).call(_context6, match[1]) + 1 : +match[1];
    var endIndex = match.index + match[0].length;
    if (!index || index > this.captureNames.length) {
      throw new SyntaxError("Backreference to undefined group ".concat(match[0]));
    }
    return (0, _concat["default"])(_context7 = "\\".concat(index)).call(_context7, endIndex === match.input.length || isNaN(match.input[endIndex]) ? "" : "(?:)");
  }, {
    leadChar: "\\"
  });
  XRegExp2.addToken(/\\(\d+)/, function(match, scope) {
    if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== "0") {
      throw new SyntaxError("Cannot use octal escape or backreference to undefined group ".concat(match[0]));
    }
    return match[0];
  }, {
    scope: "all",
    leadChar: "\\"
  });
  XRegExp2.addToken(/\(\?P?<((?:[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])(?:[\$0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u07FD\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D3-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CD0-\u1CD2\u1CD4-\u1CFA\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA827\uA82C\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDD30-\uDD39\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF50\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDC9-\uDDCC\uDDCE-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3B-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC5E-\uDC61\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDC00-\uDC3A\uDCA0-\uDCE9\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B-\uDD43\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDE1\uDDE3\uDDE4\uDE00-\uDE3E\uDE47\uDE50-\uDE99\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFE4\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD30-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4B\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]|\uDB40[\uDD00-\uDDEF])*)>/, function(match) {
    var _context8;
    if (!XRegExp2.isInstalled("namespacing") && (match[1] === "length" || match[1] === "__proto__")) {
      throw new SyntaxError("Cannot use reserved word as capture name ".concat(match[0]));
    }
    if ((0, _includes["default"])(_context8 = this.captureNames).call(_context8, match[1])) {
      throw new SyntaxError("Cannot use same name for multiple groups ".concat(match[0]));
    }
    this.captureNames.push(match[1]);
    this.hasNamedCapture = true;
    return "(";
  }, {
    leadChar: "("
  });
  XRegExp2.addToken(/\((?!\?)/, function(match, scope, flags) {
    if ((0, _includes["default"])(flags).call(flags, "n")) {
      return "(?:";
    }
    this.captureNames.push(null);
    return "(";
  }, {
    optionalFlags: "n",
    leadChar: "("
  });
  var _default = XRegExp2;
  exports2["default"] = _default;
  module2.exports = exports2.default;
});
var require_es_array_map = __commonJS(() => {
  "use strict";
  var $ = require_export();
  var $map = require_array_iteration().map;
  var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
  var arrayMethodUsesToLength = require_array_method_uses_to_length();
  var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
  var USES_TO_LENGTH = arrayMethodUsesToLength("map");
  $({target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH}, {
    map: function map(callbackfn) {
      return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
});
var require_map = __commonJS((exports2, module2) => {
  require_es_array_map();
  var entryVirtual = require_entry_virtual();
  module2.exports = entryVirtual("Array").map;
});
var require_map2 = __commonJS((exports2, module2) => {
  var map = require_map();
  var ArrayPrototype = Array.prototype;
  module2.exports = function(it) {
    var own = it.map;
    return it === ArrayPrototype || it instanceof Array && own === ArrayPrototype.map ? map : own;
  };
});
var require_map3 = __commonJS((exports2, module2) => {
  var parent = require_map2();
  module2.exports = parent;
});
var require_map4 = __commonJS((exports2, module2) => {
  module2.exports = require_map3();
});
var require_array_reduce = __commonJS((exports2, module2) => {
  var aFunction = require_a_function();
  var toObject = require_to_object();
  var IndexedObject = require_indexed_object();
  var toLength = require_to_length();
  var createMethod = function(IS_RIGHT) {
    return function(that, callbackfn, argumentsLength, memo) {
      aFunction(callbackfn);
      var O = toObject(that);
      var self2 = IndexedObject(O);
      var length = toLength(O.length);
      var index = IS_RIGHT ? length - 1 : 0;
      var i2 = IS_RIGHT ? -1 : 1;
      if (argumentsLength < 2)
        while (true) {
          if (index in self2) {
            memo = self2[index];
            index += i2;
            break;
          }
          index += i2;
          if (IS_RIGHT ? index < 0 : length <= index) {
            throw TypeError("Reduce of empty array with no initial value");
          }
        }
      for (; IS_RIGHT ? index >= 0 : length > index; index += i2)
        if (index in self2) {
          memo = callbackfn(memo, self2[index], index, O);
        }
      return memo;
    };
  };
  module2.exports = {
    left: createMethod(false),
    right: createMethod(true)
  };
});
var require_engine_is_node = __commonJS((exports2, module2) => {
  var classof = require_classof_raw();
  var global2 = require_global();
  module2.exports = classof(global2.process) == "process";
});
var require_es_array_reduce = __commonJS(() => {
  "use strict";
  var $ = require_export();
  var $reduce = require_array_reduce().left;
  var arrayMethodIsStrict = require_array_method_is_strict();
  var arrayMethodUsesToLength = require_array_method_uses_to_length();
  var CHROME_VERSION = require_engine_v8_version();
  var IS_NODE = require_engine_is_node();
  var STRICT_METHOD = arrayMethodIsStrict("reduce");
  var USES_TO_LENGTH = arrayMethodUsesToLength("reduce", {1: 0});
  var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
  $({target: "Array", proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH || CHROME_BUG}, {
    reduce: function reduce(callbackfn) {
      return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
});
var require_reduce = __commonJS((exports2, module2) => {
  require_es_array_reduce();
  var entryVirtual = require_entry_virtual();
  module2.exports = entryVirtual("Array").reduce;
});
var require_reduce2 = __commonJS((exports2, module2) => {
  var reduce = require_reduce();
  var ArrayPrototype = Array.prototype;
  module2.exports = function(it) {
    var own = it.reduce;
    return it === ArrayPrototype || it instanceof Array && own === ArrayPrototype.reduce ? reduce : own;
  };
});
var require_reduce3 = __commonJS((exports2, module2) => {
  var parent = require_reduce2();
  module2.exports = parent;
});
var require_reduce4 = __commonJS((exports2, module2) => {
  module2.exports = require_reduce3();
});
var require_build = __commonJS((exports2, module2) => {
  "use strict";
  var _interopRequireDefault = require_interopRequireDefault();
  var _Object$defineProperty = require_define_property3();
  _Object$defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2["default"] = void 0;
  var _concat = _interopRequireDefault(require_concat4());
  var _includes = _interopRequireDefault(require_includes5());
  var _map = _interopRequireDefault(require_map4());
  var _reduce = _interopRequireDefault(require_reduce4());
  /*!
   * XRegExp.build 5.0.1
   * <xregexp.com>
   * Steven Levithan (c) 2012-present MIT License
   */
  var _default = function _default2(XRegExp2) {
    var REGEX_DATA = "xregexp";
    var subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
    var parts = XRegExp2.union([/\({{([\w$]+)}}\)|{{([\w$]+)}}/, subParts], "g", {
      conjunction: "or"
    });
    function deanchor(pattern) {
      var leadingAnchor = /^(?:\(\?:\))*\^/;
      var trailingAnchor = /\$(?:\(\?:\))*$/;
      if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) && trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ""))) {
        return pattern.replace(leadingAnchor, "").replace(trailingAnchor, "");
      }
      return pattern;
    }
    function asXRegExp(value, addFlagX) {
      var flags = addFlagX ? "x" : "";
      return XRegExp2.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? value : XRegExp2(value.source, flags) : XRegExp2(value, flags);
    }
    function interpolate(substitution) {
      return substitution instanceof RegExp ? substitution : XRegExp2.escape(substitution);
    }
    function reduceToSubpatternsObject(subpatterns, interpolated, subpatternIndex) {
      subpatterns["subpattern".concat(subpatternIndex)] = interpolated;
      return subpatterns;
    }
    function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {
      var hasSubpattern = subpatternIndex < rawLiterals.length - 1;
      return raw + (hasSubpattern ? "{{subpattern".concat(subpatternIndex, "}}") : "");
    }
    XRegExp2.tag = function(flags) {
      return function(literals) {
        var _context, _context2;
        for (var _len = arguments.length, substitutions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          substitutions[_key - 1] = arguments[_key];
        }
        var subpatterns = (0, _reduce["default"])(_context = (0, _map["default"])(substitutions).call(substitutions, interpolate)).call(_context, reduceToSubpatternsObject, {});
        var pattern = (0, _map["default"])(_context2 = literals.raw).call(_context2, embedSubpatternAfter).join("");
        return XRegExp2.build(pattern, subpatterns, flags);
      };
    };
    XRegExp2.build = function(pattern, subs, flags) {
      flags = flags || "";
      var addFlagX = (0, _includes["default"])(flags).call(flags, "x");
      var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern);
      if (inlineFlags) {
        flags = XRegExp2._clipDuplicates(flags + inlineFlags[1]);
      }
      var data = {};
      for (var p in subs) {
        if (subs.hasOwnProperty(p)) {
          var sub = asXRegExp(subs[p], addFlagX);
          data[p] = {
            pattern: deanchor(sub.source),
            names: sub[REGEX_DATA].captureNames || []
          };
        }
      }
      var patternAsRegex = asXRegExp(pattern, addFlagX);
      var numCaps = 0;
      var numPriorCaps;
      var numOuterCaps = 0;
      var outerCapsMap = [0];
      var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
      var output = patternAsRegex.source.replace(parts, function($0, $1, $2, $3, $4) {
        var subName = $1 || $2;
        var capName;
        var intro;
        var localCapIndex;
        if (subName) {
          var _context3;
          if (!data.hasOwnProperty(subName)) {
            throw new ReferenceError("Undefined property ".concat($0));
          }
          if ($1) {
            capName = outerCapNames[numOuterCaps];
            outerCapsMap[++numOuterCaps] = ++numCaps;
            intro = "(?<".concat(capName || subName, ">");
          } else {
            intro = "(?:";
          }
          numPriorCaps = numCaps;
          var rewrittenSubpattern = data[subName].pattern.replace(subParts, function(match, paren, backref) {
            if (paren) {
              capName = data[subName].names[numCaps - numPriorCaps];
              ++numCaps;
              if (capName) {
                return "(?<".concat(capName, ">");
              }
            } else if (backref) {
              localCapIndex = +backref - 1;
              return data[subName].names[localCapIndex] ? "\\k<".concat(data[subName].names[localCapIndex], ">") : "\\".concat(+backref + numPriorCaps);
            }
            return match;
          });
          return (0, _concat["default"])(_context3 = "".concat(intro)).call(_context3, rewrittenSubpattern, ")");
        }
        if ($3) {
          capName = outerCapNames[numOuterCaps];
          outerCapsMap[++numOuterCaps] = ++numCaps;
          if (capName) {
            return "(?<".concat(capName, ">");
          }
        } else if ($4) {
          localCapIndex = +$4 - 1;
          return outerCapNames[localCapIndex] ? "\\k<".concat(outerCapNames[localCapIndex], ">") : "\\".concat(outerCapsMap[+$4]);
        }
        return $0;
      });
      return XRegExp2(output, flags);
    };
  };
  exports2["default"] = _default;
  module2.exports = exports2.default;
});
var require_matchrecursive = __commonJS((exports2, module2) => {
  "use strict";
  var _interopRequireDefault = require_interopRequireDefault();
  var _Object$defineProperty = require_define_property3();
  _Object$defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2["default"] = void 0;
  var _slice = _interopRequireDefault(require_slice6());
  var _concat = _interopRequireDefault(require_concat4());
  var _includes = _interopRequireDefault(require_includes5());
  /*!
   * XRegExp.matchRecursive 5.0.1
   * <xregexp.com>
   * Steven Levithan (c) 2009-present MIT License
   */
  var _default = function _default2(XRegExp2) {
    function row(name, value, start, end) {
      return {
        name,
        value,
        start,
        end
      };
    }
    XRegExp2.matchRecursive = function(str, left, right, flags, options) {
      flags = flags || "";
      options = options || {};
      var global2 = (0, _includes["default"])(flags).call(flags, "g");
      var sticky = (0, _includes["default"])(flags).call(flags, "y");
      var basicFlags = flags.replace(/y/g, "");
      var _options = options, escapeChar = _options.escapeChar;
      var vN = options.valueNames;
      var output = [];
      var openTokens = 0;
      var delimStart = 0;
      var delimEnd = 0;
      var lastOuterEnd = 0;
      var outerStart;
      var innerStart;
      var leftMatch;
      var rightMatch;
      var esc;
      left = XRegExp2(left, basicFlags);
      right = XRegExp2(right, basicFlags);
      if (escapeChar) {
        var _context, _context2;
        if (escapeChar.length > 1) {
          throw new Error("Cannot use more than one escape character");
        }
        escapeChar = XRegExp2.escape(escapeChar);
        esc = new RegExp((0, _concat["default"])(_context = (0, _concat["default"])(_context2 = "(?:".concat(escapeChar, "[\\S\\s]|(?:(?!")).call(_context2, XRegExp2.union([left, right], "", {
          conjunction: "or"
        }).source, ")[^")).call(_context, escapeChar, "])+)+"), flags.replace(XRegExp2._hasNativeFlag("s") ? /[^imsu]/g : /[^imu]/g, ""));
      }
      while (true) {
        if (escapeChar) {
          delimEnd += (XRegExp2.exec(str, esc, delimEnd, "sticky") || [""])[0].length;
        }
        leftMatch = XRegExp2.exec(str, left, delimEnd);
        rightMatch = XRegExp2.exec(str, right, delimEnd);
        if (leftMatch && rightMatch) {
          if (leftMatch.index <= rightMatch.index) {
            rightMatch = null;
          } else {
            leftMatch = null;
          }
        }
        if (leftMatch || rightMatch) {
          delimStart = (leftMatch || rightMatch).index;
          delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
        } else if (!openTokens) {
          break;
        }
        if (sticky && !openTokens && delimStart > lastOuterEnd) {
          break;
        }
        if (leftMatch) {
          if (!openTokens) {
            outerStart = delimStart;
            innerStart = delimEnd;
          }
          ++openTokens;
        } else if (rightMatch && openTokens) {
          if (!--openTokens) {
            if (vN) {
              if (vN[0] && outerStart > lastOuterEnd) {
                output.push(row(vN[0], (0, _slice["default"])(str).call(str, lastOuterEnd, outerStart), lastOuterEnd, outerStart));
              }
              if (vN[1]) {
                output.push(row(vN[1], (0, _slice["default"])(str).call(str, outerStart, innerStart), outerStart, innerStart));
              }
              if (vN[2]) {
                output.push(row(vN[2], (0, _slice["default"])(str).call(str, innerStart, delimStart), innerStart, delimStart));
              }
              if (vN[3]) {
                output.push(row(vN[3], (0, _slice["default"])(str).call(str, delimStart, delimEnd), delimStart, delimEnd));
              }
            } else {
              output.push((0, _slice["default"])(str).call(str, innerStart, delimStart));
            }
            lastOuterEnd = delimEnd;
            if (!global2) {
              break;
            }
          }
        } else {
          var _context3;
          var delimSide = rightMatch ? "right" : "left";
          var errorPos = rightMatch ? delimStart : outerStart;
          throw new Error((0, _concat["default"])(_context3 = "Unbalanced ".concat(delimSide, " delimiter found in string at position ")).call(_context3, errorPos));
        }
        if (delimStart === delimEnd) {
          ++delimEnd;
        }
      }
      if (global2 && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
        output.push(row(vN[0], (0, _slice["default"])(str).call(str, lastOuterEnd), lastOuterEnd, str.length));
      }
      return output;
    };
  };
  exports2["default"] = _default;
  module2.exports = exports2.default;
});
var require_unicode_base = __commonJS((exports2, module2) => {
  "use strict";
  var _interopRequireDefault = require_interopRequireDefault();
  var _Object$defineProperty = require_define_property3();
  _Object$defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2["default"] = void 0;
  var _getIterator2 = _interopRequireDefault(require_get_iterator3());
  var _isArray = _interopRequireDefault(require_is_array4());
  var _getIteratorMethod2 = _interopRequireDefault(require_get_iterator_method3());
  var _symbol = _interopRequireDefault(require_symbol3());
  var _from = _interopRequireDefault(require_from3());
  var _slice = _interopRequireDefault(require_slice6());
  var _includes = _interopRequireDefault(require_includes5());
  var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
  var _concat = _interopRequireDefault(require_concat4());
  var _forEach = _interopRequireDefault(require_for_each4());
  function _createForOfIteratorHelper(o2, allowArrayLike) {
    var it;
    if (typeof _symbol["default"] === "undefined" || (0, _getIteratorMethod2["default"])(o2) == null) {
      if ((0, _isArray["default"])(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
        if (it)
          o2 = it;
        var i2 = 0;
        var F = function F2() {
        };
        return {s: F, n: function n() {
          if (i2 >= o2.length)
            return {done: true};
          return {done: false, value: o2[i2++]};
        }, e: function e(_e) {
          throw _e;
        }, f: F};
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {s: function s() {
      it = (0, _getIterator2["default"])(o2);
    }, n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    }, e: function e(_e2) {
      didErr = true;
      err = _e2;
    }, f: function f() {
      try {
        if (!normalCompletion && it["return"] != null)
          it["return"]();
      } finally {
        if (didErr)
          throw err;
      }
    }};
  }
  function _unsupportedIterableToArray(o2, minLen) {
    var _context4;
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray(o2, minLen);
    var n = (0, _slice["default"])(_context4 = Object.prototype.toString.call(o2)).call(_context4, 8, -1);
    if (n === "Object" && o2.constructor)
      n = o2.constructor.name;
    if (n === "Map" || n === "Set")
      return (0, _from["default"])(o2);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
      arr2[i2] = arr[i2];
    }
    return arr2;
  }
  /*!
   * XRegExp Unicode Base 5.0.1
   * <xregexp.com>
   * Steven Levithan (c) 2008-present MIT License
   */
  var _default = function _default2(XRegExp2) {
    var unicode = {};
    var unicodeTypes = {};
    var dec = XRegExp2._dec;
    var hex = XRegExp2._hex;
    var pad4 = XRegExp2._pad4;
    function normalize(name) {
      return name.replace(/[- _]+/g, "").toLowerCase();
    }
    function charCode(chr) {
      var esc = /^\\[xu](.+)/.exec(chr);
      return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === "\\" ? 1 : 0);
    }
    function invertBmp(range) {
      var output = "";
      var lastEnd = -1;
      (0, _forEach["default"])(XRegExp2).call(XRegExp2, range, /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/, function(m) {
        var start = charCode(m[1]);
        if (start > lastEnd + 1) {
          output += "\\u".concat(pad4(hex(lastEnd + 1)));
          if (start > lastEnd + 2) {
            output += "-\\u".concat(pad4(hex(start - 1)));
          }
        }
        lastEnd = charCode(m[2] || m[1]);
      });
      if (lastEnd < 65535) {
        output += "\\u".concat(pad4(hex(lastEnd + 1)));
        if (lastEnd < 65534) {
          output += "-\\uFFFF";
        }
      }
      return output;
    }
    function cacheInvertedBmp(slug) {
      var prop = "b!";
      return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));
    }
    function buildAstral(slug, isNegated) {
      var item = unicode[slug];
      var combined = "";
      if (item.bmp && !item.isBmpLast) {
        var _context;
        combined = (0, _concat["default"])(_context = "[".concat(item.bmp, "]")).call(_context, item.astral ? "|" : "");
      }
      if (item.astral) {
        combined += item.astral;
      }
      if (item.isBmpLast && item.bmp) {
        var _context2;
        combined += (0, _concat["default"])(_context2 = "".concat(item.astral ? "|" : "", "[")).call(_context2, item.bmp, "]");
      }
      return isNegated ? "(?:(?!".concat(combined, ")(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))") : "(?:".concat(combined, ")");
    }
    function cacheAstral(slug, isNegated) {
      var prop = isNegated ? "a!" : "a=";
      return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));
    }
    XRegExp2.addToken(/\\([pP])(?:{(\^?)(?:(\w+)=)?([^}]*)}|([A-Za-z]))/, function(match, scope, flags) {
      var ERR_DOUBLE_NEG = "Invalid double negation ";
      var ERR_UNKNOWN_NAME = "Unknown Unicode token ";
      var ERR_UNKNOWN_REF = "Unicode token missing data ";
      var ERR_ASTRAL_ONLY = "Astral mode required for Unicode token ";
      var ERR_ASTRAL_IN_CLASS = "Astral mode does not support Unicode tokens within character classes";
      var _match = (0, _slicedToArray2["default"])(match, 6), fullToken = _match[0], pPrefix = _match[1], caretNegation = _match[2], typePrefix = _match[3], tokenName = _match[4], tokenSingleCharName = _match[5];
      var isNegated = pPrefix === "P" || !!caretNegation;
      var isAstralMode = (0, _includes["default"])(flags).call(flags, "A");
      var slug = normalize(tokenSingleCharName || tokenName);
      var item = unicode[slug];
      if (pPrefix === "P" && caretNegation) {
        throw new SyntaxError(ERR_DOUBLE_NEG + fullToken);
      }
      if (!unicode.hasOwnProperty(slug)) {
        throw new SyntaxError(ERR_UNKNOWN_NAME + fullToken);
      }
      if (typePrefix) {
        if (!(unicodeTypes[typePrefix] && unicodeTypes[typePrefix][slug])) {
          throw new SyntaxError(ERR_UNKNOWN_NAME + fullToken);
        }
      }
      if (item.inverseOf) {
        slug = normalize(item.inverseOf);
        if (!unicode.hasOwnProperty(slug)) {
          var _context3;
          throw new ReferenceError((0, _concat["default"])(_context3 = "".concat(ERR_UNKNOWN_REF + fullToken, " -> ")).call(_context3, item.inverseOf));
        }
        item = unicode[slug];
        isNegated = !isNegated;
      }
      if (!(item.bmp || isAstralMode)) {
        throw new SyntaxError(ERR_ASTRAL_ONLY + fullToken);
      }
      if (isAstralMode) {
        if (scope === "class") {
          throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
        }
        return cacheAstral(slug, isNegated);
      }
      return scope === "class" ? isNegated ? cacheInvertedBmp(slug) : item.bmp : "".concat((isNegated ? "[^" : "[") + item.bmp, "]");
    }, {
      scope: "all",
      optionalFlags: "A",
      leadChar: "\\"
    });
    XRegExp2.addUnicodeData = function(data, typePrefix) {
      var ERR_NO_NAME = "Unicode token requires name";
      var ERR_NO_DATA = "Unicode token has no character data ";
      if (typePrefix) {
        unicodeTypes[typePrefix] = {};
      }
      var _iterator = _createForOfIteratorHelper(data), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var item = _step.value;
          if (!item.name) {
            throw new Error(ERR_NO_NAME);
          }
          if (!(item.inverseOf || item.bmp || item.astral)) {
            throw new Error(ERR_NO_DATA + item.name);
          }
          var normalizedName = normalize(item.name);
          unicode[normalizedName] = item;
          if (typePrefix) {
            unicodeTypes[typePrefix][normalizedName] = true;
          }
          if (item.alias) {
            var normalizedAlias = normalize(item.alias);
            unicode[normalizedAlias] = item;
            if (typePrefix) {
              unicodeTypes[typePrefix][normalizedAlias] = true;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      XRegExp2.cache.flush("patterns");
    };
    XRegExp2._getUnicodeProperty = function(name) {
      var slug = normalize(name);
      return unicode[slug];
    };
  };
  exports2["default"] = _default;
  module2.exports = exports2.default;
});
var require_categories = __commonJS((exports2, module2) => {
  module2.exports = [
    {
      name: "C",
      alias: "Other",
      isBmpLast: true,
      bmp: "\0-\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E53-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\u9FFD-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7C0\uA7C1\uA7CB-\uA7F4\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF",
      astral: "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCBD\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDE9-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDF\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDD79\uDDCC\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7B-\uDE7F\uDE87-\uDE8F\uDEA9-\uDEAF\uDEB7-\uDEBF\uDEC3-\uDECF\uDED7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]"
    },
    {
      name: "Cc",
      alias: "Control",
      bmp: "\0-\x7F-\x9F"
    },
    {
      name: "Cf",
      alias: "Format",
      bmp: "\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB",
      astral: "\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC38]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]"
    },
    {
      name: "Cn",
      alias: "Unassigned",
      bmp: "\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E53-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\u9FFD-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7C0\uA7C1\uA7CB-\uA7F4\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF",
      astral: "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCC2-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80D[\uDC2F\uDC39-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDE9-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDF\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDD79\uDDCC\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7B-\uDE7F\uDE87-\uDE8F\uDEA9-\uDEAF\uDEB7-\uDEBF\uDEC3-\uDECF\uDED7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]"
    },
    {
      name: "Co",
      alias: "Private_Use",
      bmp: "\uE000-\uF8FF",
      astral: "[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]"
    },
    {
      name: "Cs",
      alias: "Surrogate",
      bmp: "\uD800-\uDFFF"
    },
    {
      name: "L",
      alias: "Letter",
      bmp: "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
      astral: "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
    },
    {
      name: "LC",
      alias: "Cased_Letter",
      bmp: "A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7BF\uA7C2-\uA7CA\uA7F5\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A",
      astral: "\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDD00-\uDD43]"
    },
    {
      name: "Ll",
      alias: "Lowercase_Letter",
      bmp: "a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C3\uA7C8\uA7CA\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
      astral: "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]"
    },
    {
      name: "Lm",
      alias: "Modifier_Letter",
      bmp: "\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uAB69\uFF70\uFF9E\uFF9F",
      astral: "\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD838[\uDD37-\uDD3D]|\u{1E94B}"
    },
    {
      name: "Lo",
      alias: "Other_Letter",
      bmp: "\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
      astral: "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF4A\uDF50]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD838[\uDD00-\uDD2C\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
    },
    {
      name: "Lt",
      alias: "Titlecase_Letter",
      bmp: "\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC"
    },
    {
      name: "Lu",
      alias: "Uppercase_Letter",
      bmp: "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C2\uA7C4-\uA7C7\uA7C9\uA7F5\uFF21-\uFF3A",
      astral: "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]"
    },
    {
      name: "M",
      alias: "Mark",
      bmp: "\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
      astral: "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE\uDDCF\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
    },
    {
      name: "Mc",
      alias: "Spacing_Mark",
      bmp: "\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC",
      astral: "\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD30-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]"
    },
    {
      name: "Me",
      alias: "Enclosing_Mark",
      bmp: "\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672"
    },
    {
      name: "Mn",
      alias: "Nonspacing_Mark",
      bmp: "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
      astral: "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
    },
    {
      name: "N",
      alias: "Number",
      bmp: "0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
      astral: "\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]"
    },
    {
      name: "Nd",
      alias: "Decimal_Number",
      bmp: "0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
      astral: "\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9\uDD50-\uDD59]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]"
    },
    {
      name: "Nl",
      alias: "Letter_Number",
      bmp: "\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF",
      astral: "\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]"
    },
    {
      name: "No",
      alias: "Other_Number",
      bmp: "\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835",
      astral: "\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C\uDFC0-\uDFD4]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]"
    },
    {
      name: "P",
      alias: "Punctuation",
      bmp: "!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65",
      astral: "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
    },
    {
      name: "Pc",
      alias: "Connector_Punctuation",
      bmp: "_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F"
    },
    {
      name: "Pd",
      alias: "Dash_Punctuation",
      bmp: "\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D",
      astral: "\u{10EAD}"
    },
    {
      name: "Pe",
      alias: "Close_Punctuation",
      bmp: "\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63"
    },
    {
      name: "Pf",
      alias: "Final_Punctuation",
      bmp: "\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21"
    },
    {
      name: "Pi",
      alias: "Initial_Punctuation",
      bmp: "\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20"
    },
    {
      name: "Po",
      alias: "Other_Punctuation",
      bmp: "!-#%-'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4F\u2E52\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65",
      astral: "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
    },
    {
      name: "Ps",
      alias: "Open_Punctuation",
      bmp: "\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62"
    },
    {
      name: "S",
      alias: "Symbol",
      bmp: "\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD",
      astral: "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]"
    },
    {
      name: "Sc",
      alias: "Currency_Symbol",
      bmp: "\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BF\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6",
      astral: "\uD807[\uDFDD-\uDFE0]|\u{1E2FF}|\u{1ECB0}"
    },
    {
      name: "Sk",
      alias: "Modifier_Symbol",
      bmp: "\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uAB6A\uAB6B\uFBB2-\uFBC1\uFF3E\uFF40\uFFE3",
      astral: "\uD83C[\uDFFB-\uDFFF]"
    },
    {
      name: "Sm",
      alias: "Math_Symbol",
      bmp: "\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC",
      astral: "\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]"
    },
    {
      name: "So",
      alias: "Other_Symbol",
      bmp: "\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFDFD\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD",
      astral: "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFDC\uDFE1-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\u{1E14F}|\uD83B[\uDCAC\uDD2E]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]"
    },
    {
      name: "Z",
      alias: "Separator",
      bmp: " \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
    },
    {
      name: "Zl",
      alias: "Line_Separator",
      bmp: "\u2028"
    },
    {
      name: "Zp",
      alias: "Paragraph_Separator",
      bmp: "\u2029"
    },
    {
      name: "Zs",
      alias: "Space_Separator",
      bmp: " \xA0\u1680\u2000-\u200A\u202F\u205F\u3000"
    }
  ];
});
var require_unicode_categories = __commonJS((exports2, module2) => {
  "use strict";
  var _interopRequireDefault = require_interopRequireDefault();
  var _Object$defineProperty = require_define_property3();
  _Object$defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2["default"] = void 0;
  var _categories = _interopRequireDefault(require_categories());
  /*!
   * XRegExp Unicode Categories 5.0.1
   * <xregexp.com>
   * Steven Levithan (c) 2010-present MIT License
   * Unicode data by Mathias Bynens <mathiasbynens.be>
   */
  var _default = function _default2(XRegExp2) {
    if (!XRegExp2.addUnicodeData) {
      throw new ReferenceError("Unicode Base must be loaded before Unicode Categories");
    }
    XRegExp2.addUnicodeData(_categories["default"]);
  };
  exports2["default"] = _default;
  module2.exports = exports2.default;
});
var require_properties = __commonJS((exports2, module2) => {
  module2.exports = [
    {
      name: "ASCII",
      bmp: "\0-\x7F"
    },
    {
      name: "Alphabetic",
      bmp: "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u108F\u109A-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1ABF\u1AC0\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA805\uA807-\uA827\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8F2-\uA8F7\uA8FB\uA8FD-\uA8FF\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uA9E0-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
      astral: "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC82-\uDCB8\uDCD0-\uDCE8\uDD00-\uDD32\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE\uDDCF\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDEB8\uDF00-\uDF1A\uDF1D-\uDF2A]|\uD806[\uDC00-\uDC38\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDEE0-\uDEF6\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
    },
    {
      name: "Any",
      isBmpLast: true,
      bmp: "\0-\uFFFF",
      astral: "[\uD800-\uDBFF][\uDC00-\uDFFF]"
    },
    {
      name: "Default_Ignorable_Code_Point",
      bmp: "\xAD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8",
      astral: "\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]"
    },
    {
      name: "Lowercase",
      bmp: "a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C3\uA7C8\uA7CA\uA7F6\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
      astral: "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]"
    },
    {
      name: "Noncharacter_Code_Point",
      bmp: "\uFDD0-\uFDEF\uFFFE\uFFFF",
      astral: "[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]"
    },
    {
      name: "Uppercase",
      bmp: "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C2\uA7C4-\uA7C7\uA7C9\uA7F5\uFF21-\uFF3A",
      astral: "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]"
    },
    {
      name: "White_Space",
      bmp: "	-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
    }
  ];
});
var require_unicode_properties = __commonJS((exports2, module2) => {
  "use strict";
  var _interopRequireDefault = require_interopRequireDefault();
  var _Object$defineProperty = require_define_property3();
  _Object$defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2["default"] = void 0;
  var _properties = _interopRequireDefault(require_properties());
  /*!
   * XRegExp Unicode Properties 5.0.1
   * <xregexp.com>
   * Steven Levithan (c) 2012-present MIT License
   * Unicode data by Mathias Bynens <mathiasbynens.be>
   */
  var _default = function _default2(XRegExp2) {
    if (!XRegExp2.addUnicodeData) {
      throw new ReferenceError("Unicode Base must be loaded before Unicode Properties");
    }
    var unicodeData = _properties["default"];
    unicodeData.push({
      name: "Assigned",
      inverseOf: "Cn"
    });
    XRegExp2.addUnicodeData(unicodeData);
  };
  exports2["default"] = _default;
  module2.exports = exports2.default;
});
var require_scripts = __commonJS((exports2, module2) => {
  module2.exports = [
    {
      name: "Adlam",
      astral: "\uD83A[\uDD00-\uDD4B\uDD50-\uDD59\uDD5E\uDD5F]"
    },
    {
      name: "Ahom",
      astral: "\uD805[\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF3F]"
    },
    {
      name: "Anatolian_Hieroglyphs",
      astral: "\uD811[\uDC00-\uDE46]"
    },
    {
      name: "Arabic",
      bmp: "\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061C\u061E\u0620-\u063F\u0641-\u064A\u0656-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B4\u08B6-\u08C7\u08D3-\u08E1\u08E3-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC",
      astral: "\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]"
    },
    {
      name: "Armenian",
      bmp: "\u0531-\u0556\u0559-\u058A\u058D-\u058F\uFB13-\uFB17"
    },
    {
      name: "Avestan",
      astral: "\uD802[\uDF00-\uDF35\uDF39-\uDF3F]"
    },
    {
      name: "Balinese",
      bmp: "\u1B00-\u1B4B\u1B50-\u1B7C"
    },
    {
      name: "Bamum",
      bmp: "\uA6A0-\uA6F7",
      astral: "\uD81A[\uDC00-\uDE38]"
    },
    {
      name: "Bassa_Vah",
      astral: "\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]"
    },
    {
      name: "Batak",
      bmp: "\u1BC0-\u1BF3\u1BFC-\u1BFF"
    },
    {
      name: "Bengali",
      bmp: "\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE"
    },
    {
      name: "Bhaiksuki",
      astral: "\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]"
    },
    {
      name: "Bopomofo",
      bmp: "\u02EA\u02EB\u3105-\u312F\u31A0-\u31BF"
    },
    {
      name: "Brahmi",
      astral: "\uD804[\uDC00-\uDC4D\uDC52-\uDC6F\uDC7F]"
    },
    {
      name: "Braille",
      bmp: "\u2800-\u28FF"
    },
    {
      name: "Buginese",
      bmp: "\u1A00-\u1A1B\u1A1E\u1A1F"
    },
    {
      name: "Buhid",
      bmp: "\u1740-\u1753"
    },
    {
      name: "Canadian_Aboriginal",
      bmp: "\u1400-\u167F\u18B0-\u18F5"
    },
    {
      name: "Carian",
      astral: "\uD800[\uDEA0-\uDED0]"
    },
    {
      name: "Caucasian_Albanian",
      astral: "\uD801[\uDD30-\uDD63\uDD6F]"
    },
    {
      name: "Chakma",
      astral: "\uD804[\uDD00-\uDD34\uDD36-\uDD47]"
    },
    {
      name: "Cham",
      bmp: "\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F"
    },
    {
      name: "Cherokee",
      bmp: "\u13A0-\u13F5\u13F8-\u13FD\uAB70-\uABBF"
    },
    {
      name: "Chorasmian",
      astral: "\uD803[\uDFB0-\uDFCB]"
    },
    {
      name: "Common",
      bmp: "\0-@\\[-`\\{-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7\u02B9-\u02DF\u02E5-\u02E9\u02EC-\u02FF\u0374\u037E\u0385\u0387\u0605\u060C\u061B\u061F\u0640\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BF\u2100-\u2125\u2127-\u2129\u212C-\u2131\u2133-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2E00-\u2E52\u2FF0-\u2FFB\u3000-\u3004\u3006\u3008-\u3020\u3030-\u3037\u303C-\u303F\u309B\u309C\u30A0\u30FB\u30FC\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u32FF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721\uA788-\uA78A\uA830-\uA839\uA92E\uA9CF\uAB5B\uAB6A\uAB6B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFF70\uFF9E\uFF9F\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD",
      astral: "\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9C\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD81B[\uDFE2\uDFE3]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDEE0-\uDEF3\uDF00-\uDF56\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83B[\uDC71-\uDCB4\uDD01-\uDD3D]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDDAD\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA\uDFF0-\uDFF9]|\uDB40[\uDC01\uDC20-\uDC7F]"
    },
    {
      name: "Coptic",
      bmp: "\u03E2-\u03EF\u2C80-\u2CF3\u2CF9-\u2CFF"
    },
    {
      name: "Cuneiform",
      astral: "\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]"
    },
    {
      name: "Cypriot",
      astral: "\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]"
    },
    {
      name: "Cyrillic",
      bmp: "\u0400-\u0484\u0487-\u052F\u1C80-\u1C88\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F"
    },
    {
      name: "Deseret",
      astral: "\uD801[\uDC00-\uDC4F]"
    },
    {
      name: "Devanagari",
      bmp: "\u0900-\u0950\u0955-\u0963\u0966-\u097F\uA8E0-\uA8FF"
    },
    {
      name: "Dives_Akuru",
      astral: "\uD806[\uDD00-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B-\uDD46\uDD50-\uDD59]"
    },
    {
      name: "Dogra",
      astral: "\uD806[\uDC00-\uDC3B]"
    },
    {
      name: "Duployan",
      astral: "\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]"
    },
    {
      name: "Egyptian_Hieroglyphs",
      astral: "\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E\uDC30-\uDC38]"
    },
    {
      name: "Elbasan",
      astral: "\uD801[\uDD00-\uDD27]"
    },
    {
      name: "Elymaic",
      astral: "\uD803[\uDFE0-\uDFF6]"
    },
    {
      name: "Ethiopic",
      bmp: "\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E"
    },
    {
      name: "Georgian",
      bmp: "\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u1C90-\u1CBA\u1CBD-\u1CBF\u2D00-\u2D25\u2D27\u2D2D"
    },
    {
      name: "Glagolitic",
      bmp: "\u2C00-\u2C2E\u2C30-\u2C5E",
      astral: "\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]"
    },
    {
      name: "Gothic",
      astral: "\uD800[\uDF30-\uDF4A]"
    },
    {
      name: "Grantha",
      astral: "\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]"
    },
    {
      name: "Greek",
      bmp: "\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65",
      astral: "\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]"
    },
    {
      name: "Gujarati",
      bmp: "\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF"
    },
    {
      name: "Gunjala_Gondi",
      astral: "\uD807[\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9]"
    },
    {
      name: "Gurmukhi",
      bmp: "\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76"
    },
    {
      name: "Han",
      bmp: "\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DBF\u4E00-\u9FFC\uF900-\uFA6D\uFA70-\uFAD9",
      astral: "\uD81B[\uDFF0\uDFF1]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
    },
    {
      name: "Hangul",
      bmp: "\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC"
    },
    {
      name: "Hanifi_Rohingya",
      astral: "\uD803[\uDD00-\uDD27\uDD30-\uDD39]"
    },
    {
      name: "Hanunoo",
      bmp: "\u1720-\u1734"
    },
    {
      name: "Hatran",
      astral: "\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]"
    },
    {
      name: "Hebrew",
      bmp: "\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F"
    },
    {
      name: "Hiragana",
      bmp: "\u3041-\u3096\u309D-\u309F",
      astral: "\uD82C[\uDC01-\uDD1E\uDD50-\uDD52]|\u{1F200}"
    },
    {
      name: "Imperial_Aramaic",
      astral: "\uD802[\uDC40-\uDC55\uDC57-\uDC5F]"
    },
    {
      name: "Inherited",
      bmp: "\u0300-\u036F\u0485\u0486\u064B-\u0655\u0670\u0951-\u0954\u1AB0-\u1AC0\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u200D\u20D0-\u20F0\u302A-\u302D\u3099\u309A\uFE00-\uFE0F\uFE20-\uFE2D",
      astral: "\uD800[\uDDFD\uDEE0]|\u{1133B}|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]"
    },
    {
      name: "Inscriptional_Pahlavi",
      astral: "\uD802[\uDF60-\uDF72\uDF78-\uDF7F]"
    },
    {
      name: "Inscriptional_Parthian",
      astral: "\uD802[\uDF40-\uDF55\uDF58-\uDF5F]"
    },
    {
      name: "Javanese",
      bmp: "\uA980-\uA9CD\uA9D0-\uA9D9\uA9DE\uA9DF"
    },
    {
      name: "Kaithi",
      astral: "\uD804[\uDC80-\uDCC1\uDCCD]"
    },
    {
      name: "Kannada",
      bmp: "\u0C80-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2"
    },
    {
      name: "Katakana",
      bmp: "\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D",
      astral: "\uD82C[\uDC00\uDD64-\uDD67]"
    },
    {
      name: "Kayah_Li",
      bmp: "\uA900-\uA92D\uA92F"
    },
    {
      name: "Kharoshthi",
      astral: "\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F-\uDE48\uDE50-\uDE58]"
    },
    {
      name: "Khitan_Small_Script",
      astral: "\u{16FE4}|\uD822[\uDF00-\uDFFF]|\uD823[\uDC00-\uDCD5]"
    },
    {
      name: "Khmer",
      bmp: "\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF"
    },
    {
      name: "Khojki",
      astral: "\uD804[\uDE00-\uDE11\uDE13-\uDE3E]"
    },
    {
      name: "Khudawadi",
      astral: "\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]"
    },
    {
      name: "Lao",
      bmp: "\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF"
    },
    {
      name: "Latin",
      bmp: "A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB64\uAB66-\uAB69\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A"
    },
    {
      name: "Lepcha",
      bmp: "\u1C00-\u1C37\u1C3B-\u1C49\u1C4D-\u1C4F"
    },
    {
      name: "Limbu",
      bmp: "\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u194F"
    },
    {
      name: "Linear_A",
      astral: "\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]"
    },
    {
      name: "Linear_B",
      astral: "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]"
    },
    {
      name: "Lisu",
      bmp: "\uA4D0-\uA4FF",
      astral: "\u{11FB0}"
    },
    {
      name: "Lycian",
      astral: "\uD800[\uDE80-\uDE9C]"
    },
    {
      name: "Lydian",
      astral: "\uD802[\uDD20-\uDD39\uDD3F]"
    },
    {
      name: "Mahajani",
      astral: "\uD804[\uDD50-\uDD76]"
    },
    {
      name: "Makasar",
      astral: "\uD807[\uDEE0-\uDEF8]"
    },
    {
      name: "Malayalam",
      bmp: "\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F"
    },
    {
      name: "Mandaic",
      bmp: "\u0840-\u085B\u085E"
    },
    {
      name: "Manichaean",
      astral: "\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]"
    },
    {
      name: "Marchen",
      astral: "\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]"
    },
    {
      name: "Masaram_Gondi",
      astral: "\uD807[\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]"
    },
    {
      name: "Medefaidrin",
      astral: "\uD81B[\uDE40-\uDE9A]"
    },
    {
      name: "Meetei_Mayek",
      bmp: "\uAAE0-\uAAF6\uABC0-\uABED\uABF0-\uABF9"
    },
    {
      name: "Mende_Kikakui",
      astral: "\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]"
    },
    {
      name: "Meroitic_Cursive",
      astral: "\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]"
    },
    {
      name: "Meroitic_Hieroglyphs",
      astral: "\uD802[\uDD80-\uDD9F]"
    },
    {
      name: "Miao",
      astral: "\uD81B[\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F]"
    },
    {
      name: "Modi",
      astral: "\uD805[\uDE00-\uDE44\uDE50-\uDE59]"
    },
    {
      name: "Mongolian",
      bmp: "\u1800\u1801\u1804\u1806-\u180E\u1810-\u1819\u1820-\u1878\u1880-\u18AA",
      astral: "\uD805[\uDE60-\uDE6C]"
    },
    {
      name: "Mro",
      astral: "\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]"
    },
    {
      name: "Multani",
      astral: "\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]"
    },
    {
      name: "Myanmar",
      bmp: "\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F"
    },
    {
      name: "Nabataean",
      astral: "\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]"
    },
    {
      name: "Nandinagari",
      astral: "\uD806[\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDE4]"
    },
    {
      name: "New_Tai_Lue",
      bmp: "\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE\u19DF"
    },
    {
      name: "Newa",
      astral: "\uD805[\uDC00-\uDC5B\uDC5D-\uDC61]"
    },
    {
      name: "Nko",
      bmp: "\u07C0-\u07FA\u07FD-\u07FF"
    },
    {
      name: "Nushu",
      astral: "\u{16FE1}|\uD82C[\uDD70-\uDEFB]"
    },
    {
      name: "Nyiakeng_Puachue_Hmong",
      astral: "\uD838[\uDD00-\uDD2C\uDD30-\uDD3D\uDD40-\uDD49\uDD4E\uDD4F]"
    },
    {
      name: "Ogham",
      bmp: "\u1680-\u169C"
    },
    {
      name: "Ol_Chiki",
      bmp: "\u1C50-\u1C7F"
    },
    {
      name: "Old_Hungarian",
      astral: "\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]"
    },
    {
      name: "Old_Italic",
      astral: "\uD800[\uDF00-\uDF23\uDF2D-\uDF2F]"
    },
    {
      name: "Old_North_Arabian",
      astral: "\uD802[\uDE80-\uDE9F]"
    },
    {
      name: "Old_Permic",
      astral: "\uD800[\uDF50-\uDF7A]"
    },
    {
      name: "Old_Persian",
      astral: "\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]"
    },
    {
      name: "Old_Sogdian",
      astral: "\uD803[\uDF00-\uDF27]"
    },
    {
      name: "Old_South_Arabian",
      astral: "\uD802[\uDE60-\uDE7F]"
    },
    {
      name: "Old_Turkic",
      astral: "\uD803[\uDC00-\uDC48]"
    },
    {
      name: "Oriya",
      bmp: "\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77"
    },
    {
      name: "Osage",
      astral: "\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]"
    },
    {
      name: "Osmanya",
      astral: "\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]"
    },
    {
      name: "Pahawh_Hmong",
      astral: "\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]"
    },
    {
      name: "Palmyrene",
      astral: "\uD802[\uDC60-\uDC7F]"
    },
    {
      name: "Pau_Cin_Hau",
      astral: "\uD806[\uDEC0-\uDEF8]"
    },
    {
      name: "Phags_Pa",
      bmp: "\uA840-\uA877"
    },
    {
      name: "Phoenician",
      astral: "\uD802[\uDD00-\uDD1B\uDD1F]"
    },
    {
      name: "Psalter_Pahlavi",
      astral: "\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]"
    },
    {
      name: "Rejang",
      bmp: "\uA930-\uA953\uA95F"
    },
    {
      name: "Runic",
      bmp: "\u16A0-\u16EA\u16EE-\u16F8"
    },
    {
      name: "Samaritan",
      bmp: "\u0800-\u082D\u0830-\u083E"
    },
    {
      name: "Saurashtra",
      bmp: "\uA880-\uA8C5\uA8CE-\uA8D9"
    },
    {
      name: "Sharada",
      astral: "\uD804[\uDD80-\uDDDF]"
    },
    {
      name: "Shavian",
      astral: "\uD801[\uDC50-\uDC7F]"
    },
    {
      name: "Siddham",
      astral: "\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]"
    },
    {
      name: "SignWriting",
      astral: "\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]"
    },
    {
      name: "Sinhala",
      bmp: "\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4",
      astral: "\uD804[\uDDE1-\uDDF4]"
    },
    {
      name: "Sogdian",
      astral: "\uD803[\uDF30-\uDF59]"
    },
    {
      name: "Sora_Sompeng",
      astral: "\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]"
    },
    {
      name: "Soyombo",
      astral: "\uD806[\uDE50-\uDEA2]"
    },
    {
      name: "Sundanese",
      bmp: "\u1B80-\u1BBF\u1CC0-\u1CC7"
    },
    {
      name: "Syloti_Nagri",
      bmp: "\uA800-\uA82C"
    },
    {
      name: "Syriac",
      bmp: "\u0700-\u070D\u070F-\u074A\u074D-\u074F\u0860-\u086A"
    },
    {
      name: "Tagalog",
      bmp: "\u1700-\u170C\u170E-\u1714"
    },
    {
      name: "Tagbanwa",
      bmp: "\u1760-\u176C\u176E-\u1770\u1772\u1773"
    },
    {
      name: "Tai_Le",
      bmp: "\u1950-\u196D\u1970-\u1974"
    },
    {
      name: "Tai_Tham",
      bmp: "\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD"
    },
    {
      name: "Tai_Viet",
      bmp: "\uAA80-\uAAC2\uAADB-\uAADF"
    },
    {
      name: "Takri",
      astral: "\uD805[\uDE80-\uDEB8\uDEC0-\uDEC9]"
    },
    {
      name: "Tamil",
      bmp: "\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA",
      astral: "\uD807[\uDFC0-\uDFF1\uDFFF]"
    },
    {
      name: "Tangut",
      astral: "\u{16FE0}|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEFF]|\uD823[\uDD00-\uDD08]"
    },
    {
      name: "Telugu",
      bmp: "\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C77-\u0C7F"
    },
    {
      name: "Thaana",
      bmp: "\u0780-\u07B1"
    },
    {
      name: "Thai",
      bmp: "\u0E01-\u0E3A\u0E40-\u0E5B"
    },
    {
      name: "Tibetan",
      bmp: "\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA"
    },
    {
      name: "Tifinagh",
      bmp: "\u2D30-\u2D67\u2D6F\u2D70\u2D7F"
    },
    {
      name: "Tirhuta",
      astral: "\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]"
    },
    {
      name: "Ugaritic",
      astral: "\uD800[\uDF80-\uDF9D\uDF9F]"
    },
    {
      name: "Vai",
      bmp: "\uA500-\uA62B"
    },
    {
      name: "Wancho",
      astral: "\uD838[\uDEC0-\uDEF9\uDEFF]"
    },
    {
      name: "Warang_Citi",
      astral: "\uD806[\uDCA0-\uDCF2\uDCFF]"
    },
    {
      name: "Yezidi",
      astral: "\uD803[\uDE80-\uDEA9\uDEAB-\uDEAD\uDEB0\uDEB1]"
    },
    {
      name: "Yi",
      bmp: "\uA000-\uA48C\uA490-\uA4C6"
    },
    {
      name: "Zanabazar_Square",
      astral: "\uD806[\uDE00-\uDE47]"
    }
  ];
});
var require_unicode_scripts = __commonJS((exports2, module2) => {
  "use strict";
  var _interopRequireDefault = require_interopRequireDefault();
  var _Object$defineProperty = require_define_property3();
  _Object$defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2["default"] = void 0;
  var _scripts = _interopRequireDefault(require_scripts());
  /*!
   * XRegExp Unicode Scripts 5.0.1
   * <xregexp.com>
   * Steven Levithan (c) 2010-present MIT License
   * Unicode data by Mathias Bynens <mathiasbynens.be>
   */
  var _default = function _default2(XRegExp2) {
    if (!XRegExp2.addUnicodeData) {
      throw new ReferenceError("Unicode Base must be loaded before Unicode Scripts");
    }
    XRegExp2.addUnicodeData(_scripts["default"], "Script");
  };
  exports2["default"] = _default;
  module2.exports = exports2.default;
});
var require_lib = __commonJS((exports2, module2) => {
  "use strict";
  var _interopRequireDefault = require_interopRequireDefault();
  var _Object$defineProperty = require_define_property3();
  _Object$defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2["default"] = void 0;
  var _xregexp = _interopRequireDefault(require_xregexp());
  var _build = _interopRequireDefault(require_build());
  var _matchrecursive = _interopRequireDefault(require_matchrecursive());
  var _unicodeBase = _interopRequireDefault(require_unicode_base());
  var _unicodeCategories = _interopRequireDefault(require_unicode_categories());
  var _unicodeProperties = _interopRequireDefault(require_unicode_properties());
  var _unicodeScripts = _interopRequireDefault(require_unicode_scripts());
  (0, _build["default"])(_xregexp["default"]);
  (0, _matchrecursive["default"])(_xregexp["default"]);
  (0, _unicodeBase["default"])(_xregexp["default"]);
  (0, _unicodeCategories["default"])(_xregexp["default"]);
  (0, _unicodeProperties["default"])(_xregexp["default"]);
  (0, _unicodeScripts["default"])(_xregexp["default"]);
  var _default = _xregexp["default"];
  exports2["default"] = _default;
  module2.exports = exports2.default;
});
var require_iterator = __commonJS((exports2, module2) => {
  function Iterator(next) {
    Object.defineProperty(this, "_next", {
      writable: false,
      enumerable: false,
      value: next
    });
    this.done = false;
  }
  Iterator.prototype.next = function() {
    if (this.done)
      return {done: true};
    var step = this._next();
    if (step.done)
      this.done = true;
    return step;
  };
  if (typeof Symbol !== "undefined")
    Iterator.prototype[Symbol.iterator] = function() {
      return this;
    };
  Iterator.of = function() {
    var args = arguments, l = args.length, i2 = 0;
    return new Iterator(function() {
      if (i2 >= l)
        return {done: true};
      return {done: false, value: args[i2++]};
    });
  };
  Iterator.empty = function() {
    var iterator = new Iterator(null);
    iterator.done = true;
    return iterator;
  };
  Iterator.is = function(value) {
    if (value instanceof Iterator)
      return true;
    return typeof value === "object" && value !== null && typeof value.next === "function";
  };
  module2.exports = Iterator;
});
var require_foreach = __commonJS((exports2, module2) => {
  var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== "undefined";
  var SYMBOL_SUPPORT = typeof Symbol !== "undefined";
  function forEach(iterable, callback) {
    var iterator, k, i2, l, s;
    if (!iterable)
      throw new Error("obliterator/forEach: invalid iterable.");
    if (typeof callback !== "function")
      throw new Error("obliterator/forEach: expecting a callback.");
    if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
      for (i2 = 0, l = iterable.length; i2 < l; i2++)
        callback(iterable[i2], i2);
      return;
    }
    if (typeof iterable.forEach === "function") {
      iterable.forEach(callback);
      return;
    }
    if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
      iterable = iterable[Symbol.iterator]();
    }
    if (typeof iterable.next === "function") {
      iterator = iterable;
      i2 = 0;
      while (s = iterator.next(), s.done !== true) {
        callback(s.value, i2);
        i2++;
      }
      return;
    }
    for (k in iterable) {
      if (iterable.hasOwnProperty(k)) {
        callback(iterable[k], k);
      }
    }
    return;
  }
  forEach.forEachWithNullKeys = function(iterable, callback) {
    var iterator, k, i2, l, s;
    if (!iterable)
      throw new Error("obliterator/forEachWithNullKeys: invalid iterable.");
    if (typeof callback !== "function")
      throw new Error("obliterator/forEachWithNullKeys: expecting a callback.");
    if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
      for (i2 = 0, l = iterable.length; i2 < l; i2++)
        callback(iterable[i2], null);
      return;
    }
    if (iterable instanceof Set) {
      iterable.forEach(function(value) {
        callback(value, null);
      });
      return;
    }
    if (typeof iterable.forEach === "function") {
      iterable.forEach(callback);
      return;
    }
    if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
      iterable = iterable[Symbol.iterator]();
    }
    if (typeof iterable.next === "function") {
      iterator = iterable;
      i2 = 0;
      while (s = iterator.next(), s.done !== true) {
        callback(s.value, null);
        i2++;
      }
      return;
    }
    for (k in iterable) {
      if (iterable.hasOwnProperty(k)) {
        callback(iterable[k], k);
      }
    }
    return;
  };
  module2.exports = forEach;
});
var require_typed_arrays = __commonJS((exports2) => {
  var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
  var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
  var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
  var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
  var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
  var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
  exports2.getPointerArray = function(size) {
    var maxIndex = size - 1;
    if (maxIndex <= MAX_8BIT_INTEGER)
      return Uint8Array;
    if (maxIndex <= MAX_16BIT_INTEGER)
      return Uint16Array;
    if (maxIndex <= MAX_32BIT_INTEGER)
      return Uint32Array;
    return Float64Array;
  };
  exports2.getSignedPointerArray = function(size) {
    var maxIndex = size - 1;
    if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
      return Int8Array;
    if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
      return Int16Array;
    if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
      return Int32Array;
    return Float64Array;
  };
  exports2.getNumberType = function(value) {
    if (value === (value | 0)) {
      if (Math.sign(value) === -1) {
        if (value <= 127 && value >= -128)
          return Int8Array;
        if (value <= 32767 && value >= -32768)
          return Int16Array;
        return Int32Array;
      } else {
        if (value <= 255)
          return Uint8Array;
        if (value <= 65535)
          return Uint16Array;
        return Uint32Array;
      }
    }
    return Float64Array;
  };
  var TYPE_PRIORITY = {
    Uint8Array: 1,
    Int8Array: 2,
    Uint16Array: 3,
    Int16Array: 4,
    Uint32Array: 5,
    Int32Array: 6,
    Float32Array: 7,
    Float64Array: 8
  };
  exports2.getMinimalRepresentation = function(array, getter) {
    var maxType = null, maxPriority = 0, p, t, v, i2, l;
    for (i2 = 0, l = array.length; i2 < l; i2++) {
      v = getter ? getter(array[i2]) : array[i2];
      t = exports2.getNumberType(v);
      p = TYPE_PRIORITY[t.name];
      if (p > maxPriority) {
        maxPriority = p;
        maxType = t;
      }
    }
    return maxType;
  };
  exports2.isTypedArray = function(value) {
    return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
  };
  exports2.concat = function() {
    var length = 0, i2, o2, l;
    for (i2 = 0, l = arguments.length; i2 < l; i2++)
      length += arguments[i2].length;
    var array = new arguments[0].constructor(length);
    for (i2 = 0, o2 = 0; i2 < l; i2++) {
      array.set(arguments[i2], o2);
      o2 += arguments[i2].length;
    }
    return array;
  };
  exports2.indices = function(length) {
    var PointerArray = exports2.getPointerArray(length);
    var array = new PointerArray(length);
    for (var i2 = 0; i2 < length; i2++)
      array[i2] = i2;
    return array;
  };
});
var require_iterables = __commonJS((exports2) => {
  var forEach = require_foreach();
  var isTypedArray = require_typed_arrays().isTypedArray;
  function isArrayLike(target) {
    return Array.isArray(target) || isTypedArray(target);
  }
  function guessLength(target) {
    if (typeof target.length === "number")
      return target.length;
    if (typeof target.size === "number")
      return target.size;
    return;
  }
  function toArray(target) {
    var l = guessLength(target);
    var array = typeof l === "number" ? new Array(l) : [];
    var i2 = 0;
    forEach(target, function(value) {
      array[i2++] = value;
    });
    return array;
  }
  exports2.isArrayLike = isArrayLike;
  exports2.guessLength = guessLength;
  exports2.toArray = toArray;
});
var require_lru_cache = __commonJS((exports2, module2) => {
  var Iterator = require_iterator();
  var forEach = require_foreach();
  var typed = require_typed_arrays();
  var iterables = require_iterables();
  function LRUCache3(Keys, Values, capacity) {
    if (arguments.length < 2) {
      capacity = Keys;
      Keys = null;
      Values = null;
    }
    this.capacity = capacity;
    if (typeof this.capacity !== "number" || this.capacity <= 0)
      throw new Error("mnemonist/lru-cache: capacity should be positive number.");
    var PointerArray = typed.getPointerArray(capacity);
    this.forward = new PointerArray(capacity);
    this.backward = new PointerArray(capacity);
    this.K = typeof Keys === "function" ? new Keys(capacity) : new Array(capacity);
    this.V = typeof Values === "function" ? new Values(capacity) : new Array(capacity);
    this.size = 0;
    this.head = 0;
    this.tail = 0;
    this.items = {};
  }
  LRUCache3.prototype.clear = function() {
    this.size = 0;
    this.head = 0;
    this.tail = 0;
    this.items = {};
  };
  LRUCache3.prototype.splayOnTop = function(pointer) {
    var oldHead = this.head;
    if (this.head === pointer)
      return this;
    var previous = this.backward[pointer], next = this.forward[pointer];
    if (this.tail === pointer) {
      this.tail = previous;
    } else {
      this.backward[next] = previous;
    }
    this.forward[previous] = next;
    this.backward[oldHead] = pointer;
    this.head = pointer;
    this.forward[pointer] = oldHead;
    return this;
  };
  LRUCache3.prototype.set = function(key, value) {
    var pointer = this.items[key];
    if (typeof pointer !== "undefined") {
      this.splayOnTop(pointer);
      this.V[pointer] = value;
      return;
    }
    if (this.size < this.capacity) {
      pointer = this.size++;
    } else {
      pointer = this.tail;
      this.tail = this.backward[pointer];
      delete this.items[this.K[pointer]];
    }
    this.items[key] = pointer;
    this.K[pointer] = key;
    this.V[pointer] = value;
    this.forward[pointer] = this.head;
    this.backward[this.head] = pointer;
    this.head = pointer;
  };
  LRUCache3.prototype.setpop = function(key, value) {
    var oldValue = null;
    var oldKey = null;
    var pointer = this.items[key];
    if (typeof pointer !== "undefined") {
      this.splayOnTop(pointer);
      oldValue = this.V[pointer];
      this.V[pointer] = value;
      return {evicted: false, key, value: oldValue};
    }
    if (this.size < this.capacity) {
      pointer = this.size++;
    } else {
      pointer = this.tail;
      this.tail = this.backward[pointer];
      oldValue = this.V[pointer];
      oldKey = this.K[pointer];
      delete this.items[this.K[pointer]];
    }
    this.items[key] = pointer;
    this.K[pointer] = key;
    this.V[pointer] = value;
    this.forward[pointer] = this.head;
    this.backward[this.head] = pointer;
    this.head = pointer;
    if (oldKey) {
      return {evicted: true, key: oldKey, value: oldValue};
    } else {
      return null;
    }
  };
  LRUCache3.prototype.has = function(key) {
    return key in this.items;
  };
  LRUCache3.prototype.get = function(key) {
    var pointer = this.items[key];
    if (typeof pointer === "undefined")
      return;
    this.splayOnTop(pointer);
    return this.V[pointer];
  };
  LRUCache3.prototype.peek = function(key) {
    var pointer = this.items[key];
    if (typeof pointer === "undefined")
      return;
    return this.V[pointer];
  };
  LRUCache3.prototype.forEach = function(callback, scope) {
    scope = arguments.length > 1 ? scope : this;
    var i2 = 0, l = this.size;
    var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
    while (i2 < l) {
      callback.call(scope, values[pointer], keys[pointer], this);
      pointer = forward[pointer];
      i2++;
    }
  };
  LRUCache3.prototype.keys = function() {
    var i2 = 0, l = this.size;
    var pointer = this.head, keys = this.K, forward = this.forward;
    return new Iterator(function() {
      if (i2 >= l)
        return {done: true};
      var key = keys[pointer];
      i2++;
      if (i2 < l)
        pointer = forward[pointer];
      return {
        done: false,
        value: key
      };
    });
  };
  LRUCache3.prototype.values = function() {
    var i2 = 0, l = this.size;
    var pointer = this.head, values = this.V, forward = this.forward;
    return new Iterator(function() {
      if (i2 >= l)
        return {done: true};
      var value = values[pointer];
      i2++;
      if (i2 < l)
        pointer = forward[pointer];
      return {
        done: false,
        value
      };
    });
  };
  LRUCache3.prototype.entries = function() {
    var i2 = 0, l = this.size;
    var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
    return new Iterator(function() {
      if (i2 >= l)
        return {done: true};
      var key = keys[pointer], value = values[pointer];
      i2++;
      if (i2 < l)
        pointer = forward[pointer];
      return {
        done: false,
        value: [key, value]
      };
    });
  };
  if (typeof Symbol !== "undefined")
    LRUCache3.prototype[Symbol.iterator] = LRUCache3.prototype.entries;
  LRUCache3.prototype.inspect = function() {
    var proxy = new Map();
    var iterator = this.entries(), step;
    while (step = iterator.next(), !step.done)
      proxy.set(step.value[0], step.value[1]);
    Object.defineProperty(proxy, "constructor", {
      value: LRUCache3,
      enumerable: false
    });
    return proxy;
  };
  if (typeof Symbol !== "undefined")
    LRUCache3.prototype[Symbol.for("nodejs.util.inspect.custom")] = LRUCache3.prototype.inspect;
  LRUCache3.from = function(iterable, Keys, Values, capacity) {
    if (arguments.length < 2) {
      capacity = iterables.guessLength(iterable);
      if (typeof capacity !== "number")
        throw new Error("mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.");
    } else if (arguments.length === 2) {
      capacity = Keys;
      Keys = null;
      Values = null;
    }
    var cache = new LRUCache3(Keys, Values, capacity);
    forEach(iterable, function(value, key) {
      cache.set(key, value);
    });
    return cache;
  };
  module2.exports = LRUCache3;
});
var import_downsample = __toModule2(require_downsample());
var import_xxhash_wasm = __toModule2(require_xxhash_wasm());
var XXhash = class {
  constructor() {
    this.loaded = false;
    this.load();
  }
  async h64(x) {
    if (this.loaded === true) {
      return this.xxh64(x);
    } else if (await this.reCheck(1e4) === true) {
      return this.xxh64(x);
    } else {
      console.error("Could not load xxhash-wasm after 10 seconds!");
      return "";
    }
  }
  load() {
    import_xxhash_wasm.default().then((x) => {
      this.xxh64 = x.h64;
      this.loaded = true;
    });
  }
  async reCheck(ms) {
    if (await this.timeout(10) === true) {
      return true;
    } else if (ms - 10 < 0) {
      return false;
    } else {
      return this.reCheck(ms - 10);
    }
  }
  timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms, this.loaded));
  }
};
var Pbf = require_pbf();
var Filter = class {
};
var BloomFilter = class {
  constructor() {
    this.bf = [];
    this.filter = {
      _readField: function(tag, obj, pbf) {
        if (tag === 1) {
          pbf.readPackedFixed32(obj.f);
        } else if (tag === 2) {
          obj.k = pbf.readVarint(true);
        } else if (tag === 3) {
          obj.m = pbf.readVarint(true);
        }
      },
      read: function(pbf, end) {
        return pbf.readFields(this._readField, {
          f: [],
          k: 0,
          m: 0
        }, end);
      }
    };
    this.xxhash = new XXhash();
  }
  load(x, y) {
    this.bf[y] = this.filter.read(new Pbf(x));
    return this.bf[y].f.length > 0 && this.bf[y].k > 0 && this.bf[y].m > 0;
  }
  loadArray(f, k, m, x) {
    this.bf[x] = new Filter();
    this.bf[x].f = f;
    this.bf[x].k = k;
    this.bf[x].m = m;
    return this.bf[x].f.length > 0 && this.bf[x].k > 0 && this.bf[x].m > 0;
  }
  async query(q, f) {
    const h2 = await this.xxhash.h64(q);
    let hk = parseInt(h2.substring(0, 8), 16) % this.bf[f].m;
    const hb = parseInt(h2.substring(8, 16), 16);
    for (let k = this.bf[f].k - 1; k >= 0; k--) {
      if (hk < 0) {
        if ((this.bf[f].f[Math.floor((hk + this.bf[f].m) / 32)] & 1 << (hk + this.bf[f].m) % 32) === 0) {
          return 0;
        }
      } else {
        if ((this.bf[f].f[Math.floor(hk / 32)] & 1 << hk % 32) === 0) {
          return 0;
        }
      }
      hk = (hk + hb) % this.bf[f].m;
    }
    return 1;
  }
};
var c2i = {
  " ": 0,
  a: 1,
  b: 2,
  c: 3,
  d: 4,
  e: 5,
  f: 6,
  g: 7,
  h: 8,
  i: 9,
  j: 10,
  k: 11,
  l: 12,
  m: 13,
  n: 14,
  o: 15,
  p: 16,
  q: 17,
  r: 18,
  s: 19,
  t: 20,
  u: 21,
  v: 22,
  w: 23,
  x: 24,
  y: 25,
  z: 26
};
var injectivePhones = [
  {
    " ": 0.5144053,
    a: 0.5728202,
    b: 0.7156174,
    c: 0.8934104,
    d: 0.6892541,
    e: 0.0606695,
    f: 0.8377482,
    g: 0.7535173,
    h: 0.8632705,
    i: 0,
    j: 1,
    k: 0.8788425,
    l: 0.3045298,
    m: 0.8334726,
    n: 0.7813263,
    o: 0.3749506,
    p: 0.8566013,
    q: 0.3373866,
    r: 0.4219646,
    s: 0.8136482,
    t: 0.8651054,
    u: 0.2728876,
    v: 0.9901208,
    w: 0.7274535,
    x: 0.6486879,
    y: 0.2986934,
    z: 0.5896361
  },
  {
    " ": 0.4626105,
    a: 0.0520072,
    b: 0.0372068,
    c: 0.3376812,
    d: 0.3203732,
    e: 0.6941599,
    f: 0.5684133,
    g: 0.1276463,
    h: 0.6715732,
    i: 0.5963993,
    j: 0.6896528,
    k: 0.1305364,
    l: 0.5948146,
    m: 0.4745938,
    n: 0.6694929,
    o: 0.0370783,
    p: 90573e-7,
    q: 0.2468403,
    r: 0.6075443,
    s: 0.8687147,
    t: 0.5249564,
    u: 0.3807648,
    v: 0.5900379,
    w: 0.4589975,
    x: 0.7866334,
    y: 0,
    z: 1
  },
  {
    " ": 0.4399342,
    a: 0.7141183,
    b: 0.4152828,
    c: 0.7559572,
    d: 0.9396845,
    e: 0.688133,
    f: 0.2307535,
    g: 0.743957,
    h: 0.5600221,
    i: 0.3620303,
    j: 0.353193,
    k: 0.5384151,
    l: 0.4786727,
    m: 0.3282797,
    n: 0.5470637,
    o: 0.7825331,
    p: 0.1943454,
    q: 0.7011107,
    r: 0.2679626,
    s: 0.7792769,
    t: 1,
    u: 0.0970428,
    v: 0,
    w: 0.5445069,
    x: 0.4726587,
    y: 0.3105723,
    z: 0.7005761
  },
  {
    " ": 0.3941421,
    a: 0.3408635,
    b: 0.1874485,
    c: 0.2295147,
    d: 0.3550054,
    e: 0.4858643,
    f: 0,
    g: 0.4521324,
    h: 0.2848427,
    i: 0.2095092,
    j: 0.5783338,
    k: 0.7464389,
    l: 0.6821555,
    m: 0.8020725,
    n: 0.7093604,
    o: 0.5239148,
    p: 0.4693275,
    q: 0.6381095,
    r: 1,
    s: 0.1853494,
    t: 0.1294633,
    u: 0.1114928,
    v: 0.2972201,
    w: 0.5111483,
    x: 0.2863466,
    y: 0.0681106,
    z: 0.1938033
  },
  {
    " ": 0.7740968,
    a: 0.479816,
    b: 0.5371001,
    c: 0.2245294,
    d: 0.7812384,
    e: 0.6417355,
    f: 0.3822414,
    g: 0.3780275,
    h: 0.2287135,
    i: 0.8090604,
    j: 0.4283921,
    k: 0.5821265,
    l: 0.1522962,
    m: 0.5942891,
    n: 1,
    o: 0.44414,
    p: 0.7366599,
    q: 0.1450212,
    r: 0.3614217,
    s: 0.6339128,
    t: 0.6128483,
    u: 0.4288614,
    v: 0.5772154,
    w: 0.3579271,
    x: 0,
    y: 0.4129549,
    z: 0.4131548
  },
  {
    " ": 1,
    a: 0.2576811,
    b: 0.4432953,
    c: 0.6231258,
    d: 0.4441391,
    e: 0.4143082,
    f: 0.410741,
    g: 0.362672,
    h: 0.3328142,
    i: 0.4664387,
    j: 0.5276927,
    k: 0.5623156,
    l: 0.4849456,
    m: 0.2355961,
    n: 0.3348261,
    o: 0.3949976,
    p: 0.6283588,
    q: 0.7911291,
    r: 0.6651722,
    s: 0.4096892,
    t: 0.7051446,
    u: 0.2396915,
    v: 0.5759454,
    w: 0,
    x: 0.5394303,
    y: 0.5170665,
    z: 0.5778543
  },
  {
    " ": 0.8399256,
    a: 0.7361091,
    b: 0.0282645,
    c: 0.5302222,
    d: 0,
    e: 0.5570019,
    f: 0.4482001,
    g: 0.1917753,
    h: 0.6425381,
    i: 0.3689673,
    j: 0.7349129,
    k: 0.3216705,
    l: 0.1775697,
    m: 0.4308594,
    n: 0.2067914,
    o: 1,
    p: 0.1342094,
    q: 0.0724206,
    r: 0.2834001,
    s: 0.4443649,
    t: 0.3266016,
    u: 0.4193598,
    v: 0.5067485,
    w: 0.2472107,
    x: 0.2905846,
    y: 0.2767096,
    z: 0.0693432
  }
];
var phones = [
  {
    " ": 0.4741691,
    a: 0.4965336,
    b: 0.3052932,
    c: 0.2567205,
    d: 0.3811168,
    e: 0.4965336,
    f: 0.1841983,
    g: 0.4226943,
    h: 0.3162891,
    i: 0.3580945,
    j: 0.1829574,
    k: 0.2736326,
    l: 1,
    m: 0.5349669,
    n: 0.4826678,
    o: 0.4965336,
    p: 0.1060198,
    q: 0.9340061,
    r: 0.8679639,
    s: 0.2315562,
    t: 0,
    u: 0.3580945,
    v: 0.0171034,
    w: 0.4965336,
    x: 0.6208216,
    y: 0.3580945,
    z: 0.550991
  },
  {
    " ": 0.5180467,
    a: 0.4940936,
    b: 0.8134794,
    c: 0.4829158,
    d: 0.5728787,
    e: 0.4940936,
    f: 0.3302627,
    g: 0.7327688,
    h: 0.2360982,
    i: 0.6326232,
    j: 0.3786544,
    k: 0.8834334,
    l: 0.5172847,
    m: 0.4499312,
    n: 0.2779488,
    o: 0.4940936,
    p: 1,
    q: 0.7840569,
    r: 0.6793185,
    s: 0.0497405,
    t: 0.4642004,
    u: 0.6326232,
    v: 0.4791167,
    w: 0.4940936,
    x: 0.1713828,
    y: 0.6326232,
    z: 0
  },
  {
    " ": 0.5617527,
    a: 0.4743986,
    b: 0.3607165,
    c: 0.3756257,
    d: 0,
    e: 0.4743986,
    f: 0.6996335,
    g: 0.2239968,
    h: 0.6000965,
    i: 0.750567,
    j: 0.8812881,
    k: 0.4980718,
    l: 0.6685684,
    m: 0.3449982,
    n: 0.0916315,
    o: 0.4743986,
    p: 0.599918,
    q: 0.4238049,
    r: 0.9730513,
    s: 0.3334574,
    t: 0.3968823,
    u: 0.750567,
    v: 1,
    w: 0.4743986,
    x: 0.7446887,
    y: 0.750567,
    z: 0.4665964
  },
  {
    " ": 0.6985572,
    a: 0.2229222,
    b: 0.2342911,
    c: 0.5371083,
    d: 0.642079,
    e: 0.2229222,
    f: 0.1542805,
    g: 0.3916729,
    h: 0.2926956,
    i: 0.3870468,
    j: 0.5313921,
    k: 0.6119757,
    l: 0.4146329,
    m: 0,
    n: 0.2588292,
    o: 0.2229222,
    p: 0.4289748,
    q: 0.6435603,
    r: 0.6489516,
    s: 0.5188652,
    t: 1,
    u: 0.3870468,
    v: 0.3455402,
    w: 0.2229222,
    x: 0.4702166,
    y: 0.3870468,
    z: 0.7408477
  },
  {
    " ": 0.5048927,
    a: 0.5003,
    b: 0.1179955,
    c: 0,
    d: 0.4654195,
    e: 0.5003,
    f: 0.057103,
    g: 0.2663222,
    h: 0.2319604,
    i: 0.850276,
    j: 0.5546483,
    k: 0.5902124,
    l: 0.3203018,
    m: 0.7780515,
    n: 1,
    o: 0.5003,
    p: 0.402271,
    q: 0.052085,
    r: 0.6572023,
    s: 0.4400914,
    t: 0.4972221,
    u: 0.850276,
    v: 0.3549538,
    w: 0.5003,
    x: 0.0379218,
    y: 0.850276,
    z: 0.2860163
  },
  {
    " ": 1,
    a: 0.0749502,
    b: 0.408011,
    c: 0.082416,
    d: 0.2185498,
    e: 0.0749502,
    f: 0.4740182,
    g: 0.0329981,
    h: 0.0502128,
    i: 81126e-7,
    j: 0.0131708,
    k: 0,
    l: 0.247062,
    m: 0.2734508,
    n: 0.4124314,
    o: 0.0749502,
    p: 0.3862765,
    q: 0.2408196,
    r: 0.2006884,
    s: 0.1928755,
    t: 0.1474644,
    u: 81126e-7,
    v: 0.4041012,
    w: 0.0749502,
    x: 0.1335433,
    y: 81126e-7,
    z: 0.2924244
  },
  {
    " ": 0.8859773,
    a: 0.3575167,
    b: 0.1579149,
    c: 0.9862172,
    d: 0.1896906,
    e: 0.8859773,
    f: 0.2920109,
    g: 0.6552662,
    h: 0.7217436,
    i: 0.4318291,
    j: 0.7437385,
    k: 0.6892378,
    l: 0.2382954,
    m: 1,
    n: 0.4485122,
    o: 0.8859773,
    p: 0.1697505,
    q: 0.5388942,
    r: 0.2901641,
    s: 0.3404002,
    t: 0.5369747,
    u: 0.4318291,
    v: 0.2459939,
    w: 0.8859773,
    x: 0.7970067,
    y: 0.4318291,
    z: 0
  }
];
var import_lodash = __toModule2(require_lodash());
var import_xregexp = __toModule2(require_lib());
var u = {
  LatinLowerCase: "\\u0061-\\u007A\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0101\\u0103\\u0103\\u0105\\u0105\\u0107\\u0107\\u0109\\u0109\\u010B\\u010B\\u010D\\u010D\\u010F\\u010F\\u0111\\u0111\\u0113\\u0113\\u0115\\u0115\\u0117\\u0117\\u0119\\u0119\\u011B\\u011B\\u011D\\u011D\\u011F\\u011F\\u0121\\u0121\\u0123\\u0123\\u0125\\u0125\\u0127\\u0127\\u0129\\u0129\\u012B\\u012B\\u012D\\u012D\\u012F\\u012F\\u0131\\u0131\\u0133\\u0133\\u0135\\u0135\\u0137-\\u0138\\u013A\\u013A\\u013C\\u013C\\u013E\\u013E\\u0140\\u0140\\u0142\\u0142\\u0144\\u0144\\u0146\\u0146\\u0148-\\u0149\\u014B\\u014B\\u014D\\u014D\\u014F\\u014F\\u0151\\u0151\\u0153\\u0153\\u0155\\u0155\\u0157\\u0157\\u0159\\u0159\\u015B\\u015B\\u015D\\u015D\\u015F\\u015F\\u0161\\u0161\\u0163\\u0163\\u0165\\u0165\\u0167\\u0167\\u0169\\u0169\\u016B\\u016B\\u016D\\u016D\\u016F\\u016F\\u0171\\u0171\\u0173\\u0173\\u0175\\u0175\\u0177\\u0177\\u017A\\u017A\\u017C\\u017C\\u017E-\\u0180\\u0183\\u0183\\u0185\\u0185\\u0188\\u0188\\u018C-\\u018D\\u0192\\u0192\\u0195\\u0195\\u0199-\\u019B\\u019E\\u019E\\u01A1\\u01A1\\u01A3\\u01A3\\u01A5\\u01A5\\u01A8\\u01A8\\u01AB\\u01AB\\u01AD\\u01AD\\u01B0\\u01B0\\u01B4\\u01B4\\u01B6\\u01B6\\u01B9-\\u01BA\\u01BD\\u01BD\\u01C6\\u01C6\\u01C9\\u01C9\\u01CC\\u01CC\\u01CE\\u01CE\\u01D0\\u01D0\\u01D2\\u01D2\\u01D4\\u01D4\\u01D6\\u01D6\\u01D8\\u01D8\\u01DA\\u01DA\\u01DC-\\u01DD\\u01DF\\u01DF\\u01E1\\u01E1\\u01E3\\u01E3\\u01E5\\u01E5\\u01E7\\u01E7\\u01E9\\u01E9\\u01EB\\u01EB\\u01ED\\u01ED\\u01EF-\\u01F0\\u01F3\\u01F3\\u01F5\\u01F5\\u01F9\\u01F9\\u01FB\\u01FB\\u01FD\\u01FD\\u01FF\\u01FF",
  LatinUpperCase: "\\u0041-\\u005A\\u00C0-\\u00D6\\u00D8-\\u00DE\\u0100\\u0100\\u0102\\u0102\\u0104\\u0104\\u0106\\u0106\\u0108\\u0108\\u010A\\u010A\\u010C\\u010C\\u010E\\u010E\\u0110\\u0110\\u0112\\u0112\\u0114\\u0114\\u0116\\u0116\\u0118\\u0118\\u011A\\u011A\\u011C\\u011C\\u011E\\u011E\\u0120\\u0120\\u0122\\u0122\\u0124\\u0124\\u0126\\u0126\\u0128\\u0128\\u012A\\u012A\\u012C\\u012C\\u012E\\u012E\\u0130\\u0130\\u0132\\u0132\\u0134\\u0134\\u0136\\u0136\\u0139\\u0139\\u013B\\u013B\\u013D\\u013D\\u013F\\u013F\\u0141\\u0141\\u0143\\u0143\\u0145\\u0145\\u0147\\u0147\\u014A\\u014A\\u014C\\u014C\\u014E\\u014E\\u0150\\u0150\\u0152\\u0152\\u0154\\u0154\\u0156\\u0156\\u0158\\u0158\\u015A\\u015A\\u015C\\u015C\\u015E\\u015E\\u0160\\u0160\\u0162\\u0162\\u0164\\u0164\\u0166\\u0166\\u0168\\u0168\\u016A\\u016A\\u016C\\u016C\\u016E\\u016E\\u0170\\u0170\\u0172\\u0172\\u0174\\u0174\\u0176\\u0176\\u0178-\\u0179\\u017B\\u017B\\u017D\\u017D\\u0181-\\u0182\\u0184\\u0184\\u0186-\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193-\\u0194\\u0196-\\u0198\\u019C-\\u019D\\u019F-\\u01A0\\u01A2\\u01A2\\u01A4\\u01A4\\u01A7\\u01A7\\u01A9\\u01A9\\u01AC\\u01AC\\u01AE-\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B5\\u01B7-\\u01B8\\u01BC\\u01BC\\u01C4-\\u01C5\\u01C7-\\u01C8\\u01CA-\\u01CB\\u01CD\\u01CD\\u01CF\\u01CF\\u01D1\\u01D1\\u01D3\\u01D3\\u01D5\\u01D5\\u01D7\\u01D7\\u01D9\\u01D9\\u01DB\\u01DB\\u01DE\\u01DE\\u01E0\\u01E0\\u01E2\\u01E2\\u01E4\\u01E4\\u01E6\\u01E6\\u01E8\\u01E8\\u01EA\\u01EA\\u01EC\\u01EC\\u01EE\\u01EE\\u01F1-\\u01F2\\u01F4\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FA\\u01FC\\u01FC\\u01FE\\u01FE",
  alpha: "\\u{03B1}\\u{237A}\\u{1D6C2}\\u{1D6FC}\\u{1D736}\\u{1D770}\\u{1D7AA}",
  beta: "\\u{03B2}\\u{1D5D}\\u{1D66}\\u{1D6C3}\\u{1D6FD}\\u{1D737}\\u{1D771}\\u{1D7AB}",
  bracketOpen: "\\u007B\\u0028\\u005B",
  bracketClose: "\\u007D\\u0029\\u005D",
  cross: "\\u00D7\\u2A2F\\u2715\\u2A09\\u2716",
  dagger: "\\u2020",
  gamma: "\\u{03B3}\\u{1D67}\\u{0194}\\u{0263}\\u{0264}\\u{1D6C4}\\u{1D6FE}\\u{1D7AC}\\u{02E0}\\u{1D5E}",
  quoteOpen: "\\u00AB\\u2039\\u201C\\u201F\\u2018\\u201B\\u0022\\u275B\\u275D\\u276E\\uFF02\\u0027",
  quoteClose: "\\u0022\\u0027\\u00BB\\u2019\\u201A\\u201D\\u201E\\u203A\\u275C\\u276F\\u301D\\u301E\\u301F\\uFF02",
  restrictedPunctuation: "\\u2000-\\u200F\\u2016\\u2017\\u2021-\\u2023\\u2025-\\u2031\\u203B-\\u204D\\u204F-\\u205E"
};
function bufferCapture(_m, x, _o, _s) {
  return " " + x + " ";
}
function genusClean(_m, x, y, z, _o, _s) {
  let n = "";
  if (x.length > 0) {
    n = "\u2A09";
  }
  return n + y + z;
}
function insertSpace(_m, x, y, _o, _s) {
  return x + " " + y;
}
function nomenClean(_m, x, y, z, _o, _s) {
  let n = "";
  if (x.length > 0) {
    n = "\u2A09";
  }
  return n + y + z;
}
function spp(_m, p, _o, _s) {
  return "s" + p + ".";
}
function sspp(_m, p, _o, _s) {
  return "subs" + p + ".";
}
var RegularExpression = class {
  constructor() {
    this.ABBRGENUS = new RegExp("^[" + u.LatinUpperCase + "]{1,2}[.]$");
    this.abbrGenus = new RegExp("^[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{0,1}[.]$");
    this.ABBRSPECIES = new RegExp("^[" + u.LatinUpperCase + "][.]$");
    this.abbrSpecies = new RegExp("^[" + u.LatinUpperCase + u.LatinLowerCase + "][.]$");
    this.AFF = new RegExp(/^AFF\.|AFFIN\.|SP\.AFF\.$/);
    this.aff = new RegExp(/^aff\.|affin\.|sp\.aff\.$/);
    this.antiASCIIlowerCase = new RegExp(/[^a-z]/, "g");
    this.antiLowerCase = new RegExp("[^" + u.LatinLowerCase + u.cross + ".]", "g");
    this.antiUpperCase = new RegExp("[^" + u.LatinUpperCase + "]", "g");
    this.AUTHORSTUFF = new RegExp(/^(?:&|AND|EMEND\.|ET|EX|IN)$/);
    this.authorStuff = new RegExp(/^(?:&|and|emend\.|et|ex|in)$/);
    this.CF = new RegExp(/^C\.{0,1}F\.$/);
    this.cf = new RegExp(/^c\.{0,1}f\.$/);
    this.closingExtras = new RegExp("[" + u.quoteClose + u.quoteOpen + u.bracketOpen + u.bracketClose + "]");
    this.cruff = new RegExp(/[ɨⅱaắằẵẳặấầẫẩậǎảȃạªbcdḍeếềễểệẽẻẹəfgǵǧhḩḥiǐỉịjkḱlḷmnṅṇoốồỗổộỏọơớờỡởợºpqrṛṟsṡșṣtțṭṯuǔủụưứừữửựvwxyỳỹȳỷzẓ]/, "g");
    this.dash = import_xregexp.default("[\\p{Dash_Punctuation}]", "g");
    this.dashEnd = new RegExp(/-\n/, "g");
    this.dashPlus = new RegExp(/-+/, "g");
    this.end = new RegExp("[!?*=\\/:;," + u.dagger + u.quoteClose + u.bracketClose + "-]$");
    this.endLine = new RegExp(/\n/, "g");
    this.endPeriod = new RegExp(/[.]$/);
    this.FM = new RegExp(/^(?:F\.|FM\.|FO\.|FMA\.|FORM|MORPH)$/);
    this.fm = new RegExp(/^(?:f\.|fm\.|fo\.|fma\.|form|morph)$/);
    this.fmSymbol = new RegExp("^[" + u.gamma + "]$", "u");
    this.html = new RegExp("<[^/].*?>|</.+?>", "g");
    this.leadingSpace = new RegExp(/^ +/);
    this.lineEnding = new RegExp(/\r\n|\r|\n/, "g");
    this.missingSpace = new RegExp("([" + u.LatinUpperCase + "][.])([" + u.LatinUpperCase + u.LatinLowerCase + "]{2,})", "g");
    this.Namish = new RegExp("^[" + u.LatinUpperCase + "]{0,1}[" + u.LatinLowerCase + "]{1,}[" + u.dagger + u.quoteClose + u.bracketClose + "!?*=\\/:,;.]{0,}$");
    this.NAMISH = new RegExp("^[" + u.LatinUpperCase + "]{1,}[" + u.dagger + u.quoteClose + u.bracketClose + "!?*=\\/:,;.]{0,}$");
    this.namish = new RegExp("^[" + u.LatinLowerCase + "]{2,}[" + u.dagger + u.quoteClose + u.bracketClose + "!?*=\\/:,;.]{0,}$");
    this.nomen = new RegExp("^([" + u.cross + "]{0,1})([" + u.LatinUpperCase + "]{0,1}[" + u.LatinLowerCase + "]{1,})([.]{0,1})$");
    this.nomenNudem = new RegExp("(?=(?:(?:(?:[" + u.cross + u.dagger + u.quoteOpen + u.bracketOpen + "x-]{1,2}| {1,1})((?:[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{1,}|[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{0,1}[.])|(?:[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{1,}|[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{0,1}[.]) [" + u.cross + "Xx] (?:[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{1,}|[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{0,1}[.])) (?:(?:[?]|aff[.]|affin[.]|sp[.]aff[.]|sp[.] aff[.]|sp[.]affin[.]|sp[.] affin[.]|cf[.]) ){0,1}(?:(?:(?:sect[.] |\xA7)(?:[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{1,}|[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{0,1}[.]) )|(?:(?:[(](?:[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{1,}|[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{0,1}[.])[)] ))){0,1}(?:[" + u.cross + "]|(?:[" + u.cross + "Xx] )){0,1}((?:sp{1,2}[.])|[" + u.LatinLowerCase + "][.]|[" + u.LatinUpperCase + "]{0,1}[" + u.LatinLowerCase + "]{2,})))|(?:(?:(?:[" + u.cross + u.dagger + u.quoteOpen + u.bracketOpen + "x-]{1,2}| {1,1})((?:[" + u.LatinUpperCase + "]{2,}|[" + u.LatinUpperCase + "]{1,2}[.])|(?:[" + u.LatinUpperCase + "]{2,}|[" + u.LatinUpperCase + "]{1,2}[.]) [" + u.cross + "Xx] (?:[" + u.LatinUpperCase + "]{2,}|[" + u.LatinUpperCase + "]{1,2}[.])) (?:(?:[?]|AFF[.]|AFFIN[.]|SP[.]AFF[.]|SP[.] AFF[.]|SP[.]AFFIN[.]|SP[.] AFFIN[.]|CF[.]) ){0,1}(?:(?:(?:SECT[.] |\xA7)(?:[" + u.LatinUpperCase + "]{2,}|[" + u.LatinUpperCase + "]{1,2}[.]) )|(?:(?:[(](?:[" + u.LatinUpperCase + "]{2,}|[" + u.LatinUpperCase + "]{1,2}[.])[)] ))){0,1}(?:[" + u.cross + "]|(?:[" + u.cross + "Xx] )){0,1}((?:SP{1,2}[.])|[" + u.LatinLowerCase + "][.]|[" + u.LatinUpperCase + "]{2,})))).", "g");
    this.notho = new RegExp("^[" + u.cross + "Xx]$");
    this.NOTHOGENUS = new RegExp("^([" + u.cross + "x])([" + u.LatinUpperCase + "]{1,})([.]{0,1})$");
    this.nothogenus = new RegExp("^([" + u.cross + "Xx])([" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{1,})([.]{0,1})$");
    this.NOTHOGENUSFORMULA = new RegExp("^[" + u.LatinUpperCase + "](?:(?:[" + u.LatinUpperCase + "]{1,})|(?:[" + u.LatinUpperCase + "]{0,1}[.])) [" + u.cross + "Xx] [" + u.LatinUpperCase + "](?:(?:[" + u.LatinUpperCase + "]{1,})|(?:[" + u.LatinUpperCase + "]{0,1}[.]))$");
    this.nothoGenusFormula = new RegExp("^[" + u.LatinUpperCase + "](?:(?:[" + u.LatinLowerCase + "]{1,})|(?:[" + u.LatinLowerCase + "]{0,1}[.])) [" + u.cross + "Xx] [" + u.LatinUpperCase + "](?:(?:[" + u.LatinLowerCase + "]{1,})|(?:[" + u.LatinLowerCase + "]{0,1}[.]))$");
    this.NOTHOSPECIES = new RegExp("^([" + u.cross + "]|(?:[" + u.cross + "x](?=[" + u.LatinUpperCase + "])))([" + u.LatinUpperCase + "]{1,})([.]{0,1})$");
    this.nothospecies = new RegExp("^([" + u.cross + "]|(?:[" + u.cross + "x](?=[" + u.LatinUpperCase + "])))([" + u.LatinUpperCase + "]{0,1}[" + u.LatinLowerCase + "]{1,})([.]{0,1})$");
    this.openingExtras = new RegExp("^[ " + u.dagger + u.quoteOpen + u.bracketOpen + "-]+", "g");
    this.pluralPossesive = new RegExp(/[\u0027\u2019\u275C]s /, "g");
    this.question = new RegExp(/^[?]$/);
    this.questionable = new RegExp("[" + u.bracketOpen + "][ ]+[?][ ]+[" + u.bracketClose + "]", "g");
    this.SECT = new RegExp(/^SECT\./);
    this.sect = new RegExp(/^sect\./);
    this.sectionAbbr = new RegExp(/^[§(]/);
    this.separator = import_xregexp.default("\\p{Separator}+", "g");
    this.sp = new RegExp(/^s(p{1,2})[.]{0,1}$/);
    this.spaceDashEnd = new RegExp(/ -\n/, "g");
    this.spacePlus = new RegExp(/ +/, "g");
    this.SPECIES = new RegExp(/^(?:SP{1,2}[.]{0,1})|SPECIES$/);
    this.species = new RegExp(/^(?:sp{1,2}[.]{0,1})|species$/);
    this.ssp = new RegExp(/^s(?:ub){0,1}s(p{1,2})[.]{0,1}$/);
    this.SUBSP = new RegExp(/^S(?:UB){0,1}S(?:P{1,2})[.]{0,1}$/);
    this.subsp = new RegExp(/^s(?:ub){0,1}s(?:p{1,2})[.]{0,1}$/);
    this.subspSymbol = new RegExp("^[" + u.alpha + "]$", "u");
    this.symbolRemoval = new RegExp(/([!?*=~:;,|+\/0-9]+)/, "g");
    this.synonym = new RegExp("[(][ ]+=[ ]+(?:(?:[" + u.LatinUpperCase + "][" + u.LatinLowerCase + "]{1,})|(?:[" + u.LatinUpperCase + "]{2,}))[ ]{0,1}[)]", "g");
    this.trailingSpace = new RegExp(/ +$/);
    this.unusualPunctuation = new RegExp("[" + u.restrictedPunctuation + "]+", "g");
    this.VAR = new RegExp(/^(?:VARIETY|VAR\.)$/);
    this.var = new RegExp(/^(?:variety|var\.)$/);
    this.varSymbol = new RegExp("^[" + u.beta + "]$", "u");
  }
  abbreviatedGenus(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true) {
        return this.ABBRGENUS.test(x);
      } else {
        return this.abbrGenus.test(x);
      }
    } else {
      return false;
    }
  }
  abbreviatedSection(x) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else {
        return this.sectionAbbr.test(x);
      }
    } else {
      return false;
    }
  }
  abbreviatedSpecies(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true) {
        return this.ABBRSPECIES.test(x);
      } else {
        return this.abbrSpecies.test(x);
      }
    } else {
      return false;
    }
  }
  affinis(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true) {
        return this.AFF.test(x);
      } else {
        return this.aff.test(x);
      }
    } else {
      return false;
    }
  }
  ambiguousSpecies(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true) {
        return this.SPECIES.test(x);
      } else {
        return this.species.test(x);
      }
    } else {
      return false;
    }
  }
  authorString(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true) {
        return this.AUTHORSTUFF.test(x);
      } else {
        return this.authorStuff.test(x);
      }
    } else {
      return false;
    }
  }
  conferatur(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true) {
        return this.CF.test(x);
      } else {
        return this.cf.test(x);
      }
    } else {
      return false;
    }
  }
  endName(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (this.end.test(x) === true) {
        return true;
      } else if (c === true && this.ABBRSPECIES.test(x) === true) {
        return false;
      } else if (c === false && this.abbrSpecies.test(x) === true) {
        return false;
      } else {
        return this.endPeriod.test(x);
      }
    } else {
      return false;
    }
  }
  forma(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true && this.FM.test(x) === true) {
        return true;
      } else if (c === false && this.fm.test(x) === true) {
        return true;
      } else {
        return this.fmSymbol.test(x);
      }
    } else {
      return false;
    }
  }
  name(x, i2, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else {
        const y = x.split(/-/);
        for (let k = y.length - 1; k >= 0; k--) {
          if (c === true && this.NAMISH.test(y[k]) === false) {
            return false;
          } else if (c === false && i2 === true && this.Namish.test(y[k]) === false) {
            return false;
          } else if (c === false && i2 === false && this.namish.test(y[k]) === false) {
            return false;
          }
        }
        return true;
      }
    } else {
      return false;
    }
  }
  nGenus(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true) {
        return this.NOTHOGENUS.test(x);
      } else {
        return this.nothogenus.test(x);
      }
    } else {
      return false;
    }
  }
  nothoFormula(x) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else {
        return this.notho.test(x);
      }
    } else {
      return false;
    }
  }
  nothogenusFormula(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true) {
        return this.NOTHOGENUSFORMULA.test(x);
      } else {
        return this.nothoGenusFormula.test(x);
      }
    } else {
      return false;
    }
  }
  nSpecies(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true) {
        return this.NOTHOSPECIES.test(x);
      } else {
        return this.nothospecies.test(x);
      }
    } else {
      return false;
    }
  }
  questionMark(x) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else {
        return this.question.test(x);
      }
    } else {
      return false;
    }
  }
  section(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true) {
        return this.SECT.test(x);
      } else {
        return this.sect.test(x);
      }
    } else {
      return false;
    }
  }
  speciesAffinis(x, y, c) {
    if (this.string(x) === true && this.string(y) === true) {
      if (x == null || y == null) {
        return false;
      } else if (c === true) {
        return this.SPECIES.test(x) && this.AFF.test(y);
      } else {
        return this.species.test(x) && this.aff.test(y);
      }
    } else {
      return false;
    }
  }
  string(x) {
    return Object.prototype.toString.call(x) === "[object String]";
  }
  subspecies(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true && this.SUBSP.test(x) === true) {
        return true;
      } else if (c === false && this.subsp.test(x) === true) {
        return true;
      } else {
        return this.subspSymbol.test(x);
      }
    } else {
      return false;
    }
  }
  variety(x, c) {
    if (this.string(x) === true) {
      if (x == null) {
        return false;
      } else if (c === true && this.VAR.test(x) === true) {
        return true;
      } else if (c === false && this.var.test(x) === true) {
        return true;
      } else {
        return this.varSymbol.test(x);
      }
    } else {
      return false;
    }
  }
};
var Flatten = class {
  constructor() {
    this.exchage = {
      \u0268: "i",
      \u2171: "i",
      a: "a",
      \u1EAF: "a",
      \u1EB1: "a",
      \u1EB5: "a",
      \u1EB3: "a",
      \u1EB7: "a",
      \u1EA5: "a",
      \u1EA7: "a",
      \u1EAB: "a",
      \u1EA9: "a",
      \u1EAD: "a",
      \u01CE: "a",
      \u1EA3: "a",
      \u0203: "a",
      \u1EA1: "a",
      \u00AA: "a",
      b: "b",
      c: "c",
      d: "d",
      \u1E0D: "d",
      e: "e",
      \u1EBF: "e",
      \u1EC1: "e",
      \u1EC5: "e",
      \u1EC3: "e",
      \u1EC7: "e",
      \u1EBD: "e",
      \u1EBB: "e",
      \u1EB9: "e",
      \u0259: "e",
      f: "f",
      g: "g",
      \u01F5: "g",
      \u01E7: "g",
      h: "h",
      \u1E29: "h",
      \u1E25: "h",
      i: "i",
      \u01D0: "i",
      \u1EC9: "i",
      \u1ECB: "i",
      j: "j",
      k: "k",
      \u1E31: "k",
      l: "l",
      \u1E37: "l",
      m: "m",
      n: "n",
      \u1E45: "n",
      \u1E47: "n",
      o: "o",
      \u1ED1: "o",
      \u1ED3: "o",
      \u1ED7: "o",
      \u1ED5: "o",
      \u1ED9: "o",
      \u1ECF: "o",
      \u1ECD: "o",
      \u01A1: "o",
      \u1EDB: "o",
      \u1EDD: "o",
      \u1EE1: "o",
      \u1EDF: "o",
      \u1EE3: "o",
      \u00BA: "o",
      p: "p",
      q: "q",
      r: "r",
      \u1E5B: "r",
      \u1E5F: "r",
      s: "s",
      \u1E61: "s",
      \u0219: "s",
      \u1E63: "s",
      t: "t",
      \u021B: "t",
      \u1E6D: "t",
      \u1E6F: "t",
      u: "u",
      \u01D4: "u",
      \u1EE7: "u",
      \u1EE5: "u",
      \u01B0: "u",
      \u1EE9: "u",
      \u1EEB: "u",
      \u1EEF: "u",
      \u1EED: "u",
      \u1EF1: "u",
      v: "v",
      w: "w",
      x: "x",
      y: "y",
      \u1EF3: "y",
      \u1EF9: "y",
      \u0233: "y",
      \u1EF7: "y",
      z: "z",
      \u1E93: "z"
    };
    this.regularExpression = new RegularExpression();
  }
  squash(x) {
    return import_lodash.deburr(x.normalize("NFC").toLowerCase()).replace(this.regularExpression.cruff, (y) => {
      return this.exchage[y];
    });
  }
};
var Model2 = class {
};
var Model = Model2;
Model.SInit = (() => {
  Model2.prototype.bedffnn = {
    inputInt: false,
    loaded: false,
    network: true,
    width: 5
  };
  Model2.prototype.bf = {
    inputInt: false,
    loaded: false,
    network: false,
    width: 0
  };
  Model2.prototype.ecnn = {
    inputInt: false,
    loaded: false,
    network: true,
    width: 112
  };
  Model2.prototype.kluge = {
    inputInt: false,
    loaded: false,
    network: false,
    width: 0
  };
  Model2.prototype.lcnn = {
    inputInt: true,
    loaded: false,
    network: true,
    width: 58
  };
  Model2.prototype.pdffnn = {
    inputInt: true,
    loaded: false,
    network: true,
    width: 64
  };
  Model2.prototype.uedffnn = {
    inputInt: false,
    loaded: false,
    network: true,
    width: 5
  };
})();
var pseudosyllables = [
  [new RegExp("...a."), new RegExp("...c."), new RegExp("...d."), new RegExp("...e."), new RegExp("...g."), new RegExp("...h."), new RegExp("...i."), new RegExp("...k."), new RegExp("...l."), new RegExp("...m."), new RegExp("...n."), new RegExp("...o."), new RegExp("...p."), new RegExp("...r."), new RegExp("...s."), new RegExp("...t."), new RegExp("...u."), new RegExp("...v."), new RegExp("...y."), new RegExp("...z."), new RegExp("..e$"), new RegExp("..s$"), new RegExp(".s$"), new RegExp("^.e"), new RegExp("^.e."), new RegExp("^.i"), new RegExp("^n"), new RegExp("^n."), new RegExp("^n.."), new RegExp("e..$"), new RegExp("s$")],
  [new RegExp(".a..."), new RegExp(".b..."), new RegExp(".c..."), new RegExp(".d..."), new RegExp(".e$"), new RegExp(".e.$"), new RegExp(".e..."), new RegExp(".g..."), new RegExp(".h..."), new RegExp(".i..."), new RegExp(".k..."), new RegExp(".l..."), new RegExp(".m..."), new RegExp(".n.$"), new RegExp(".n..."), new RegExp(".o.."), new RegExp(".o..."), new RegExp(".p..."), new RegExp(".r.."), new RegExp(".r..."), new RegExp(".s..."), new RegExp(".t..."), new RegExp(".u..."), new RegExp(".v..."), new RegExp(".y..."), new RegExp(".z..."), new RegExp("^..e"), new RegExp("e$"), new RegExp("e.$"), new RegExp("i..$"), new RegExp("n.$")],
  [new RegExp("..a.."), new RegExp("..b.."), new RegExp("..c.."), new RegExp("..d.."), new RegExp("..e.."), new RegExp("..g.."), new RegExp("..h.."), new RegExp("..i$"), new RegExp("..i."), new RegExp("..i.."), new RegExp("..k.."), new RegExp("..l.."), new RegExp("..m.."), new RegExp("..n."), new RegExp("..n.."), new RegExp("..o.."), new RegExp("..p.."), new RegExp("..r."), new RegExp("..r.."), new RegExp("..s.."), new RegExp("..t.."), new RegExp("..u.."), new RegExp("..v.."), new RegExp("..w.."), new RegExp("..y.."), new RegExp("..z.."), new RegExp(".i$"), new RegExp("^.i."), new RegExp("^.o"), new RegExp("^.o."), new RegExp("i$")],
  [new RegExp("..al."), new RegExp("..an."), new RegExp("..en."), new RegExp("..er."), new RegExp("..st."), new RegExp("..te."), new RegExp(".a.."), new RegExp(".an.."), new RegExp(".ar.."), new RegExp(".c.."), new RegExp(".d.."), new RegExp(".e.."), new RegExp(".en.."), new RegExp(".er.."), new RegExp(".g.."), new RegExp(".h.."), new RegExp(".i.."), new RegExp(".k.."), new RegExp(".l.."), new RegExp(".m.$"), new RegExp(".m.."), new RegExp(".n.."), new RegExp(".o."), new RegExp(".o.a."), new RegExp(".p.."), new RegExp(".s.."), new RegExp(".t.."), new RegExp(".u.."), new RegExp(".z.."), new RegExp("^s"), new RegExp("m.$")],
  [new RegExp("...b."), new RegExp("...j."), new RegExp("...w."), new RegExp("..a."), new RegExp("..b."), new RegExp("..c."), new RegExp("..d."), new RegExp("..e."), new RegExp("..g."), new RegExp("..h."), new RegExp("..k."), new RegExp("..l."), new RegExp("..m."), new RegExp("..o."), new RegExp("..p."), new RegExp("..ra."), new RegExp("..s."), new RegExp("..t."), new RegExp("..u."), new RegExp("..v."), new RegExp("..y."), new RegExp("..z."), new RegExp(".a.e."), new RegExp(".a.i."), new RegExp(".an."), new RegExp(".e.e."), new RegExp(".en."), new RegExp(".er."), new RegExp(".n."), new RegExp(".n.e."), new RegExp(".r.")],
  [new RegExp(".a."), new RegExp(".b."), new RegExp(".b.."), new RegExp(".c."), new RegExp(".d."), new RegExp(".e."), new RegExp(".g."), new RegExp(".h."), new RegExp(".i."), new RegExp(".ie."), new RegExp(".ie.."), new RegExp(".j.."), new RegExp(".k."), new RegExp(".l."), new RegExp(".m."), new RegExp(".p."), new RegExp(".ra."), new RegExp(".s."), new RegExp(".st."), new RegExp(".st.."), new RegExp(".t."), new RegExp(".te."), new RegExp(".u."), new RegExp(".v."), new RegExp(".v.."), new RegExp(".w.."), new RegExp(".w..."), new RegExp(".y."), new RegExp(".y.."), new RegExp(".z."), new RegExp("^..r")],
  [new RegExp("..f.."), new RegExp("..in."), new RegExp("..j."), new RegExp("..j.."), new RegExp("..n$"), new RegExp("..ne."), new RegExp("..ni."), new RegExp("..re."), new RegExp("..w."), new RegExp(".al."), new RegExp(".al.."), new RegExp(".ar."), new RegExp(".in."), new RegExp(".n$"), new RegExp(".ne."), new RegExp(".ni."), new RegExp(".ra.."), new RegExp(".re."), new RegExp(".ro."), new RegExp(".te.."), new RegExp(".w."), new RegExp("^.a"), new RegExp("^.a."), new RegExp("^ne"), new RegExp("^ne."), new RegExp("^p"), new RegExp("^p."), new RegExp("^p.."), new RegExp("^s."), new RegExp("^s.."), new RegExp("n$")],
  [new RegExp("..m$"), new RegExp(".a.a."), new RegExp(".ch.."), new RegExp(".e.a."), new RegExp(".e.i."), new RegExp(".e.o."), new RegExp(".e.s."), new RegExp(".e.t."), new RegExp(".f."), new RegExp(".f..."), new RegExp(".i.$"), new RegExp(".in.."), new RegExp(".j."), new RegExp(".j..."), new RegExp(".la.."), new RegExp(".li.."), new RegExp(".m$"), new RegExp(".ne.."), new RegExp(".ni.."), new RegExp(".or.."), new RegExp(".re.."), new RegExp(".ri.."), new RegExp(".ro.."), new RegExp(".s.e."), new RegExp("^..s"), new RegExp("^.r"), new RegExp("^.r."), new RegExp("a..$"), new RegExp("i.$"), new RegExp("m$"), new RegExp("n..$")],
  [new RegExp("...f."), new RegExp("..a$"), new RegExp("..ar."), new RegExp("..at."), new RegExp("..ch."), new RegExp("..el."), new RegExp("..ic."), new RegExp("..la."), new RegExp("..li."), new RegExp("..on."), new RegExp("..ov."), new RegExp("..ow."), new RegExp("..ri."), new RegExp("..ro."), new RegExp("..ti."), new RegExp(".a$"), new RegExp(".ch."), new RegExp(".el."), new RegExp(".en$"), new RegExp(".es."), new RegExp(".f.."), new RegExp(".o.e."), new RegExp(".on."), new RegExp(".or."), new RegExp(".r.e."), new RegExp(".ri."), new RegExp("^.ie"), new RegExp("a$"), new RegExp("en$"), new RegExp("s..$"), new RegExp("t..$")],
  [new RegExp("..de."), new RegExp("..f."), new RegExp("..ie."), new RegExp("..o$"), new RegExp("..or."), new RegExp(".a.o."), new RegExp(".at."), new RegExp(".de."), new RegExp(".el.."), new RegExp(".es.."), new RegExp(".i.a."), new RegExp(".ic."), new RegExp(".is."), new RegExp(".la."), new RegExp(".le."), new RegExp(".le.."), new RegExp(".li."), new RegExp(".o$"), new RegExp(".on.."), new RegExp(".os."), new RegExp(".ov."), new RegExp(".ow."), new RegExp(".ta."), new RegExp(".ta.."), new RegExp(".va."), new RegExp(".va.."), new RegExp("^..n"), new RegExp("^ni"), new RegExp("^ni."), new RegExp("o$"), new RegExp("r..$")],
  [new RegExp("..ac."), new RegExp("..es."), new RegExp("..ge."), new RegExp("..le."), new RegExp("..ng."), new RegExp("..va."), new RegExp(".a.$"), new RegExp(".ac."), new RegExp(".as."), new RegExp(".as.."), new RegExp(".at.."), new RegExp(".e.n."), new RegExp(".et."), new RegExp(".is.."), new RegExp(".lo."), new RegExp(".nd."), new RegExp(".ng."), new RegExp(".o.i."), new RegExp(".r.n."), new RegExp(".s.i."), new RegExp(".t.$"), new RegExp(".ti.."), new RegExp("^..a"), new RegExp("^..o"), new RegExp("^.u"), new RegExp("^.u."), new RegExp("^n.e"), new RegExp("^nie"), new RegExp("a.$"), new RegExp("o..$"), new RegExp("t.$")],
  [new RegExp("..ia."), new RegExp("..ko."), new RegExp("..lo."), new RegExp("..na."), new RegExp("..nd."), new RegExp("..no."), new RegExp("..si."), new RegExp("..ta."), new RegExp("..to."), new RegExp(".a.t."), new RegExp(".c.$"), new RegExp(".e.r."), new RegExp(".i.e."), new RegExp(".i.n."), new RegExp(".ko."), new RegExp(".lo.."), new RegExp(".n.s."), new RegExp(".ol."), new RegExp(".ov.."), new RegExp(".ow.."), new RegExp(".si."), new RegExp(".t.r."), new RegExp(".ti."), new RegExp(".wa.."), new RegExp("^..l"), new RegExp("^b"), new RegExp("^b."), new RegExp("^d"), new RegExp("^d."), new RegExp("^d.."), new RegExp("c.$")],
  [new RegExp("..as."), new RegExp("..et."), new RegExp("..is."), new RegExp("..os."), new RegExp("..se."), new RegExp(".ac.."), new RegExp(".am."), new RegExp(".em."), new RegExp(".et.."), new RegExp(".ge."), new RegExp(".ic.."), new RegExp(".it."), new RegExp(".nd.."), new RegExp(".ng.."), new RegExp(".no."), new RegExp(".nt."), new RegExp(".nt.."), new RegExp(".o.o."), new RegExp(".r.a."), new RegExp(".s.a."), new RegExp(".se."), new RegExp(".to."), new RegExp(".tr."), new RegExp(".tr.."), new RegExp("^..p"), new RegExp("^..t"), new RegExp("^a"), new RegExp("^a."), new RegExp("^a.."), new RegExp("^b.."), new RegExp("y$")],
  [new RegExp("..t$"), new RegExp("..tr."), new RegExp("..y$"), new RegExp(".a.s."), new RegExp(".i.i."), new RegExp(".i.o."), new RegExp(".i.t."), new RegExp(".ia."), new RegExp(".ko.."), new RegExp(".l.$"), new RegExp(".n.a."), new RegExp(".na."), new RegExp(".o.$"), new RegExp(".ol.."), new RegExp(".os.."), new RegExp(".se.."), new RegExp(".si.."), new RegExp(".t$"), new RegExp(".to.."), new RegExp(".wa."), new RegExp(".y$"), new RegExp("^..i"), new RegExp("^k"), new RegExp("^k."), new RegExp("^k.."), new RegExp("^r"), new RegExp("^r."), new RegExp("^r.."), new RegExp("l.$"), new RegExp("o.$"), new RegExp("t$")],
  [new RegExp("..ci."), new RegExp("..ns."), new RegExp("..r$"), new RegExp("..wa."), new RegExp(".ci."), new RegExp(".de.."), new RegExp(".ei."), new RegExp(".ep.."), new RegExp(".es$"), new RegExp(".h$"), new RegExp(".ia.."), new RegExp(".il."), new RegExp(".il.."), new RegExp(".it.."), new RegExp(".l.n."), new RegExp(".na.."), new RegExp(".no.."), new RegExp(".ns."), new RegExp(".ns.."), new RegExp(".o.t."), new RegExp(".r$"), new RegExp(".s.o."), new RegExp(".s.r."), new RegExp(".t.n."), new RegExp("^m"), new RegExp("^m."), new RegExp("^m.."), new RegExp("es$"), new RegExp("h$"), new RegExp("l..$"), new RegExp("r$")],
  [new RegExp("..am."), new RegExp("..em."), new RegExp("..h$"), new RegExp("..it."), new RegExp("..nt."), new RegExp("..sc."), new RegExp("..sk."), new RegExp("..u$"), new RegExp(".ch$"), new RegExp(".e.l."), new RegExp(".ed."), new RegExp(".ep."), new RegExp(".l.e."), new RegExp(".l.s."), new RegExp(".r.$"), new RegExp(".r.i."), new RegExp(".r.s."), new RegExp(".sc."), new RegExp(".sc.."), new RegExp(".sk."), new RegExp(".sk.."), new RegExp(".u$"), new RegExp("^..d"), new RegExp("^.n"), new RegExp("^.n."), new RegExp("^c"), new RegExp("^c."), new RegExp("^c.."), new RegExp("ch$"), new RegExp("r.$"), new RegExp("u$")],
  [new RegExp("..ei."), new RegExp("..il."), new RegExp("..ka."), new RegExp("..me."), new RegExp("..ol."), new RegExp("..ss."), new RegExp("..za."), new RegExp("..ze."), new RegExp(".ec."), new RegExp(".ed.."), new RegExp(".ka."), new RegExp(".ka.."), new RegExp(".ma."), new RegExp(".me."), new RegExp(".mi$"), new RegExp(".ss."), new RegExp(".un."), new RegExp(".v.n."), new RegExp(".za."), new RegExp(".za.."), new RegExp(".ze."), new RegExp("^..z"), new RegExp("^e"), new RegExp("^e."), new RegExp("^e.."), new RegExp("^t"), new RegExp("^t."), new RegExp("^t.."), new RegExp("c..$"), new RegExp("mi$"), new RegExp("y..$")],
  [new RegExp("..un."), new RegExp(".ad."), new RegExp(".am.."), new RegExp(".av."), new RegExp(".c.e."), new RegExp(".ei.."), new RegExp(".ge.."), new RegExp(".i.g."), new RegExp(".ll."), new RegExp(".ma.."), new RegExp(".n.o."), new RegExp(".o.s."), new RegExp(".po."), new RegExp(".pr."), new RegExp(".pr.."), new RegExp(".ste."), new RegExp(".t.a."), new RegExp(".t.e."), new RegExp(".u.e."), new RegExp(".ze.."), new RegExp("^..c"), new RegExp("^.l"), new RegExp("^.l."), new RegExp("^f"), new RegExp("^f."), new RegExp("^f.."), new RegExp("^o"), new RegExp("^o."), new RegExp("^o.."), new RegExp("en.$"), new RegExp("te.$")],
  [new RegExp("..av."), new RegExp("..io."), new RegExp("..ll."), new RegExp("..ma."), new RegExp("..po."), new RegExp("..pr."), new RegExp("..ve."), new RegExp(".a.d."), new RegExp(".a.y."), new RegExp(".be."), new RegExp(".e.d."), new RegExp(".he."), new RegExp(".i.s."), new RegExp(".io."), new RegExp(".me.."), new RegExp(".n.i."), new RegExp(".od.."), new RegExp(".ova."), new RegExp(".po.."), new RegExp(".r.t."), new RegExp(".s.$"), new RegExp(".ss.."), new RegExp(".un.."), new RegExp(".ve."), new RegExp(".ve.."), new RegExp("^..u"), new RegExp("^h"), new RegExp("^h."), new RegExp("^h.."), new RegExp("e.s$"), new RegExp("s.$")],
  [new RegExp("..be."), new RegExp("..ec."), new RegExp("..ej."), new RegExp(".ad.."), new RegExp(".av.."), new RegExp(".ci.."), new RegExp(".ec.."), new RegExp(".eg."), new RegExp(".ej."), new RegExp(".ej.."), new RegExp(".em.."), new RegExp(".ha.."), new RegExp(".i.l."), new RegExp(".i.r."), new RegExp(".m.n."), new RegExp(".n.r."), new RegExp(".n.t."), new RegExp(".od."), new RegExp(".om."), new RegExp(".om.."), new RegExp(".ot."), new RegExp(".ru."), new RegExp(".rz."), new RegExp(".rz.."), new RegExp(".t.l."), new RegExp(".u.a."), new RegExp("^..m"), new RegExp("^g"), new RegExp("^g."), new RegExp("^g.."), new RegExp("^v")],
  [new RegExp("..ad."), new RegExp("..do."), new RegExp("..ha."), new RegExp("..he."), new RegExp("..im."), new RegExp("..mo."), new RegExp(".a.n."), new RegExp(".be.."), new RegExp(".c.n."), new RegExp(".do."), new RegExp(".ek.."), new RegExp(".ha."), new RegExp(".im."), new RegExp(".ll.."), new RegExp(".mo."), new RegExp(".owa."), new RegExp(".r.c."), new RegExp(".t.i."), new RegExp(".u.$"), new RegExp(".ur."), new RegExp(".us."), new RegExp(".us.."), new RegExp("^pr"), new RegExp("^pr."), new RegExp("^v."), new RegExp("^v.."), new RegExp("^z"), new RegExp("^z."), new RegExp("^z.."), new RegExp("an.$"), new RegExp("u.$")],
  [new RegExp("..ed."), new RegExp("..eg."), new RegExp("..ke."), new RegExp("..mi."), new RegExp("..sa."), new RegExp(".ab."), new RegExp(".ani."), new RegExp(".cz."), new RegExp(".do.."), new RegExp(".ek."), new RegExp(".er$"), new RegExp(".io.."), new RegExp(".mi."), new RegExp(".mi.."), new RegExp(".n.m."), new RegExp(".n.n."), new RegExp(".ne$"), new RegExp(".ot.."), new RegExp(".r.o."), new RegExp(".s.h."), new RegExp(".s.n."), new RegExp(".sa."), new RegExp(".t.o."), new RegExp(".ter."), new RegExp(".ur.."), new RegExp(".van."), new RegExp("^.y"), new RegExp("^.y."), new RegExp("d..$"), new RegExp("er$"), new RegExp("ne$")],
  [new RegExp("..cz."), new RegExp("..rs."), new RegExp("..rt."), new RegExp("..ru."), new RegExp(".c.a."), new RegExp(".em$"), new RegExp(".ez."), new RegExp(".ez.."), new RegExp(".i.k."), new RegExp(".ke."), new RegExp(".n.c."), new RegExp(".op."), new RegExp(".op.."), new RegExp(".oz."), new RegExp(".oz.."), new RegExp(".pe."), new RegExp(".rs."), new RegExp(".rs.."), new RegExp(".rt."), new RegExp(".rt.."), new RegExp(".ru.."), new RegExp(".sa.."), new RegExp(".tu."), new RegExp("^.er"), new RegExp("^l"), new RegExp("^l."), new RegExp("^l.."), new RegExp("^w"), new RegExp("^w."), new RegExp("^w.."), new RegExp("em$")],
  [new RegExp("..da."), new RegExp("..ep."), new RegExp("..od."), new RegExp("..om."), new RegExp("..rn."), new RegExp("..us."), new RegExp(".a.l."), new RegExp(".a.r."), new RegExp(".ba."), new RegExp(".cz.."), new RegExp(".da."), new RegExp(".e.k."), new RegExp(".e.u."), new RegExp(".i.c."), new RegExp(".ing."), new RegExp(".k.e."), new RegExp(".l.t."), new RegExp(".o.r."), new RegExp(".o.y."), new RegExp(".pa."), new RegExp(".pa.."), new RegExp(".rn."), new RegExp(".te$"), new RegExp(".u.i."), new RegExp("^..b"), new RegExp("^..g"), new RegExp("^..k"), new RegExp("^po"), new RegExp("^po."), new RegExp("g..$"), new RegExp("te$")],
  [new RegExp("..ce."), new RegExp("..di."), new RegExp("..ga."), new RegExp("..ot."), new RegExp("..pa."), new RegExp("..pe."), new RegExp("..tu."), new RegExp(".ab.."), new RegExp(".ce."), new RegExp(".d.r."), new RegExp(".di."), new RegExp(".ere."), new RegExp(".g.n."), new RegExp(".ga."), new RegExp(".he.."), new RegExp(".o.n."), new RegExp(".pe.."), new RegExp(".pi."), new RegExp(".t.c."), new RegExp(".ul."), new RegExp(".y.$"), new RegExp(".ym."), new RegExp(".ys."), new RegExp(".ys.."), new RegExp("^.es"), new RegExp("^u"), new RegExp("^u."), new RegExp("^u.."), new RegExp("m..$"), new RegExp("u..$"), new RegExp("y.$")],
  [new RegExp("..ba."), new RegExp("..ek."), new RegExp("..js."), new RegExp("..ny."), new RegExp("..op."), new RegExp("..ur."), new RegExp(".ag."), new RegExp(".ak."), new RegExp(".di.."), new RegExp(".eg.."), new RegExp(".gs.."), new RegExp(".js."), new RegExp(".l.b."), new RegExp(".ny."), new RegExp(".oc."), new RegExp(".ost."), new RegExp(".p.e."), new RegExp(".r.m."), new RegExp(".s.m."), new RegExp(".sch."), new RegExp(".ul.."), new RegExp(".ut."), new RegExp(".w.n."), new RegExp(".yc."), new RegExp(".z.n."), new RegExp("^.t"), new RegExp("^.t."), new RegExp("a.e$"), new RegExp("a.i$"), new RegExp("e.e$"), new RegExp("er.$")],
  [new RegExp("..ab."), new RegExp("..gs."), new RegExp("..rz."), new RegExp("..yc."), new RegExp("..ym."), new RegExp(".a.k."), new RegExp(".a.u."), new RegExp(".ce.."), new RegExp(".ejs."), new RegExp(".gs."), new RegExp(".i.u."), new RegExp(".ig."), new RegExp(".is$"), new RegExp(".l.a."), new RegExp(".l.r."), new RegExp(".lu."), new RegExp(".mo.."), new RegExp(".n.l."), new RegExp(".oc.."), new RegExp(".pi.."), new RegExp(".so."), new RegExp(".sp."), new RegExp(".sp.."), new RegExp(".tt."), new RegExp(".tu.."), new RegExp(".ut.."), new RegExp(".wi."), new RegExp(".y.a."), new RegExp("is$"), new RegExp("k..$"), new RegExp("ne.$")],
  [new RegExp("..sp."), new RegExp("..uj."), new RegExp(".ag.."), new RegExp(".ak.."), new RegExp(".and."), new RegExp(".ap."), new RegExp(".ap.."), new RegExp(".ba.."), new RegExp(".ca."), new RegExp(".da.."), new RegExp(".g.$"), new RegExp(".ga.."), new RegExp(".ho."), new RegExp(".i.m."), new RegExp(".id."), new RegExp(".ik."), new RegExp(".ja."), new RegExp(".k.n."), new RegExp(".l.c."), new RegExp(".nge."), new RegExp(".o.l."), new RegExp(".p.r."), new RegExp(".t.s."), new RegExp(".u.t."), new RegExp(".uj."), new RegExp("^..v"), new RegExp("^.ar"), new RegExp("^i"), new RegExp("^i."), new RegExp("^i.."), new RegExp("g.$")],
  [new RegExp("..ca."), new RegExp("..ig."), new RegExp("..ik."), new RegExp("..iz."), new RegExp("..ja."), new RegExp("..pi."), new RegExp("..so."), new RegExp("..tt."), new RegExp("..ys."), new RegExp(".au."), new RegExp(".au.."), new RegExp(".ava."), new RegExp(".d.n."), new RegExp(".e.c."), new RegExp(".id.."), new RegExp(".ie$"), new RegExp(".ig.."), new RegExp(".ik.."), new RegExp(".iz."), new RegExp(".iz.."), new RegExp(".ja.."), new RegExp(".k.$"), new RegExp(".ke.."), new RegExp(".lu.."), new RegExp(".rn.."), new RegExp(".s.u."), new RegExp(".wan."), new RegExp(".zo."), new RegExp("^..h"), new RegExp("ie$"), new RegExp("k.$")],
  [new RegExp("..ck."), new RegExp("..g$"), new RegExp("..lu."), new RegExp("..ul."), new RegExp("..ut."), new RegExp(".aj."), new RegExp(".c.o."), new RegExp(".e.b."), new RegExp(".e.z."), new RegExp(".eb."), new RegExp(".g$"), new RegExp(".ho.."), new RegExp(".i.h."), new RegExp(".j.i."), new RegExp(".l.g."), new RegExp(".l.i."), new RegExp(".m.e."), new RegExp(".p.a."), new RegExp(".r.d."), new RegExp(".r.z."), new RegExp(".so.."), new RegExp(".tt.."), new RegExp(".u.g."), new RegExp(".u.o."), new RegExp(".v.r."), new RegExp(".wi.."), new RegExp(".zo.."), new RegExp("^.p"), new RegExp("^.p."), new RegExp("g$"), new RegExp("re.$")],
  [new RegExp("..ho."), new RegExp("..id."), new RegExp("..ki."), new RegExp("..wi."), new RegExp("..zo."), new RegExp(".ali."), new RegExp(".ane."), new RegExp(".ca.."), new RegExp(".ck."), new RegExp(".co."), new RegExp(".eb.."), new RegExp(".ent."), new RegExp(".est."), new RegExp(".ev."), new RegExp(".g.a."), new RegExp(".ier."), new RegExp(".js.."), new RegExp(".m.t."), new RegExp(".n.j."), new RegExp(".ob."), new RegExp(".og."), new RegExp(".r.k."), new RegExp(".r.l."), new RegExp(".r.u."), new RegExp(".uj.."), new RegExp(".w.l."), new RegExp("^..j"), new RegExp("^.or"), new RegExp("a.a$"), new RegExp("im.$"), new RegExp("ym.$")],
  [new RegExp("..ag."), new RegExp("..aj."), new RegExp(".b.r."), new RegExp(".bi."), new RegExp(".co.."), new RegExp(".d.$"), new RegExp(".d.a."), new RegExp(".d.i."), new RegExp(".e.m."), new RegExp(".e.y."), new RegExp(".g.e."), new RegExp(".j.c."), new RegExp(".ki."), new RegExp(".m.r."), new RegExp(".mu$"), new RegExp(".n.u."), new RegExp(".nde."), new RegExp(".nn."), new RegExp(".o.u."), new RegExp(".p.o."), new RegExp(".r.v."), new RegExp(".sz."), new RegExp(".ts."), new RegExp("^.ep"), new RegExp("^de"), new RegExp("^de."), new RegExp("d.$"), new RegExp("em.$"), new RegExp("ge.$"), new RegExp("ic.$"), new RegExp("mu$")],
  [new RegExp("..bi."), new RegExp("..co."), new RegExp("..oc."), new RegExp("..ts."), new RegExp("..zy."), new RegExp(".aj.."), new RegExp(".as$"), new RegExp(".bi.."), new RegExp(".d.e."), new RegExp(".ea."), new RegExp(".ev.."), new RegExp(".h.e."), new RegExp(".i.d."), new RegExp(".i.z."), new RegExp(".ist."), new RegExp(".je."), new RegExp(".ngs."), new RegExp(".ns$"), new RegExp(".og.."), new RegExp(".str."), new RegExp(".ts.."), new RegExp(".uc."), new RegExp(".vi."), new RegExp(".zy."), new RegExp("^re"), new RegExp("^re."), new RegExp("as$"), new RegExp("de.$"), new RegExp("e.o$"), new RegExp("ni.$"), new RegExp("ns$")],
  [new RegExp("..sm."), new RegExp("..sz."), new RegExp("..we."), new RegExp(".a.c."), new RegExp(".c.l."), new RegExp(".eh."), new RegExp(".eo."), new RegExp(".eo.."), new RegExp(".eu."), new RegExp(".f.r."), new RegExp(".g.r."), new RegExp(".i.p."), new RegExp(".ir."), new RegExp(".jsi."), new RegExp(".kr.."), new RegExp(".nn.."), new RegExp(".nos."), new RegExp(".ny.."), new RegExp(".o.d."), new RegExp(".o.k."), new RegExp(".p.l."), new RegExp(".r.p."), new RegExp(".s.l."), new RegExp(".sm."), new RegExp(".uc.."), new RegExp(".vi.."), new RegExp(".we."), new RegExp(".zi."), new RegExp(".zy.."), new RegExp("j..$"), new RegExp("v..$")],
  [new RegExp("..ak."), new RegExp("..nn."), new RegExp("..vi."), new RegExp(".a.z."), new RegExp(".che."), new RegExp(".ck.."), new RegExp(".e.g."), new RegExp(".e.h."), new RegExp(".e.p."), new RegExp(".ens."), new RegExp(".era."), new RegExp(".eri."), new RegExp(".gr."), new RegExp(".ir.."), new RegExp(".ki.."), new RegExp(".kr."), new RegExp(".kt."), new RegExp(".l.o."), new RegExp(".nk."), new RegExp(".ob.."), new RegExp(".ou."), new RegExp(".rd."), new RegExp(".rk."), new RegExp(".rm."), new RegExp(".sz.."), new RegExp(".t.t."), new RegExp(".wal."), new RegExp(".ym$"), new RegExp("^.s"), new RegExp("^.s."), new RegExp("ym$")],
  [new RegExp("..au."), new RegExp("..je."), new RegExp("..kt."), new RegExp("..nk."), new RegExp("..og."), new RegExp(".a.h."), new RegExp(".c.i."), new RegExp(".gr.."), new RegExp(".h.$"), new RegExp(".h.n."), new RegExp(".iv."), new RegExp(".je.."), new RegExp(".k.a."), new RegExp(".k.r."), new RegExp(".nc."), new RegExp(".o.p."), new RegExp(".p.n."), new RegExp(".r.r."), new RegExp(".ran."), new RegExp(".sta."), new RegExp(".tra."), new RegExp(".ty."), new RegExp("^.an"), new RegExp("^.c"), new RegExp("^.c."), new RegExp("^.m"), new RegExp("^.m."), new RegExp("^.on"), new RegExp("^.ra"), new RegExp("^.ro"), new RegExp("h.$")],
  [new RegExp("..eb."), new RegExp("..gr."), new RegExp("..l$"), new RegExp("..ob."), new RegExp("..oz."), new RegExp("..rd."), new RegExp("..rk."), new RegExp("..rm."), new RegExp("..zi."), new RegExp(".c.t."), new RegExp(".d.l."), new RegExp(".ea.."), new RegExp(".ene."), new RegExp(".eu.."), new RegExp(".kt.."), new RegExp(".l$"), new RegExp(".na$"), new RegExp(".nu."), new RegExp(".ok."), new RegExp(".ou.."), new RegExp(".pl.."), new RegExp(".rd.."), new RegExp(".rm.."), new RegExp(".ten."), new RegExp(".zi.."), new RegExp("^.re"), new RegExp("^n.p"), new RegExp("ac.$"), new RegExp("h..$"), new RegExp("l$"), new RegExp("na$")],
  [new RegExp("..ap."), new RegExp("..ez."), new RegExp("..fe."), new RegExp("..kr."), new RegExp("..ty."), new RegExp("..uc."), new RegExp(".a.m."), new RegExp(".br."), new RegExp(".br.."), new RegExp(".by."), new RegExp(".d.o."), new RegExp(".eni."), new RegExp(".epr."), new RegExp(".fe."), new RegExp(".fo."), new RegExp(".fo.."), new RegExp(".k.i."), new RegExp(".m.l."), new RegExp(".nc.."), new RegExp(".os$"), new RegExp(".pl."), new RegExp(".t.m."), new RegExp(".t.v."), new RegExp(".u.s."), new RegExp("^st"), new RegExp("^st."), new RegExp("e.u$"), new RegExp("ie.$"), new RegExp("n.e$"), new RegExp("n.s$"), new RegExp("os$")],
  [new RegExp("..by."), new RegExp("..fi."), new RegExp("..fo."), new RegExp("..gi."), new RegExp("..nu."), new RegExp(".az."), new RegExp(".bo."), new RegExp(".c.r."), new RegExp(".dr."), new RegExp(".dr.."), new RegExp(".fi."), new RegExp(".gi."), new RegExp(".h.r."), new RegExp(".lt."), new RegExp(".nk.."), new RegExp(".ok.."), new RegExp(".rk.."), new RegExp(".s.c."), new RegExp(".ty.."), new RegExp(".um."), new RegExp(".ung."), new RegExp(".v.$"), new RegExp("^..f"), new RegExp("^na"), new RegExp("^na."), new RegExp("^za"), new RegExp("^za."), new RegExp("al.$"), new RegExp("b..$"), new RegExp("n.m$"), new RegExp("v.$")],
  [new RegExp("..br."), new RegExp("..ea."), new RegExp("..iv."), new RegExp("..ls."), new RegExp("..pl."), new RegExp(".a.g."), new RegExp(".bo.."), new RegExp(".end."), new RegExp(".ero."), new RegExp(".im.."), new RegExp(".ion."), new RegExp(".iv.."), new RegExp(".ku."), new RegExp(".ls."), new RegExp(".mp."), new RegExp(".n.k."), new RegExp(".nej."), new RegExp(".o.c."), new RegExp(".o.m."), new RegExp(".r.b."), new RegExp(".r.g."), new RegExp(".s.t."), new RegExp(".sl."), new RegExp(".y.o."), new RegExp(".z.e."), new RegExp("^.al"), new RegExp("^.d"), new RegExp("^.d."), new RegExp("^nep"), new RegExp("c.e$"), new RegExp("z..$")],
  [new RegExp("..bo."), new RegExp("..dr."), new RegExp("..eh."), new RegExp("..j$"), new RegExp(".ass."), new RegExp(".ast."), new RegExp(".az.."), new RegExp(".b.e."), new RegExp(".b.l."), new RegExp(".fi.."), new RegExp(".gi.."), new RegExp(".h.l."), new RegExp(".hi."), new RegExp(".j$"), new RegExp(".k.l."), new RegExp(".l.v."), new RegExp(".mp.."), new RegExp(".nte."), new RegExp(".ry."), new RegExp(".rze."), new RegExp(".sl.."), new RegExp(".um.."), new RegExp(".v.l."), new RegExp(".z.a."), new RegExp(".z.l."), new RegExp("^.en"), new RegExp("^ma"), new RegExp("^ma."), new RegExp("emu$"), new RegExp("j$"), new RegExp("le.$")],
  [new RegExp("..lt."), new RegExp("..ou."), new RegExp("..sl."), new RegExp("..zn."), new RegExp(".a.b."), new RegExp(".ari."), new RegExp(".ati."), new RegExp(".ew.."), new RegExp(".fe.."), new RegExp(".ien."), new RegExp(".lt.."), new RegExp(".ly."), new RegExp(".p.i."), new RegExp(".rb."), new RegExp(".rb.."), new RegExp(".ren."), new RegExp(".rg."), new RegExp(".ry.."), new RegExp(".we.."), new RegExp(".z.r."), new RegExp(".zn."), new RegExp("^.b"), new RegExp("^.b."), new RegExp("^.h"), new RegExp("^.h."), new RegExp("am.$"), new RegExp("ci.$"), new RegExp("i.i$"), new RegExp("in.$"), new RegExp("y.i$"), new RegExp("yc.$")],
  [new RegExp("..ir."), new RegExp("..nc."), new RegExp(".ano."), new RegExp(".ds."), new RegExp(".ds.."), new RegExp(".ern."), new RegExp(".ers."), new RegExp(".ew."), new RegExp(".hr."), new RegExp(".hr.."), new RegExp(".kl."), new RegExp(".kl.."), new RegExp(".ku.."), new RegExp(".l.k."), new RegExp(".l.m."), new RegExp(".l.u."), new RegExp(".nia."), new RegExp(".rg.."), new RegExp(".sse."), new RegExp(".sti."), new RegExp(".us$"), new RegExp("^.as"), new RegExp("^.ol"), new RegExp("^in"), new RegExp("^in."), new RegExp("st.$"), new RegExp("t.n$"), new RegExp("us$"), new RegExp("y.h$"), new RegExp("ych$"), new RegExp("ymi$")],
  [new RegExp("..d$"), new RegExp("..kl."), new RegExp("..ku."), new RegExp("..ly."), new RegExp("..vy."), new RegExp("..wy."), new RegExp(".ai."), new RegExp(".ara."), new RegExp(".ate."), new RegExp(".d$"), new RegExp(".hi.."), new RegExp(".ich."), new RegExp(".k.m."), new RegExp(".ls.."), new RegExp(".ly.."), new RegExp(".men."), new RegExp(".ng$"), new RegExp(".r.f."), new RegExp(".rr."), new RegExp(".ver."), new RegExp(".vy."), new RegExp(".wy."), new RegExp("^.in"), new RegExp("^d.s"), new RegExp("^n.j"), new RegExp("^ro"), new RegExp("^ro."), new RegExp("d$"), new RegExp("i.e$"), new RegExp("ng$"), new RegExp("s.e$")],
  [new RegExp(".b.s."), new RegExp(".der."), new RegExp(".ef."), new RegExp(".ef.."), new RegExp(".eh.."), new RegExp(".g.s."), new RegExp(".ib."), new RegExp(".if."), new RegExp(".jo."), new RegExp(".k.v."), new RegExp(".k.w."), new RegExp(".l.d."), new RegExp(".l.z."), new RegExp(".lan."), new RegExp(".mm."), new RegExp(".nu.."), new RegExp(".o.h."), new RegExp(".rr.."), new RegExp(".t.u."), new RegExp(".tel."), new RegExp(".u.l."), new RegExp(".vo."), new RegExp(".z.i."), new RegExp("^.ej"), new RegExp("^.k"), new RegExp("^.k."), new RegExp("^ko"), new RegExp("^ko."), new RegExp("ens$"), new RegExp("i.a$"), new RegExp("se.$")],
  [new RegExp("..az."), new RegExp("..ds."), new RegExp("..eu."), new RegExp("..ew."), new RegExp("..fa."), new RegExp("..hi."), new RegExp("..hr."), new RegExp("..ln."), new RegExp("..ok."), new RegExp("..rb."), new RegExp("..rg."), new RegExp("..um."), new RegExp(".ala."), new RegExp(".cha."), new RegExp(".gen."), new RegExp(".hl."), new RegExp(".jac."), new RegExp(".ln."), new RegExp(".n.v."), new RegExp(".nie."), new RegExp(".st$"), new RegExp(".ud."), new RegExp("^.ez"), new RegExp("g.n$"), new RegExp("l.s$"), new RegExp("m.s$"), new RegExp("r.s$"), new RegExp("st$"), new RegExp("t.s$"), new RegExp("ten$"), new RegExp("w..$")],
  [new RegExp("..hl."), new RegExp("..mm."), new RegExp("..rr."), new RegExp("..ry."), new RegExp("..vo."), new RegExp(".b.$"), new RegExp(".b.n."), new RegExp(".d.s."), new RegExp(".fa."), new RegExp(".fa.."), new RegExp(".h.a."), new RegExp(".h.i."), new RegExp(".ia$"), new RegExp(".if.."), new RegExp(".m.a."), new RegExp(".m.s."), new RegExp(".ma$"), new RegExp(".r.w."), new RegExp(".rin."), new RegExp(".sen."), new RegExp(".ud.."), new RegExp(".y.i."), new RegExp(".z.w."), new RegExp("^.ed"), new RegExp("^.el"), new RegExp("^nej"), new RegExp("^pa"), new RegExp("^pa."), new RegExp("b.$"), new RegExp("ia$"), new RegExp("ma$")],
  [new RegExp("..ai."), new RegExp("..if."), new RegExp("..mp."), new RegExp(".af."), new RegExp(".are."), new RegExp(".ej$"), new RegExp(".ell."), new RegExp(".epo."), new RegExp(".f.e."), new RegExp(".hl.."), new RegExp(".iep."), new RegExp(".j.$"), new RegExp(".jo.."), new RegExp(".k.o."), new RegExp(".o.z."), new RegExp(".pro."), new RegExp(".r.y."), new RegExp(".u.n."), new RegExp(".u.r."), new RegExp(".v.t."), new RegExp(".w.$"), new RegExp(".yc.."), new RegExp(".zn.."), new RegExp("^.oz"), new RegExp("^p.z"), new RegExp("^s.a"), new RegExp("ej$"), new RegExp("ene$"), new RegExp("gen$"), new RegExp("j.$"), new RegExp("w.$")],
  [new RegExp(".ach."), new RegExp(".af.."), new RegExp(".any."), new RegExp(".b.a."), new RegExp(".b.i."), new RegExp(".c.m."), new RegExp(".du."), new RegExp(".dz."), new RegExp(".la$"), new RegExp(".nin."), new RegExp(".rc."), new RegExp(".t.k."), new RegExp(".ti$"), new RegExp(".ub."), new RegExp(".up."), new RegExp(".up.."), new RegExp(".vy.."), new RegExp(".wy.."), new RegExp(".z.o."), new RegExp("^be"), new RegExp("^be."), new RegExp("^do"), new RegExp("^do."), new RegExp("^tr"), new RegExp("^tr."), new RegExp("a.o$"), new RegExp("a.y$"), new RegExp("at.$"), new RegExp("i.o$"), new RegExp("la$"), new RegExp("ti$")],
  [new RegExp("..du."), new RegExp("..dz."), new RegExp("..ib."), new RegExp("..jo."), new RegExp(".a.p."), new RegExp(".ah."), new RegExp(".ale."), new RegExp(".dz.."), new RegExp(".e.v."), new RegExp(".go."), new RegExp(".i.w."), new RegExp(".kow."), new RegExp(".ks."), new RegExp(".len."), new RegExp(".lin."), new RegExp(".mm.."), new RegExp(".n.h."), new RegExp(".rc.."), new RegExp(".sci."), new RegExp(".sim."), new RegExp(".sm.."), new RegExp(".su."), new RegExp(".t.w."), new RegExp(".tan."), new RegExp(".ub.."), new RegExp(".v.v."), new RegExp("^.ri"), new RegExp("^.rz"), new RegExp("^p.e"), new RegExp("e.t$"), new RegExp("i.m$")],
  [new RegExp("..go."), new RegExp("..su."), new RegExp(".ah.."), new RegExp(".ant."), new RegExp(".bl."), new RegExp(".c.s."), new RegExp(".du.."), new RegExp(".ena."), new RegExp(".et$"), new RegExp(".g.l."), new RegExp(".ib.."), new RegExp(".lb."), new RegExp(".ld."), new RegExp(".lis."), new RegExp(".ln.."), new RegExp(".nic."), new RegExp(".p.s."), new RegExp(".p.t."), new RegExp(".u.k."), new RegExp(".vo.."), new RegExp(".z.s."), new RegExp(".zu."), new RegExp("^co"), new RegExp("^co."), new RegExp("^p.o"), new RegExp("a.h$"), new RegExp("ach$"), new RegExp("ami$"), new RegExp("eg.$"), new RegExp("et$"), new RegExp("s.s$")],
  [new RegExp("..af."), new RegExp("..ld."), new RegExp("..rc."), new RegExp(".an$"), new RegExp(".ele."), new RegExp(".go$"), new RegExp(".go.."), new RegExp(".ip."), new RegExp(".ks.."), new RegExp(".one."), new RegExp(".r.h."), new RegExp(".re$"), new RegExp(".s.y."), new RegExp(".t.g."), new RegExp(".ue."), new RegExp(".uk."), new RegExp(".uk.."), new RegExp(".yw."), new RegExp(".yw.."), new RegExp("^.v"), new RegExp("^.v."), new RegExp("^n.z"), new RegExp("^s.r"), new RegExp("an$"), new RegExp("cie$"), new RegExp("go$"), new RegExp("i.h$"), new RegExp("on.$"), new RegExp("ow.$"), new RegExp("re$"), new RegExp("t.m$")],
  [new RegExp("..eo."), new RegExp("..tn."), new RegExp("..z$"), new RegExp("..zu."), new RegExp(".bl.."), new RegExp(".g.i."), new RegExp(".h.t."), new RegExp(".im$"), new RegExp(".ite."), new RegExp(".l.w."), new RegExp(".my$"), new RegExp(".ni$"), new RegExp(".t.j."), new RegExp(".tn."), new RegExp(".tro."), new RegExp(".u.d."), new RegExp(".y.e."), new RegExp(".z$"), new RegExp(".zu.."), new RegExp("^..y"), new RegExp("^.ev"), new RegExp("^ba"), new RegExp("^ba."), new RegExp("d.s$"), new RegExp("ich$"), new RegExp("im$"), new RegExp("my$"), new RegExp("ni$"), new RegExp("o.i$"), new RegExp("ra.$"), new RegExp("z$")],
  [new RegExp("..bl."), new RegExp("..ef."), new RegExp("..ht."), new RegExp("..ks."), new RegExp("..lb."), new RegExp("..ud."), new RegExp(".ae."), new RegExp(".ct."), new RegExp(".ert."), new RegExp(".ht."), new RegExp(".ian."), new RegExp(".ip.."), new RegExp(".isc."), new RegExp(".j.n."), new RegExp(".ld.."), new RegExp(".om$"), new RegExp(".pp."), new RegExp(".rs$"), new RegExp(".se$"), new RegExp(".ski."), new RegExp(".sto."), new RegExp(".u.h."), new RegExp(".yk."), new RegExp(".yl."), new RegExp("^.at"), new RegExp("mo.$"), new RegExp("om$"), new RegExp("r.n$"), new RegExp("rs$"), new RegExp("s.y$"), new RegExp("se$")],
  [new RegExp("..ct."), new RegExp("..dn."), new RegExp("..ji."), new RegExp("..jn."), new RegExp("..yw."), new RegExp(".bu."), new RegExp(".dn."), new RegExp(".e.f."), new RegExp(".ee."), new RegExp(".ete."), new RegExp(".eza."), new RegExp(".for."), new RegExp(".hu."), new RegExp(".i.b."), new RegExp(".ji."), new RegExp(".jn."), new RegExp(".kov."), new RegExp(".lle."), new RegExp(".mu."), new RegExp(".nym."), new RegExp(".res."), new RegExp(".su.."), new RegExp(".tor."), new RegExp(".tte."), new RegExp("^.la"), new RegExp("^ka"), new RegExp("^ka."), new RegExp("^nez"), new RegExp("^p.r"), new RegExp("a.s$"), new RegExp("ego$")],
  [new RegExp("..bu."), new RegExp("..mu."), new RegExp("..ue."), new RegExp("..uk."), new RegExp(".ae.."), new RegExp(".d.t."), new RegExp(".f.l."), new RegExp(".ht.."), new RegExp(".ina."), new RegExp(".k.t."), new RegExp(".l.p."), new RegExp(".ner."), new RegExp(".nst."), new RegExp(".olo."), new RegExp(".oni."), new RegExp(".owy."), new RegExp(".s.s."), new RegExp(".t.p."), new RegExp(".tri."), new RegExp(".yl.."), new RegExp("^..w"), new RegExp("^.et"), new RegExp("^an"), new RegExp("^an."), new RegExp("^sc"), new RegExp("^sc."), new RegExp("^ve"), new RegExp("^ve."), new RegExp("et.$"), new RegExp("o.a$"), new RegExp("o.e$")],
  [new RegExp("..ev."), new RegExp(".bu.."), new RegExp(".c.u."), new RegExp(".cht."), new RegExp(".dl."), new RegExp(".dn.."), new RegExp(".gu."), new RegExp(".ho$"), new RegExp(".ies."), new RegExp(".n.g."), new RegExp(".o.g."), new RegExp(".ons."), new RegExp(".pp.."), new RegExp(".rat."), new RegExp(".s.k."), new RegExp(".tn.."), new RegExp(".u.z."), new RegExp(".yk.."), new RegExp(".z.c."), new RegExp("^.am"), new RegExp("^en"), new RegExp("^en."), new RegExp("^ge"), new RegExp("^ge."), new RegExp("^prz"), new RegExp("^sp"), new RegExp("^sp."), new RegExp("^v.r"), new RegExp("ho$"), new RegExp("mos$"), new RegExp("si.$")],
  [new RegExp("..cy."), new RegExp("..gu."), new RegExp("..hu."), new RegExp("..up."), new RegExp(".ber."), new RegExp(".by.."), new RegExp(".ct.."), new RegExp(".cy."), new RegExp(".den."), new RegExp(".f.n."), new RegExp(".j.e."), new RegExp(".mb."), new RegExp(".n.w."), new RegExp(".r.j."), new RegExp(".rei."), new RegExp(".ser."), new RegExp(".tal."), new RegExp(".ue.."), new RegExp(".w.r."), new RegExp(".zen."), new RegExp("^.eo"), new RegExp("^.nt"), new RegExp("^.os"), new RegExp("^j"), new RegExp("^j."), new RegExp("^j.."), new RegExp("^r.z"), new RegExp("^wy"), new RegExp("^wy."), new RegExp("p..$"), new RegExp("t.r$")],
  [new RegExp("..dl."), new RegExp(".ar$"), new RegExp(".aw."), new RegExp(".aw.."), new RegExp(".b.t."), new RegExp(".de$"), new RegExp(".dl.."), new RegExp(".gl."), new RegExp(".gu.."), new RegExp(".h.u."), new RegExp(".jn.."), new RegExp(".k.s."), new RegExp(".lb.."), new RegExp(".n.p."), new RegExp(".nen."), new RegExp(".tar."), new RegExp(".th."), new RegExp(".um$"), new RegExp(".vav."), new RegExp(".yn."), new RegExp(".yt."), new RegExp(".z.$"), new RegExp("^pro"), new RegExp("^se"), new RegExp("^se."), new RegExp("ar$"), new RegExp("de$"), new RegExp("e.i$"), new RegExp("ei.$"), new RegExp("um$"), new RegExp("z.$")],
  [new RegExp("..hn."), new RegExp(".amo."), new RegExp(".ang."), new RegExp(".ans."), new RegExp(".art."), new RegExp(".cu."), new RegExp(".eli."), new RegExp(".g.t."), new RegExp(".hn."), new RegExp(".hu.."), new RegExp(".mb.."), new RegExp(".mu.."), new RegExp(".o.b."), new RegExp(".of."), new RegExp(".pu."), new RegExp(".ras."), new RegExp(".ria."), new RegExp(".rl."), new RegExp(".rov."), new RegExp(".yp."), new RegExp(".yt.."), new RegExp("^.ch"), new RegExp("^.il"), new RegExp("^des"), new RegExp("^la"), new RegExp("^la."), new RegExp("^n.v"), new RegExp("^sa"), new RegExp("^sa."), new RegExp("ar.$"), new RegExp("imi$")],
  [new RegExp("..cu."), new RegExp("..gl."), new RegExp("..th."), new RegExp("..yl."), new RegExp(".ace."), new RegExp(".ein."), new RegExp(".gl.."), new RegExp(".gra."), new RegExp(".i.y."), new RegExp(".lat."), new RegExp(".lk."), new RegExp(".ona."), new RegExp(".p.z."), new RegExp(".pre."), new RegExp(".roz."), new RegExp(".rte."), new RegExp(".th.."), new RegExp(".tio."), new RegExp(".val."), new RegExp(".yb."), new RegExp(".yn.."), new RegExp(".yp.."), new RegExp("^.is"), new RegExp("^.od"), new RegExp("^ha"), new RegExp("^ha."), new RegExp("^mi"), new RegExp("^mi."), new RegExp("^roz"), new RegExp("^s.e"), new RegExp("^s.o")],
  [new RegExp("..ae."), new RegExp("..rl."), new RegExp(".ato."), new RegExp(".by$"), new RegExp(".c.y."), new RegExp(".ech."), new RegExp(".ft."), new RegExp(".g.o."), new RegExp(".ger."), new RegExp(".hn.."), new RegExp(".las."), new RegExp(".m.i."), new RegExp(".me$"), new RegExp(".nem."), new RegExp(".nf."), new RegExp(".nf.."), new RegExp(".of.."), new RegExp(".oli."), new RegExp(".rzy."), new RegExp(".t.z."), new RegExp(".u.c."), new RegExp(".uf."), new RegExp(".ug."), new RegExp("^.ac"), new RegExp("^.us"), new RegExp("^f.r"), new RegExp("^n.o"), new RegExp("by$"), new RegExp("me$"), new RegExp("n.a$"), new RegExp("r.e$")],
  [new RegExp("..ah."), new RegExp("..c$"), new RegExp("..ip."), new RegExp("..k$"), new RegExp("..pp."), new RegExp("..pu."), new RegExp(".c$"), new RegExp(".d.c."), new RegExp(".eno."), new RegExp(".h.s."), new RegExp(".ill."), new RegExp(".k$"), new RegExp(".m.o."), new RegExp(".o.f."), new RegExp(".pu.."), new RegExp(".rie."), new RegExp(".row."), new RegExp(".v.s."), new RegExp(".y.t."), new RegExp("^.om"), new RegExp("^fo"), new RegExp("^fo."), new RegExp("^me"), new RegExp("^me."), new RegExp("^n.d"), new RegExp("^n.s"), new RegExp("c$"), new RegExp("he.$"), new RegExp("k$"), new RegExp("la.$"), new RegExp("ov.$")],
  [new RegExp("..ft."), new RegExp("..lk."), new RegExp(".b.o."), new RegExp(".d.u."), new RegExp(".ede."), new RegExp(".ee.."), new RegExp(".ese."), new RegExp(".ft.."), new RegExp(".gn."), new RegExp(".ici."), new RegExp(".ili."), new RegExp(".ji.."), new RegExp(".k.p."), new RegExp(".m.c."), new RegExp(".no$"), new RegExp(".ny$"), new RegExp(".per."), new RegExp(".ta$"), new RegExp(".w.c."), new RegExp(".y.n."), new RegExp("^.ei"), new RegExp("^ca"), new RegExp("^ca."), new RegExp("^neo"), new RegExp("^od"), new RegExp("^od."), new RegExp("ane$"), new RegExp("no$"), new RegExp("ny$"), new RegExp("s.i$"), new RegExp("ta$")]
];
var format = "layers-model";
var generatedBy = "keras v2.2.4";
var convertedBy = "TensorFlow.js Converter v1.0.1";
var modelTopology = {keras_version: "2.2.4", backend: "tensorflow", model_config: {class_name: "Sequential", config: {name: "sequential_1", layers: [{class_name: "Dense", config: {name: "inputLayer", trainable: true, batch_input_shape: [null, 5], dtype: "float32", units: 5, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_1", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_1", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer0", trainable: true, units: 64, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_2", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_2", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer1", trainable: true, units: 32, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_3", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_3", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer2", trainable: true, units: 21, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_4", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_4", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer3", trainable: true, units: 16, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_5", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_5", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer4", trainable: true, units: 12, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_6", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_6", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer5", trainable: true, units: 10, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_7", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_7", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer6", trainable: true, units: 9, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_8", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_8", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer7", trainable: true, units: 8, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_9", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_9", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer8", trainable: true, units: 7, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_10", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_10", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer9", trainable: true, units: 6, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_11", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_11", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer10", trainable: true, units: 5, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_12", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_12", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer11", trainable: true, units: 5, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_13", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_13", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer12", trainable: true, units: 4, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_14", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_14", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer13", trainable: true, units: 4, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_15", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_15", trainable: true, activation: "relu"}}, {class_name: "Dropout", config: {name: "finalDropout", trainable: true, rate: 0.1, noise_shape: null, seed: null}}, {class_name: "Dense", config: {name: "output", trainable: true, units: 2, activation: "softmax", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}]}}, training_config: {optimizer_config: {class_name: "Adam", config: {lr: 0.0010000000474974513, beta_1: 0.8999999761581421, beta_2: 0.9990000128746033, decay: 0, epsilon: 1e-7, amsgrad: false}}, loss: "sparse_categorical_crossentropy", metrics: ["sparse_categorical_accuracy"], sample_weight_mode: null, loss_weights: null}};
var weightsManifest = [{paths: ["bedffnn.pbf"], weights: [{name: "batch_normalization_1/gamma", shape: [5], dtype: "float32", quantization: {min: 0.8108472228050232, scale: 6337680432473966e-21, dtype: "uint16"}}, {name: "batch_normalization_1/beta", shape: [5], dtype: "float32", quantization: {min: -0.23245108462793382, scale: 477184908808601e-20, dtype: "uint16"}}, {name: "batch_normalization_1/moving_mean", shape: [5], dtype: "float32", quantization: {min: -0.022761275663606962, scale: 1217050350957489e-21, dtype: "uint16"}}, {name: "batch_normalization_1/moving_variance", shape: [5], dtype: "float32", quantization: {min: 5300328484736383e-19, scale: 22274923221725225e-23, dtype: "uint16"}}, {name: "batch_normalization_10/gamma", shape: [7], dtype: "float32", quantization: {min: 0.8728584051132202, scale: 21855054607814823e-22, dtype: "uint16"}}, {name: "batch_normalization_10/beta", shape: [7], dtype: "float32", quantization: {min: -0.19791736462718884, scale: 552965368314676e-20, dtype: "uint16"}}, {name: "batch_normalization_10/moving_mean", shape: [7], dtype: "float32", quantization: {min: -0.05206773447747806, scale: 127314312730709e-20, dtype: "uint16"}}, {name: "batch_normalization_10/moving_variance", shape: [7], dtype: "float32", quantization: {min: 0.001010709092952311, scale: 36388101547779114e-23, dtype: "uint16"}}, {name: "batch_normalization_11/gamma", shape: [6], dtype: "float32", quantization: {min: 0.9095098972320557, scale: 1375433454035512e-21, dtype: "uint16"}}, {name: "batch_normalization_11/beta", shape: [6], dtype: "float32", quantization: {min: -0.017917155158910153, scale: 24453603328661323e-22, dtype: "uint16"}}, {name: "batch_normalization_11/moving_mean", shape: [6], dtype: "float32", quantization: {min: 0.01700889877974987, scale: 14843836289171751e-22, dtype: "uint16"}}, {name: "batch_normalization_11/moving_variance", shape: [6], dtype: "float32", quantization: {min: 0.001954785780981183, scale: 5278499703051397e-22, dtype: "uint16"}}, {name: "batch_normalization_12/gamma", shape: [5], dtype: "float32", quantization: {min: 0.8309152722358704, scale: 31414617342143817e-22, dtype: "uint16"}}, {name: "batch_normalization_12/beta", shape: [5], dtype: "float32", quantization: {min: -0.09821670043952334, scale: 40208253342417545e-22, dtype: "uint16"}}, {name: "batch_normalization_12/moving_mean", shape: [5], dtype: "float32", quantization: {min: -0.07555007263898686, scale: 2515317373784354e-21, dtype: "uint16"}}, {name: "batch_normalization_12/moving_variance", shape: [5], dtype: "float32", quantization: {min: 5534939118660986e-19, scale: 46626284818417323e-23, dtype: "uint16"}}, {name: "batch_normalization_13/gamma", shape: [5], dtype: "float32", quantization: {min: 0.8552291393280029, scale: 2666346275752766e-21, dtype: "uint16"}}, {name: "batch_normalization_13/beta", shape: [5], dtype: "float32", quantization: {min: -0.12207025368060219, scale: 36902643272348678e-22, dtype: "uint16"}}, {name: "batch_normalization_13/moving_mean", shape: [5], dtype: "float32", quantization: {min: -0.036983454987796684, scale: 191743337763359e-20, dtype: "uint16"}}, {name: "batch_normalization_13/moving_variance", shape: [5], dtype: "float32", quantization: {min: 0.0014860490337014198, scale: 8671168254125197e-22, dtype: "uint16"}}, {name: "batch_normalization_14/gamma", shape: [4], dtype: "float32", quantization: {min: 0.7249889373779297, scale: 5508233164453103e-21, dtype: "uint16"}}, {name: "batch_normalization_14/beta", shape: [4], dtype: "float32", quantization: {min: -0.10513538454375133, scale: 2181775225030118e-21, dtype: "uint16"}}, {name: "batch_normalization_14/moving_mean", shape: [4], dtype: "float32", quantization: {min: -0.08745201562736003, scale: 25064347719285784e-22, dtype: "uint16"}}, {name: "batch_normalization_14/moving_variance", shape: [4], dtype: "float32", quantization: {min: 0.0016179302474483848, scale: 790645026052522e-21, dtype: "uint16"}}, {name: "batch_normalization_15/gamma", shape: [4], dtype: "float32", quantization: {min: 0.9506064057350159, scale: 51034882038256445e-22, dtype: "uint16"}}, {name: "batch_normalization_15/beta", shape: [4], dtype: "float32", quantization: {min: 0.02792554721236229, scale: 26643103976412314e-22, dtype: "uint16"}}, {name: "batch_normalization_15/moving_mean", shape: [4], dtype: "float32", quantization: {min: -0.018237270414829254, scale: 15018904185034986e-23, dtype: "uint16"}}, {name: "batch_normalization_15/moving_variance", shape: [4], dtype: "float32", quantization: {min: 0.008397502824664116, scale: 2879953517642421e-22, dtype: "uint16"}}, {name: "batch_normalization_2/gamma", shape: [64], dtype: "float32", quantization: {min: 0.7786543369293213, scale: 6116799907316157e-21, dtype: "uint16"}}, {name: "batch_normalization_2/beta", shape: [64], dtype: "float32", quantization: {min: -0.1510825082403922, scale: 4572715140447706e-21, dtype: "uint16"}}, {name: "batch_normalization_2/moving_mean", shape: [64], dtype: "float32", quantization: {min: -0.041395777551907924, scale: 28735094788218743e-22, dtype: "uint16"}}, {name: "batch_normalization_2/moving_variance", shape: [64], dtype: "float32", quantization: {min: 4241851274855435e-20, scale: 23332108860588018e-23, dtype: "uint16"}}, {name: "batch_normalization_3/gamma", shape: [32], dtype: "float32", quantization: {min: 0.8216378092765808, scale: 4626483696043841e-21, dtype: "uint16"}}, {name: "batch_normalization_3/beta", shape: [32], dtype: "float32", quantization: {min: -0.09887272205629818, scale: 5057686943388316e-21, dtype: "uint16"}}, {name: "batch_normalization_3/moving_mean", shape: [32], dtype: "float32", quantization: {min: -0.2216112821580271, scale: 9891152963982464e-21, dtype: "uint16"}}, {name: "batch_normalization_3/moving_variance", shape: [32], dtype: "float32", quantization: {min: 0.12524060904979706, scale: 12311307545556641e-21, dtype: "uint16"}}, {name: "batch_normalization_4/gamma", shape: [21], dtype: "float32", quantization: {min: 0.855490505695343, scale: 33548451801491265e-22, dtype: "uint16"}}, {name: "batch_normalization_4/beta", shape: [21], dtype: "float32", quantization: {min: -0.13818838662510743, scale: 5133679568508338e-21, dtype: "uint16"}}, {name: "batch_normalization_4/moving_mean", shape: [21], dtype: "float32", quantization: {min: -0.19514149034006006, scale: 5085252784178351e-21, dtype: "uint16"}}, {name: "batch_normalization_4/moving_variance", shape: [21], dtype: "float32", quantization: {min: 0.08893558382987976, scale: 10585807195069579e-21, dtype: "uint16"}}, {name: "batch_normalization_5/gamma", shape: [16], dtype: "float32", quantization: {min: 0.9166246652603149, scale: 18091871908148138e-22, dtype: "uint16"}}, {name: "batch_normalization_5/beta", shape: [16], dtype: "float32", quantization: {min: -0.12383272392479026, scale: 4563242949655093e-21, dtype: "uint16"}}, {name: "batch_normalization_5/moving_mean", shape: [16], dtype: "float32", quantization: {min: -0.15550542356057145, scale: 409634433276886e-20, dtype: "uint16"}}, {name: "batch_normalization_5/moving_variance", shape: [16], dtype: "float32", quantization: {min: 0.021628908812999725, scale: 3951382876224682e-21, dtype: "uint16"}}, {name: "batch_normalization_6/gamma", shape: [12], dtype: "float32", quantization: {min: 0.9027432203292847, scale: 19990161835506106e-22, dtype: "uint16"}}, {name: "batch_normalization_6/beta", shape: [12], dtype: "float32", quantization: {min: -0.14848936061453216, scale: 4034050384811654e-21, dtype: "uint16"}}, {name: "batch_normalization_6/moving_mean", shape: [12], dtype: "float32", quantization: {min: -0.11579956861839985, scale: 3145701635836136e-21, dtype: "uint16"}}, {name: "batch_normalization_6/moving_variance", shape: [12], dtype: "float32", quantization: {min: 0.014967208728194237, scale: 17024021579515855e-22, dtype: "uint16"}}, {name: "batch_normalization_7/gamma", shape: [10], dtype: "float32", quantization: {min: 0.8900433778762817, scale: 34917453210850624e-22, dtype: "uint16"}}, {name: "batch_normalization_7/beta", shape: [10], dtype: "float32", quantization: {min: -0.14471431645446994, scale: 37543277241340205e-22, dtype: "uint16"}}, {name: "batch_normalization_7/moving_mean", shape: [10], dtype: "float32", quantization: {min: -0.032632628533776874, scale: 1904998746863799e-21, dtype: "uint16"}}, {name: "batch_normalization_7/moving_variance", shape: [10], dtype: "float32", quantization: {min: 0.009135251864790916, scale: 10100312481539886e-22, dtype: "uint16"}}, {name: "batch_normalization_8/gamma", shape: [9], dtype: "float32", quantization: {min: 0.8191483020782471, scale: 4841485157742001e-21, dtype: "uint16"}}, {name: "batch_normalization_8/beta", shape: [9], dtype: "float32", quantization: {min: -0.2633336235140466, scale: 7576637803948861e-21, dtype: "uint16"}}, {name: "batch_normalization_8/moving_mean", shape: [9], dtype: "float32", quantization: {min: -0.08427625364393958, scale: 2928597617678687e-21, dtype: "uint16"}}, {name: "batch_normalization_8/moving_variance", shape: [9], dtype: "float32", quantization: {min: 0.006584468763321638, scale: 11477279267563393e-22, dtype: "uint16"}}, {name: "batch_normalization_9/gamma", shape: [8], dtype: "float32", quantization: {min: 0.9226914048194885, scale: 17924058480094315e-22, dtype: "uint16"}}, {name: "batch_normalization_9/beta", shape: [8], dtype: "float32", quantization: {min: -0.062313063706578235, scale: 3285860773390542e-21, dtype: "uint16"}}, {name: "batch_normalization_9/moving_mean", shape: [8], dtype: "float32", quantization: {min: -0.18152362898138794, scale: 4549008344561646e-21, dtype: "uint16"}}, {name: "batch_normalization_9/moving_variance", shape: [8], dtype: "float32", quantization: {min: 0.0103415846824646, scale: 8781104108930189e-22, dtype: "uint16"}}, {name: "inputLayer/kernel", shape: [5, 5], dtype: "float32", quantization: {min: -0.5145149523013879, scale: 11537761858128625e-21, dtype: "uint16"}}, {name: "middleLayer0/kernel", shape: [5, 64], dtype: "float32", quantization: {min: -0.15959237275338603, scale: 9537012833356402e-21, dtype: "uint16"}}, {name: "middleLayer1/kernel", shape: [64, 32], dtype: "float32", quantization: {min: -0.18595294244794902, scale: 6011668901071674e-21, dtype: "uint16"}}, {name: "middleLayer10/kernel", shape: [6, 5], dtype: "float32", quantization: {min: -0.05301801761343849, scale: 20607928485030704e-22, dtype: "uint16"}}, {name: "middleLayer11/kernel", shape: [5, 5], dtype: "float32", quantization: {min: -0.09820545262013272, scale: 3734189612537843e-21, dtype: "uint16"}}, {name: "middleLayer12/kernel", shape: [5, 4], dtype: "float32", quantization: {min: -0.127710457681982, scale: 33313454111535373e-22, dtype: "uint16"}}, {name: "middleLayer13/kernel", shape: [4, 4], dtype: "float32", quantization: {min: -0.12636601191695898, scale: 4222616183818719e-21, dtype: "uint16"}}, {name: "middleLayer2/kernel", shape: [32, 21], dtype: "float32", quantization: {min: -0.16966277701413413, scale: 4665551409710824e-21, dtype: "uint16"}}, {name: "middleLayer3/kernel", shape: [21, 16], dtype: "float32", quantization: {min: -0.12359109624937215, scale: 360271378077167e-20, dtype: "uint16"}}, {name: "middleLayer4/kernel", shape: [16, 12], dtype: "float32", quantization: {min: -0.12537983768617678, scale: 359821603346755e-20, dtype: "uint16"}}, {name: "middleLayer5/kernel", shape: [12, 10], dtype: "float32", quantization: {min: -0.084557570038889, scale: 26990191209067956e-22, dtype: "uint16"}}, {name: "middleLayer6/kernel", shape: [10, 9], dtype: "float32", quantization: {min: -0.07738507056255367, scale: 30985013238259726e-22, dtype: "uint16"}}, {name: "middleLayer7/kernel", shape: [9, 8], dtype: "float32", quantization: {min: -0.14580799239973477, scale: 498557041645814e-20, dtype: "uint16"}}, {name: "middleLayer8/kernel", shape: [8, 7], dtype: "float32", quantization: {min: -0.11493543252215883, scale: 3284808017209455e-21, dtype: "uint16"}}, {name: "middleLayer9/kernel", shape: [7, 6], dtype: "float32", quantization: {min: -0.07715208026058043, scale: 24882149276157135e-22, dtype: "uint16"}}, {name: "output/kernel", shape: [4, 2], dtype: "float32", quantization: {min: -1.0532892554959743, scale: 31643611593341775e-21, dtype: "uint16"}}, {name: "output/bias", shape: [2], dtype: "float32", quantization: {min: -2.181577830548562, scale: 6657647187953375e-20, dtype: "uint16"}}]}];
var bedffnn_default = {format, generatedBy, convertedBy, modelTopology, weightsManifest};
var format2 = "layers-model";
var generatedBy2 = "keras v2.2.4";
var convertedBy2 = "TensorFlow.js Converter v1.0.1";
var modelTopology2 = {keras_version: "2.2.4", backend: "tensorflow", model_config: {class_name: "Sequential", config: {name: "sequential_1", layers: [{class_name: "Reshape", config: {name: "inputLayer", trainable: true, batch_input_shape: [null, 112], dtype: "float32", target_shape: [7, 16]}}, {class_name: "Conv1D", config: {name: "smallConv1D", trainable: true, filters: 32, kernel_size: [4], strides: [1], padding: "same", data_format: "channels_last", dilation_rate: [1], activation: "relu", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "Conv1D", config: {name: "mediumConv1D", trainable: true, filters: 48, kernel_size: [4], strides: [1], padding: "same", data_format: "channels_last", dilation_rate: [1], activation: "relu", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "Conv1D", config: {name: "largeConv1D", trainable: true, filters: 64, kernel_size: [4], strides: [1], padding: "same", data_format: "channels_last", dilation_rate: [1], activation: "relu", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "Conv1D", config: {name: "hugeConv1D", trainable: true, filters: 80, kernel_size: [4], strides: [1], padding: "same", data_format: "channels_last", dilation_rate: [1], activation: "relu", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "Conv1D", config: {name: "massiveConv1D", trainable: true, filters: 96, kernel_size: [4], strides: [1], padding: "same", data_format: "channels_last", dilation_rate: [1], activation: "relu", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "GlobalAveragePooling1D", config: {name: "globalAveragePool", trainable: true, data_format: "channels_last"}}, {class_name: "Dropout", config: {name: "globalAverageDropout", trainable: true, rate: 0.025, noise_shape: null, seed: null}}, {class_name: "Dense", config: {name: "output", trainable: true, units: 2, activation: "softmax", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}]}}, training_config: {optimizer_config: {class_name: "Adam", config: {lr: 0.0010000000474974513, beta_1: 0.8999999761581421, beta_2: 0.9990000128746033, decay: 0, epsilon: 1e-7, amsgrad: false}}, loss: "sparse_categorical_crossentropy", metrics: ["sparse_categorical_accuracy"], sample_weight_mode: null, loss_weights: null}};
var weightsManifest2 = [{paths: ["ecnn.pbf"], weights: [{name: "hugeConv1D/kernel", shape: [4, 64, 80], dtype: "float32", quantization: {min: -0.9303426819952891, scale: 24747105442232513e-21, dtype: "uint16"}}, {name: "hugeConv1D/bias", shape: [80], dtype: "float32", quantization: {min: -0.18430984903456935, scale: 5230428771058782e-21, dtype: "uint16"}}, {name: "largeConv1D/kernel", shape: [4, 48, 64], dtype: "float32", quantization: {min: -0.966494745464031, scale: 23436425361042484e-21, dtype: "uint16"}}, {name: "largeConv1D/bias", shape: [64], dtype: "float32", quantization: {min: -0.1907567201666986, scale: 4760349375291939e-21, dtype: "uint16"}}, {name: "massiveConv1D/kernel", shape: [4, 80, 96], dtype: "float32", quantization: {min: -0.642656005482984, scale: 20279457415051562e-21, dtype: "uint16"}}, {name: "massiveConv1D/bias", shape: [96], dtype: "float32", quantization: {min: -0.11451313604958918, scale: 37432379723322822e-22, dtype: "uint16"}}, {name: "mediumConv1D/kernel", shape: [4, 32, 48], dtype: "float32", quantization: {min: -0.48958909672640133, scale: 13965516066018237e-21, dtype: "uint16"}}, {name: "mediumConv1D/bias", shape: [48], dtype: "float32", quantization: {min: -0.13003985702632231, scale: 3911208404304689e-21, dtype: "uint16"}}, {name: "output/kernel", shape: [96, 2], dtype: "float32", quantization: {min: -0.4678861555449612, scale: 16746104350213358e-21, dtype: "uint16"}}, {name: "output/bias", shape: [2], dtype: "float32", quantization: {min: -0.01967980950713235, scale: 6005984529292383e-22, dtype: "uint16"}}, {name: "smallConv1D/kernel", shape: [4, 16, 32], dtype: "float32", quantization: {min: -0.5497482652548495, scale: 17081415152089533e-21, dtype: "uint16"}}, {name: "smallConv1D/bias", shape: [32], dtype: "float32", quantization: {min: -0.11728181664500037, scale: 43695025015834125e-22, dtype: "uint16"}}]}];
var ecnn_default = {format: format2, generatedBy: generatedBy2, convertedBy: convertedBy2, modelTopology: modelTopology2, weightsManifest: weightsManifest2};
var format3 = "layers-model";
var generatedBy3 = "keras v2.2.4";
var convertedBy3 = "TensorFlow.js Converter v1.0.1";
var modelTopology3 = {keras_version: "2.2.4", backend: "tensorflow", model_config: {class_name: "Sequential", config: {name: "sequential_1", layers: [{class_name: "Embedding", config: {name: "inputLayer", trainable: true, batch_input_shape: [null, 58], dtype: "float32", input_dim: 27, output_dim: 64, embeddings_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, embeddings_regularizer: null, activity_regularizer: null, embeddings_constraint: null, mask_zero: false, input_length: 58}}, {class_name: "Dropout", config: {name: "embeddingDropout", trainable: true, rate: 0.025, noise_shape: null, seed: null}}, {class_name: "Conv1D", config: {name: "smallConv1D", trainable: true, filters: 32, kernel_size: [4], strides: [1], padding: "same", data_format: "channels_last", dilation_rate: [1], activation: "relu", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "MaxPooling1D", config: {name: "smallMaxPool", trainable: true, strides: [2], pool_size: [2], padding: "valid", data_format: "channels_last"}}, {class_name: "Conv1D", config: {name: "bigConv1D", trainable: true, filters: 64, kernel_size: [4], strides: [1], padding: "same", data_format: "channels_last", dilation_rate: [1], activation: "relu", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "MaxPooling1D", config: {name: "bigMaxPool", trainable: true, strides: [2], pool_size: [2], padding: "valid", data_format: "channels_last"}}, {class_name: "Conv1D", config: {name: "biggerConv1D", trainable: true, filters: 128, kernel_size: [4], strides: [1], padding: "same", data_format: "channels_last", dilation_rate: [1], activation: "relu", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "GlobalAveragePooling1D", config: {name: "globalAveragePool", trainable: true, data_format: "channels_last"}}, {class_name: "Dropout", config: {name: "bigConv1DDropout", trainable: true, rate: 0.025, noise_shape: null, seed: null}}, {class_name: "Dense", config: {name: "bigDense", trainable: true, units: 32, activation: "relu", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "Dropout", config: {name: "bigDenseDropout", trainable: true, rate: 0.025, noise_shape: null, seed: null}}, {class_name: "Dense", config: {name: "output", trainable: true, units: 2, activation: "softmax", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}]}}, training_config: {optimizer_config: {class_name: "Adam", config: {lr: 0.0010000000474974513, beta_1: 0.8999999761581421, beta_2: 0.9990000128746033, decay: 0, epsilon: 1e-7, amsgrad: false}}, loss: "sparse_categorical_crossentropy", metrics: ["sparse_categorical_accuracy"], sample_weight_mode: null, loss_weights: null}};
var weightsManifest3 = [{paths: ["lcnn.pbf"], weights: [{name: "bigConv1D/kernel", shape: [4, 32, 64], dtype: "float32", quantization: {min: -0.6697528303610867, scale: 18217131248771568e-21, dtype: "uint16"}}, {name: "bigConv1D/bias", shape: [64], dtype: "float32", quantization: {min: -0.08239638525752466, scale: 17215767588960668e-22, dtype: "uint16"}}, {name: "bigDense/kernel", shape: [128, 32], dtype: "float32", quantization: {min: -0.6661090101349533, scale: 19757052057984673e-21, dtype: "uint16"}}, {name: "bigDense/bias", shape: [32], dtype: "float32", quantization: {min: -0.053888585068358794, scale: 22660352831402714e-22, dtype: "uint16"}}, {name: "biggerConv1D/kernel", shape: [4, 64, 128], dtype: "float32", quantization: {min: -0.6837339098724373, scale: 24706725080307773e-21, dtype: "uint16"}}, {name: "biggerConv1D/bias", shape: [128], dtype: "float32", quantization: {min: -0.12553712474614975, scale: 31785574059032725e-22, dtype: "uint16"}}, {name: "inputLayer/embeddings", shape: [27, 64], dtype: "float32", quantization: {min: -0.43874179625334725, scale: 13848298600257158e-21, dtype: "uint16"}}, {name: "output/kernel", shape: [32, 2], dtype: "float32", quantization: {min: -0.5254546250196128, scale: 16157394453418186e-21, dtype: "uint16"}}, {name: "output/bias", shape: [2], dtype: "float32", quantization: {min: -0.05317248850628851, scale: 16227450943415176e-22, dtype: "uint16"}}, {name: "smallConv1D/kernel", shape: [4, 64, 32], dtype: "float32", quantization: {min: -0.4902450690637275, scale: 15407790215089808e-21, dtype: "uint16"}}, {name: "smallConv1D/bias", shape: [32], dtype: "float32", quantization: {min: -0.17617523949813577, scale: 3784238846485571e-21, dtype: "uint16"}}]}];
var lcnn_default = {format: format3, generatedBy: generatedBy3, convertedBy: convertedBy3, modelTopology: modelTopology3, weightsManifest: weightsManifest3};
var format4 = "layers-model";
var generatedBy4 = "keras v2.2.4";
var convertedBy4 = "TensorFlow.js Converter v1.0.1";
var modelTopology4 = {keras_version: "2.2.4", backend: "tensorflow", model_config: {class_name: "Sequential", config: {name: "sequential_1", layers: [{class_name: "Dense", config: {name: "inputLayer", trainable: true, batch_input_shape: [null, 64], dtype: "float32", units: 64, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_1", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_1", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer0", trainable: true, units: 240, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_2", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_2", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer1", trainable: true, units: 120, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_3", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_3", trainable: true, activation: "relu"}}, {class_name: "Dropout", config: {name: "finalDropout", trainable: true, rate: 0.2, noise_shape: null, seed: null}}, {class_name: "Dense", config: {name: "output", trainable: true, units: 2, activation: "softmax", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}]}}, training_config: {optimizer_config: {class_name: "Adam", config: {lr: 0.0010000000474974513, beta_1: 0.8999999761581421, beta_2: 0.9990000128746033, decay: 0, epsilon: 1e-7, amsgrad: false}}, loss: "sparse_categorical_crossentropy", metrics: ["sparse_categorical_accuracy"], sample_weight_mode: null, loss_weights: null}};
var weightsManifest4 = [{paths: ["pdffnn.pbf"], weights: [{name: "batch_normalization_1/gamma", shape: [64], dtype: "float32", quantization: {min: 0.8096122741699219, scale: 72410016253782714e-22, dtype: "uint16"}}, {name: "batch_normalization_1/beta", shape: [64], dtype: "float32", quantization: {min: -0.42553290346773937, scale: 687385557890575e-20, dtype: "uint16"}}, {name: "batch_normalization_1/moving_mean", shape: [64], dtype: "float32", quantization: {min: -210488313041886e-6, scale: 5422.161593041886, dtype: "uint16"}}, {name: "batch_normalization_1/moving_variance", shape: [64], dtype: "float32", quantization: {min: 11520846044594176, scale: 18866412760532678e-4, dtype: "uint16"}}, {name: "batch_normalization_2/gamma", shape: [240], dtype: "float32", quantization: {min: 0.6866278052330017, scale: 7821105297237347e-21, dtype: "uint16"}}, {name: "batch_normalization_2/beta", shape: [240], dtype: "float32", quantization: {min: -0.35028037428855896, scale: 50132426129077226e-22, dtype: "uint16"}}, {name: "batch_normalization_2/moving_mean", shape: [240], dtype: "float32", quantization: {min: -0.7810700405732695, scale: 2303429887561619e-20, dtype: "uint16"}}, {name: "batch_normalization_2/moving_variance", shape: [240], dtype: "float32", quantization: {min: 0.04738006740808487, scale: 2030598982671783e-21, dtype: "uint16"}}, {name: "batch_normalization_3/gamma", shape: [120], dtype: "float32", quantization: {min: 0.7781322598457336, scale: 4766860888280248e-21, dtype: "uint16"}}, {name: "batch_normalization_3/beta", shape: [120], dtype: "float32", quantization: {min: -0.4070785320424975, scale: 7783974836845278e-21, dtype: "uint16"}}, {name: "batch_normalization_3/moving_mean", shape: [120], dtype: "float32", quantization: {min: -1.7164113917939767, scale: 4867457084745985e-20, dtype: "uint16"}}, {name: "batch_normalization_3/moving_variance", shape: [120], dtype: "float32", quantization: {min: 0.6441136598587036, scale: 6789188868140724e-20, dtype: "uint16"}}, {name: "inputLayer/kernel", shape: [64, 64], dtype: "float32", quantization: {min: -0.9499260056248026, scale: 20041901504837913e-21, dtype: "uint16"}}, {name: "middleLayer0/kernel", shape: [64, 240], dtype: "float32", quantization: {min: -0.4654376414654011, scale: 15278283924153135e-21, dtype: "uint16"}}, {name: "middleLayer1/kernel", shape: [240, 120], dtype: "float32", quantization: {min: -0.4357723155346908, scale: 11161628900535085e-21, dtype: "uint16"}}, {name: "output/kernel", shape: [120, 2], dtype: "float32", quantization: {min: -0.28821583538076523, scale: 8714535584336626e-21, dtype: "uint16"}}, {name: "output/bias", shape: [2], dtype: "float32", quantization: {min: -0.044700752571708344, scale: 13642003409438869e-22, dtype: "uint16"}}]}];
var pdffnn_default = {format: format4, generatedBy: generatedBy4, convertedBy: convertedBy4, modelTopology: modelTopology4, weightsManifest: weightsManifest4};
var format5 = "layers-model";
var generatedBy5 = "keras v2.2.4";
var convertedBy5 = "TensorFlow.js Converter v1.0.1";
var modelTopology5 = {keras_version: "2.2.4", backend: "tensorflow", model_config: {class_name: "Sequential", config: {name: "sequential_1", layers: [{class_name: "Dense", config: {name: "inputLayer", trainable: true, batch_input_shape: [null, 5], dtype: "float32", units: 5, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_1", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_1", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer0", trainable: true, units: 64, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_2", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_2", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer1", trainable: true, units: 32, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_3", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_3", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer2", trainable: true, units: 21, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_4", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_4", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer3", trainable: true, units: 16, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_5", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_5", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer4", trainable: true, units: 12, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_6", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_6", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer5", trainable: true, units: 10, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_7", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_7", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer6", trainable: true, units: 9, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_8", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_8", trainable: true, activation: "relu"}}, {class_name: "Dense", config: {name: "middleLayer7", trainable: true, units: 8, activation: "linear", use_bias: false, kernel_initializer: {class_name: "RandomUniform", config: {minval: -0.05, maxval: 0.05, seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}, {class_name: "BatchNormalization", config: {name: "batch_normalization_9", trainable: true, axis: -1, momentum: 0.99, epsilon: 1e-3, center: true, scale: true, beta_initializer: {class_name: "Zeros", config: {}}, gamma_initializer: {class_name: "Ones", config: {}}, moving_mean_initializer: {class_name: "Zeros", config: {}}, moving_variance_initializer: {class_name: "Ones", config: {}}, beta_regularizer: null, gamma_regularizer: null, beta_constraint: null, gamma_constraint: null}}, {class_name: "Activation", config: {name: "activation_9", trainable: true, activation: "relu"}}, {class_name: "Dropout", config: {name: "finalDropout", trainable: true, rate: 0.2, noise_shape: null, seed: null}}, {class_name: "Dense", config: {name: "output", trainable: true, units: 2, activation: "softmax", use_bias: true, kernel_initializer: {class_name: "VarianceScaling", config: {scale: 1, mode: "fan_avg", distribution: "uniform", seed: null}}, bias_initializer: {class_name: "Zeros", config: {}}, kernel_regularizer: null, bias_regularizer: null, activity_regularizer: null, kernel_constraint: null, bias_constraint: null}}]}}, training_config: {optimizer_config: {class_name: "Adam", config: {lr: 0.0010000000474974513, beta_1: 0.8999999761581421, beta_2: 0.9990000128746033, decay: 0, epsilon: 1e-7, amsgrad: false}}, loss: "sparse_categorical_crossentropy", metrics: ["sparse_categorical_accuracy"], sample_weight_mode: null, loss_weights: null}};
var weightsManifest5 = [{paths: ["uedffnn.pbf"], weights: [{name: "batch_normalization_1/gamma", shape: [5], dtype: "float32", quantization: {min: 0.8718264102935791, scale: 3957873925269946e-21, dtype: "uint16"}}, {name: "batch_normalization_1/beta", shape: [5], dtype: "float32", quantization: {min: -0.10151437411555583, scale: 2293229134921179e-21, dtype: "uint16"}}, {name: "batch_normalization_1/moving_mean", shape: [5], dtype: "float32", quantization: {min: -0.014588608678185603, scale: 10114121379773713e-22, dtype: "uint16"}}, {name: "batch_normalization_1/moving_variance", shape: [5], dtype: "float32", quantization: {min: 8837491041049361e-19, scale: 5306590515035891e-23, dtype: "uint16"}}, {name: "batch_normalization_2/gamma", shape: [64], dtype: "float32", quantization: {min: 0.8545262217521667, scale: 5777022963559008e-21, dtype: "uint16"}}, {name: "batch_normalization_2/beta", shape: [64], dtype: "float32", quantization: {min: -0.14931319737639936, scale: 3310200132493834e-21, dtype: "uint16"}}, {name: "batch_normalization_2/moving_mean", shape: [64], dtype: "float32", quantization: {min: -0.0817971780606281, scale: 20890075099762002e-22, dtype: "uint16"}}, {name: "batch_normalization_2/moving_variance", shape: [64], dtype: "float32", quantization: {min: 6659140926785767e-19, scale: 5206302263608916e-22, dtype: "uint16"}}, {name: "batch_normalization_3/gamma", shape: [32], dtype: "float32", quantization: {min: 0.8487213850021362, scale: 3906031936222914e-21, dtype: "uint16"}}, {name: "batch_normalization_3/beta", shape: [32], dtype: "float32", quantization: {min: -0.2614193104848151, scale: 5918481106742474e-21, dtype: "uint16"}}, {name: "batch_normalization_3/moving_mean", shape: [32], dtype: "float32", quantization: {min: -0.863162579517884, scale: 3205446299457383e-20, dtype: "uint16"}}, {name: "batch_normalization_3/moving_variance", shape: [32], dtype: "float32", quantization: {min: 0.1360669583082199, scale: 27223260968211877e-21, dtype: "uint16"}}, {name: "batch_normalization_4/gamma", shape: [21], dtype: "float32", quantization: {min: 0.8616077303886414, scale: 37220738213695487e-22, dtype: "uint16"}}, {name: "batch_normalization_4/beta", shape: [21], dtype: "float32", quantization: {min: -0.2749777422323874, scale: 58202506557812975e-22, dtype: "uint16"}}, {name: "batch_normalization_4/moving_mean", shape: [21], dtype: "float32", quantization: {min: -0.28922751271734704, scale: 13706815445587747e-21, dtype: "uint16"}}, {name: "batch_normalization_4/moving_variance", shape: [21], dtype: "float32", quantization: {min: 0.027007022872567177, scale: 15301357105202666e-21, dtype: "uint16"}}, {name: "batch_normalization_5/gamma", shape: [16], dtype: "float32", quantization: {min: 0.9099695086479187, scale: 19528304283611833e-22, dtype: "uint16"}}, {name: "batch_normalization_5/beta", shape: [16], dtype: "float32", quantization: {min: -0.20243256377100152, scale: 49573298339904865e-22, dtype: "uint16"}}, {name: "batch_normalization_5/moving_mean", shape: [16], dtype: "float32", quantization: {min: -0.1159501756320804, scale: 660158139558645e-20, dtype: "uint16"}}, {name: "batch_normalization_5/moving_variance", shape: [16], dtype: "float32", quantization: {min: 0.006350916810333729, scale: 21831155422441998e-22, dtype: "uint16"}}, {name: "batch_normalization_6/gamma", shape: [12], dtype: "float32", quantization: {min: 0.8910359144210815, scale: 292111054305e-17, dtype: "uint16"}}, {name: "batch_normalization_6/beta", shape: [12], dtype: "float32", quantization: {min: -0.15319890347709095, scale: 447139406564389e-20, dtype: "uint16"}}, {name: "batch_normalization_6/moving_mean", shape: [12], dtype: "float32", quantization: {min: -0.2598685638722852, scale: 71392462602276146e-22, dtype: "uint16"}}, {name: "batch_normalization_6/moving_variance", shape: [12], dtype: "float32", quantization: {min: 0.01505335234105587, scale: 2848583287729627e-21, dtype: "uint16"}}, {name: "batch_normalization_7/gamma", shape: [10], dtype: "float32", quantization: {min: 0.9354199767112732, scale: 33521257494956068e-22, dtype: "uint16"}}, {name: "batch_normalization_7/beta", shape: [10], dtype: "float32", quantization: {min: -0.12474658424856824, scale: 4274778433574404e-21, dtype: "uint16"}}, {name: "batch_normalization_7/moving_mean", shape: [10], dtype: "float32", quantization: {min: -0.07908255574693121, scale: 34053548528153647e-22, dtype: "uint16"}}, {name: "batch_normalization_7/moving_variance", shape: [10], dtype: "float32", quantization: {min: 0.010145053267478943, scale: 16488838024813168e-22, dtype: "uint16"}}, {name: "batch_normalization_8/gamma", shape: [9], dtype: "float32", quantization: {min: 0.8751623630523682, scale: 38098150235687813e-22, dtype: "uint16"}}, {name: "batch_normalization_8/beta", shape: [9], dtype: "float32", quantization: {min: -0.1764297826048929, scale: 4407879443484058e-21, dtype: "uint16"}}, {name: "batch_normalization_8/moving_mean", shape: [9], dtype: "float32", quantization: {min: -0.06834876056761402, scale: 3196705512726908e-21, dtype: "uint16"}}, {name: "batch_normalization_8/moving_variance", shape: [9], dtype: "float32", quantization: {min: 0.016757411882281303, scale: 15611680949444609e-22, dtype: "uint16"}}, {name: "batch_normalization_9/gamma", shape: [8], dtype: "float32", quantization: {min: 0.7157083749771118, scale: 15571423541710998e-21, dtype: "uint16"}}, {name: "batch_normalization_9/beta", shape: [8], dtype: "float32", quantization: {min: -0.15315444641621878, scale: 19587472364268933e-21, dtype: "uint16"}}, {name: "batch_normalization_9/moving_mean", shape: [8], dtype: "float32", quantization: {min: 0.01045406237244606, scale: 25701506797059718e-22, dtype: "uint16"}}, {name: "batch_normalization_9/moving_variance", shape: [8], dtype: "float32", quantization: {min: 0.008399548009037971, scale: 15767954418949707e-22, dtype: "uint16"}}, {name: "inputLayer/kernel", shape: [5, 5], dtype: "float32", quantization: {min: -0.177902796020713, scale: 5908821443493855e-21, dtype: "uint16"}}, {name: "middleLayer0/kernel", shape: [5, 64], dtype: "float32", quantization: {min: -0.17424178754309272, scale: 4980328918512911e-21, dtype: "uint16"}}, {name: "middleLayer1/kernel", shape: [64, 32], dtype: "float32", quantization: {min: -0.19936901848003505, scale: 6399262348901783e-21, dtype: "uint16"}}, {name: "middleLayer2/kernel", shape: [32, 21], dtype: "float32", quantization: {min: -0.1629155564632861, scale: 5578153682917418e-21, dtype: "uint16"}}, {name: "middleLayer3/kernel", shape: [21, 16], dtype: "float32", quantization: {min: -0.1766677187224352, scale: 54038393149125255e-22, dtype: "uint16"}}, {name: "middleLayer4/kernel", shape: [16, 12], dtype: "float32", quantization: {min: -0.18139854647742717, scale: 5382426754418941e-21, dtype: "uint16"}}, {name: "middleLayer5/kernel", shape: [12, 10], dtype: "float32", quantization: {min: -0.12419052342851201, scale: 41659294699443836e-22, dtype: "uint16"}}, {name: "middleLayer6/kernel", shape: [10, 9], dtype: "float32", quantization: {min: -0.11275258066179988, scale: 4417858344244177e-21, dtype: "uint16"}}, {name: "middleLayer7/kernel", shape: [9, 8], dtype: "float32", quantization: {min: -0.21974302145498353, scale: 6480756818797993e-21, dtype: "uint16"}}, {name: "output/kernel", shape: [8, 2], dtype: "float32", quantization: {min: -1.064495578977821, scale: 34370720318291984e-21, dtype: "uint16"}}, {name: "output/bias", shape: [2], dtype: "float32", quantization: {min: -0.04208551202893958, scale: 12843870976573863e-22, dtype: "uint16"}}]}];
var uedffnn_default = {format: format5, generatedBy: generatedBy5, convertedBy: convertedBy5, modelTopology: modelTopology5, weightsManifest: weightsManifest5};
var bedffnn_default2 = __toBinary("");
var ecnn_default2 = __toBinary("");
var lcnn_default2 = __toBinary("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qaFxsNeJf5JRYTSdDopOoG2ZA3VGbBWdp3Z3eZ2IWWznbnx4QpEXndqEmHa3ucWaAogFtgm1lJllj1umJ4XBgvZkJLn1u1mKmW/KqlO1JHrMnT2MWGXsaoywlH13a8t0KYdAa6qE0433gNtoHopSmfFth2nob5OELKIscVKAoHK4ddF5y394YqiD+W7ref6uD12cbopwg5Bih/9vCoZTfPCUFIpArSmyRWw3gBmgCYOcl+SJQ5pRdIKedHhGY/yaEHZTl26sz5Umt/6cr6SYp5FgxaBdlN93i5jEh+uaiGwtgJl20HT0jqqYoXsRcWaSG32dePd7umQrlI981Wdeb7GeMHG9h+Ka65lAacCGNmueY6WbdXMZftJj1aCjnOB96nC0sFRvzVUthz6gZbDyrpuSu4AMvYxhvpZykrp/6HWadRWIraN8ZxeEBI2Yky9o0I23a0xre1RH106cLW2kggXFwXdZm/mKYKXOjBlxyYNlV6yhAXCFe0yprXHEu0hvNWqAdYaGoqIAs5iXoWRcunlwe6m4Z1WUcpsudHiymmCfbbZ/RYtckzVy+pw3p1SNznIXm6WfD1zLbUSnwHzqg81nD3gIr6pYCpQBtc+aaoxhlUJ5rV29Zfhs5105kTp0THYZhby3xbNgYZuB1p36ajKVOoaXcuxpB7MtepyxsYZznx5dj6OzamC3bV6CZYRuP3eMqNBuVbUfYJKGwbgAaT5ehLSGWI19b48kbeKOw6NCcOabrZqAdAWVJqj4a7e7dHwHjxq9AFy6iw+uNohXlbmIRnTdmw2UE1t6cbueVoHvZOWfqY20anZ3n3JSv8e6UX6qtlSgh1+sknqNw039rnaMPp5GgbqVmlCApDqCbGbmiSZ3yIDjlP2QA3ezZ0t1kpVjcI+0w29pjd5dIoN/oTdr66WTX71mUKQch2KhAXdcXgxiKX3uajl6AJZcdvarZaOCnzB1BnGym/9hIZWeigiV0HJPmz6DJ3Q8bCeky2UjlwqT2KbAV8KYjV6gg4ykT4T4pEyT7ZYmo7CkJp9PsOiRNIlZXOewDYSofVekUHz1gixjtI9uiWelC3heYW2GZWGOhdCSWH2pdiVh4Wx8jp11m1+OnPNpFY+CgY1+lan/il5+DopLl/JZLoQjtOBeyZVvtHx1wYy/drJlq7cwqfaCjJ2Sm91drHO8gDtZv3aia/mb03QDhcOX8bi8ZyZt9qMwcgt/AmvzmuiE+oS3jUd37IkklJino3h5bZGdcmvckMVjaKADjSmErHUqhQCkwnO/jcFyPnbGZcCASGBPfAehy2bJket/dalDj85p9Xyjp5qDhJvffIOe86Vdnil2pKWFsb52GZ1WgbmjiIJFkzaJsXHmlwVuFKVvoENprWk3dYSob2bkif6cxKS4kKaYAV7DgLON/3ewjuSaa2r2lxCDyX40hZeki3Z3Z6N3BYi2jpabK5sgoQSTrKS+ebWDYGgRhXxyc6RniR1kJaxmZaWXjbiYYUNX4Wu4YLy1oq6laPRxunZwbJaXEmynXFOS5WyCltKJOnf0cMa3EYyUU15qbV5cZJFs7H1cm9qWdGHeXGiG3GrRcL5ja58WjNKjS5umraOOlXc0XaOGZ2Z3qyOR0pmArxl/lnTJp3eUUX+lXiJf85H7S9yOxnjugCOOaZDLc0h/isGqmISJMY3PmzrIBrFlol1dRHrjsnWtzW0VinWwLn/hlG999YpPap6zbZ2QlX12vIU6vKQ3alt3EQzIimD//7DHk0o7TbxCnHBUgzR1vn0AAPjPPSoh289fTSimYTFpVAw03XpeRRNByXAwTdK1QdXM1HoEZadoOW3UbMxcfn3peC5gGUqjboZiaWVvUe1v7G4NehhgO3RnZ+ds1m7LXGhfXmxRdvxka4OJf8tqNHPga9Fvl1zoZllbZnxfZ3dr3HS9aLmKwWw+fzNv63TTYzhell0MXMxii2pFdXB9EW5Mff9lK18ZdoFii2sRY850AGbmawN1XnUhavtOCWQMaft/zV2EZJR91Hf3bo1g/GZSbytzZ36TaYeCEXzgd312ul+tbyhiF2QQYyF73ULrbqZ3KV8cfrhv+Y0fakRqnmz3aJJu2WUBWLF/dG5GdYlj+HBbc2R5F3Q1bedhfmwsdtBZC2Gxb7Fu01UdZel/nHzkU6ZxamR5aFhz0W5AWJdlgnoBdAhY02Rab4pubGWOaNZs5Wi1YzhlTXMDbYZwRH5gYzJnZGo9dVVwhGhmWuF01nWSbphWWYiUecRyhG6KdBF8yHzWeCN/qG8aaM11WF2nbs5uW3Q5XWhr72/DcYtynWrhbvyBV26Qa1xlW37sahxpbIDOZO53KGp5c7RpvGHcc9h9i1+wVOJnI3k/dnhrqHlDbuxzsnBxZDRyCmMVbmVnEmnrZfdN7lnEbXZxnHutcLBeH2HQbK9H4npEXLBnHWapZOZ4TWenX+FQeXB7b3xfXWEcaW15NnfqX8xt+XSnZwp0N27hWYduRGMReRdqYIyFaytuDm46YCRqOWoIbZBu/l6Eae1lW3JaZsFy7GxvdQBxe3/MaY9qM3IqZetxeW6UelB42WHrbbBxGGwZd9ln/2fqZ+dkynE4dQJV+mSCcXhf0FsfbwNnK3/OZYJthmzsX2lf4nJ5cSRv/nlFZ49yOmKJby1nYWr8cg93m3IlZ+92YFqtcg1jmXt4YYxeOmHPcxZj420gcOxo5GctbhJrNniadnt4+3ebaKRpvm9+bPdj7mv+eKltFHQ7c79hYnAObN1ZvHLYfTJz9Wlpby19rWYeYg9hPnWcdjV4tXctb0Z2J10Ddtpp+17BY8F0aHI1X9Bj+F8Cfhp0dGLsbeluomgAaXxtOGYMeLds5n2nekdykmI+bPto/XWQYoNlHWvPZOF33GZdhRJtt2QSaZVuqWd5bo5nAF6hZopvc3DXZ/ByB2kgfU2CtnjhX9tqN3Uxf6ZFLWLAYvp3Tm2CYgluJW+GVSZk+GYQXCV6s3ypajReVoE9ZnBmpW1pfNx3FmXlb0VsAHJWcMFyZmWhZXdlRIEvZw5QKWo8fXp0YmrvZnJvmnK8Y+NIIG9qaBpjOnKIaD9gTmoxaLZ9zm1SfA1nJWuaaHppyXJ9ewJurG81c69m0W2adY59uW7CZdaGQm3ZZ3ZgRntreYZ57G5AabWAgWGaZ9xw/IAWXDJzxnMncex85nE1autu7XdjZMFhLnqQaK9rhHxRZF51rWHKcGBw9Wnsbzhq8XxHcZxjm3Xve99ncGo/e0Fxq2pyeKR2RXZgbT589GwzaD5t9lDhgAlrN3ibe8hv1XDpdKmDjnVqY0thn2ahbmF5Sngma2V57nL4bkZtm2e3bPZ7x31ecUtYx3JAeKV1EF9Ch61dPWlVcUp9C2QodltkvVthf7Jl6nLNa4tw0meoWxtk+2dceeRkr1kLXOtYOGjNW1R6YHZUZVZuH2uAeDNPYmq6bJF5DV02eIV8K2thaxRwbHfMenhmVWNGXoBaJIHfYPx49m8FZ5ZpwWShYlJ8HWzuckZ3bHlUdwx9x0lOX2F9KEwRTlRr8WOMXvdpW1QWbmlTYl8AZSxaunRecj5oSHajcWWLJXRAU990lnfeXz5VRYKlYvtvPl3eaSJ6AITHWzNgD2deYqhspmm/YKVZWVp+bQl21lh0a9BjD17OXnBrlV9tYIVS0HAkdJVhqG3IeqZoSFUtYZRavHojepxZc2eDaohnE2sFctpmwVc7ZW9ZS30uZMN+xXfSTtJ1VEE6XSZTAXf3cF9UUGe7Vlxc3lFGcadcQlATX2hLXHN4VNtn7nEfbfxQG1+caSBqWlOMXWh86mVVY2dRsV5ZZ19uamEuUYx5t3Q/ablRRW1qawRmmFNAUFdrB26YdL16umZjd7lqEX9bbRiBxmwHarB8emfDeA1qy2zfcBN3Q213iMxyr1+UbB1vwnwqdGFuTnIPdIxjSHQLfzlr3nlOi8BuJnFmU2toH28pfJV0Dm52cn5ky22gZg5yfmHLbURdxG+OW/9nS3eDfHZs1IMydIl3Snp/ddt/YmqCbvBnWHAmWz9TFG0FZxNuem/Ia09Re3ZmeGljxmpIdD9zT2xTYrxHZWvraslyU2WMeyhrbmlfd211bZNUfdprAGmFYZV8PmBwZAJnB3J5f3ZvNnIof4d4ZHiyZq+K3mkQaXNZXX4ObKNlhH2KamhrOWb6e6VofnoOZt9q4IFiiZp9PWsXdGJpNGGlaHBiQ3Y2aeRqZHU3W+tgrmmebrlhVWgDdWFvVFSje5Rm5HOhijJ9DW/+Z5h2lXV+e3dlg36LZXZ2hmimfPN17l2jdu9mlmOMdJJyZGsUYgB3EFzhbXRjbVIkbmJuEGDCdpxynFnlb/tsSmuBeCVzlGGnZkt7f290gI526Gh4idZs33XCgOpliG0UdAZuxmgmdw9jyXKkc2tgZ3YzS9xrtWCjfRtpzmaLZqVqvmQ9aTVk3m1WXvVtvloZbK8r0nAlas90PGQmcS16FmrRXxhpFGnPX7Zrwma7b/BgG35Jcpx6AX5pafJxGWLYYvJ5Z3NuaMZfZFJWXO1qDXxBY+luenknZldjznxOdTtjanf/cC5+lGScc6R/ingyX0N1BXGIZZFzcGvod4tedGVTcJhdkW0gZvJv0mgOXruAb2hAZ+RiuGlUcS1yG142d0l24Wd4aNNy8ZOVasp4+mbzZWZf82LceWl7gGotecZtbnPEblqLq3OugAhoyFkha9ltwXvGdsNbLXCWcmBr4GnOfZVt8VsBXctwXm9kdC1qV3prYE9+yWBYdwhuFVfiZDZnyGQ0ck5qcHsnf7+AamjgWKZlzFxucvde5GtCbv53yHyxbBZ2v4knX+pqEV14e6BxyGuTeIJ1G24xal10AG+AfpheMG/qa7Z0flp9a/N+1mQ5VMxnUWzCWQtp/E1bVKZlMGXLSoRngmWpVQ9i02Vackxd32GRZD5kk2lFSoVo+24NcitdxHD6WjmB6m5jV5trU3O6bNZTmofgWg5Jb3lMc/t0kV+Sa2pkkWb8Z0prxHradv+B6oFefWNviGVcZQ9f0lkgeT13XlmCaURbcWGia4dhyV61ckNhu1UUaip+QnuMdatpH27rVP1bnH4la6WCT2BSeiRpemKdeoxuclgPeN10d2Oob413kVPWW7dxkXdpXAxe51pzb5tq4m+JYelkFF71W2lSmmKGhotvPnr6W99uk3LvW3pSTmQAbDhg3l1QY7t2QG3ZYlN6TWt0cDZltHMNZGV5GmdjcU1l+GH7ZIhkSmwqbthuPWu/biFmzm2PZuB00n0WdClwEICkbdpwf209a8947Xuxab9r/Hr7enJ8omWTfKh4MHVSUz104274cWhh9W+fXbxuTGS8dRdurWzLdzhiC2RmYbyKxnYZbjBs+21BdxRtJmubX5Zwx1phZg9y0G2pa1CAF2TaanRqbXFBXHN2XITKeaJmql5xYdNprGmUYStiFXabaoliA2RreyiEIHaAcmtorGcwcPVgRHvIYUpy8Wwyahld3H6gYmV3uF+6jjVe2HHtXJ5p3XrhaWhjSHhuZhdwdXpoXrNm1HDvdV54fIw4bmBj1GJSdLNlNlihWXhwCEmlUoloI1v+ZrhMo3Gicpte8mbJan1qV119bup64GlfXJRkLnG2YJBLynSvS6tllFKPbR933W5IR/JiyHcsVLVoWHVQTplYFVGLczxo2F59aH9tkWf2SL1o6WK/YKhKTW70XoJW3mrhewtfoWWVX/phEXcyaipk5Y3+bzlf8mP2feJuqWXfSGNghmVRcOphu3o0VnZ29lFpaApd4nEKY/pdGW8VUSdNDEd/YEpeb15lW4hgNG9kOKd2g3FNc/hVQ169dJdf21JGXFVy5F44Z09jpmi+Z+J2hVBEUyFymXf2ZTRW0XLCZWN2B18+WkBsQ2jWW6aFoGfxap6J1YpgZrZ1xpiSY9KDTWxkgjZnjHGsiTJmDWvJhkJgL19kUVphhY0tYVZaBoZ4gHBpEJB2Zj6AMmW7ea1dTIf9XrdgIYChctNtF43Re22M81kfYkKN02CzVGtgS3yDa9SUwo9NdzduFn2uiGpso11Udch+yFZviy1k0Wbub/E9eWUrcQ1YhGZfcrMtAXwtePNZXl95VvZmc4XJc0A7U2LLgO5WeHlSjPx7ZncZiuyCClkMgqWQpIBkklxpt3RlWS90KmwWkFVf6GGoXaeSQI1bW49yyHIvjEBd4G/WbpSEhIODWQ1v53SaiipsA2FOaxmLfHnraQZ0U0hug35tnmQylfKPlF3rk2iRWVLPkWZdxZKkZJ9ivaFVT1d0VZlIPQl1AURTZFhwykZTYl6WyI2TVhqH60umicxVe44vdgWBblJZUW6ZI1ITeYeIl5h/cuNaqmfTreZodXn3agKDsm2KicOFDXXecT6QtpB2RGpj75Z7jBxSdIZvXeVWPW7Xd7BfaGwJZOda3X03TSGEqYKKWbZs41w6WZyFh2QyOolw8pg2SoCbYoNAYwaHdo1FhkZ0/oozkEyIxpFGVnlODVYWXyBZp3dBeORZUUL8mI2JSFOPgnFk1GQWVbB9p0yjndefFEQIVFNg9H9XZq5R5nJqlTmOOIzpcSd1k1xwao19w2CyZm54C26becp0o23ubAlvx2J+YWlym2tRaoZpjW/mYtB6P3gcbCZnNHOwbPF3pXFQX61yVWMKcypr4XcBYD5XyWIXX311hWfcallyCXFbeuVx2netc2FsI2QbbOFtHmeubWNip3gqcddjT25BgNlwJ2ZEXUJhTXhdZCRyuX8lahdqWWh1c3pjVW4Bbatj/HahY7lnv3ogbj9eqXWycpJpzH2LcuJVUlyzXbZ0AlmFeFZjjWMRcPplU3vyaEJt6G9ve3dey2C2ad9rNWStZu9zxXJ5c1Z62mHicTV8+HNAaB54XXDSaCBpm2DpdPNfinEBXeNh2q3mj9lWwW0elupiQGiRkEFtTF42lMJmul+GYgN3VGO6TROLHGRta0edhFzXoRaz+GcRnD+RZFhBYGGUy1Rvk1JgrJDiaGCoWmk5c1SKGV/ZklNquWqqaHl2K5nRYCVlY2jNdgRoJmWvYcVZ/mqVXrhdFHYObBKURY9YW1pUwW4MazqP1phAZPfKFHJTZiagtpv3dYJjFWnwYHKDZGall82KYWfraTI0TXWdXHiVI3DHWyhgt1j7XSNeFY54cQxuEGfqZmSfxh4gh/hlhpGNVpZoOYu2ghtYQGBxn+R6qWhjcXFtqVhnlk5lrGKHnNt/2GksX3h66IQeY+xaA1sXlupZsVxSbXRz02lKaeGBZlTrdfhFKGJYeGBzLEQ5c95xdVZtSHl3HGYPW9xe80cXXVluAmS5XGtvvnrfXv2FiVP+evprBXVZUtxo+F/mZEt2NVY6YwxqsnY6ZgdlVG/eY5ZvgXAadh12GW/ka5OEEYbRbQ5OKFj+VcVt53TXeURoSXxTaMBbam1BUvF22F53Wdpd/HNTc3x2uX+CX4ZeQ1vhXb9+al44fChu/WiUUKlScGLrbiBevWSKY5tJV3XIcjhZNl/RUzmUo13vbd9gf348cbVX3l8MYrBlMmLKWOpkQoPgbP9rmGOtYW1kW0vcYrJlTHS3ZVle9W56c2d4qESPYwRrrnFzc0Vp2lziZ2t9dHzRWNltT3MScA1oCHKbZVRedHtna6d8vmfiXzx3oFCmcCZoRXzjY1d13l3mYgds5W1eck2NEmVxdDVUvXZSXZN/HG2WZ0Ni+lQeX7BftVmrZ/lwlW+Cd2R0bWgxZedrU2qrgmtgJn2WaFd/EXhXVYVqQmHXa4hmiWlkYh9pIF8udyB1HFZOfd9v3WfIb0F+WHVdZxNfCVOndk9kKl6+ZyBwjGSMbitr72phgVpnZ3JXctRtdmX6h7Ny4WryfTpynm1FbMdt0nC5bFlY8oQ0cu5lIGiIaIFrIFSeZKlq73jvciV0Yl1SdBxoBG4pdqGOr3WHY/J7Q2yEYQJstnngX5ZzGVHbZANfs22zMK9grV2sSuNa/2IhXgRkbWlaWh5iEXmTdbJmNHlWaKxrIX/cZzeCJn2FWbdwVnercphe/HlNbGqSvHWaheNeJ2bxcS9VtWCAbdFzqXoqXOB8AXY0a7xpxGmxb21hs3zSefp24oayZo5x4FWFYltfmWNkeHZhgG3YZXpmXGq1cOxvwGRqWn1tR3IeXkN98lo1YvhtN1uqheVkK0bjVgx2V2WDe7lxIHQ9UDxYaHSSZc5ewHLccO1kM3IAZFtpKE3pVZRgAHAtaHZ6WXFlYmNcwXUibCNedGi/caZxqVz7YXNyR3vqYP11h3hzR1NwUYK0MZ1QKnjbPWo69YPgN8Nr8i9Nd/xonSDuhCtvrDx3dWtukneBg4Y9BX8fgg1bgGHyiLFIpnrVR+OEDV13d9E8u0wCgC1lLXS9r/JQyEe5QyJwH26RH+pnp14YbD1cUn5URlAtSUpJZLYqhVP1ddmAvyzcR6dK3kQFcoeEuWIsaiJp3G52c5eMoFlpZBBXuDimjbBfUX4ZhwNFFWrGczV0wkvWhXYiAT56YNEeJkZBVatV2UQ9Ob0v5jpMed6HN3FqXwZ6bTUwXM+RXoqNNYgqbpcTSaZrhzsfUgFA6YruTcBNmIZZhm9wo0xTYoCHEl+1XzpRAFHmbeZhC2t4aoBjFn3xf4peoWMVjDVo2HRzbAqN8Gd/YqWKkXDCZ1d4lGrAcLJ5ImmVaY1jQ2TUa+dwxWfIb6db/G25VJx6SnaIaWxbo2KjYkltsEB/YZNm64GIZglwV4pjdAZxCmYxa/9cx3zIf5Vt72Bfj2xsp1+7ZjZ4B4AsZfZ4Z1t3W7RqYE5wYTlpNF7CerB4OF8Ha8hoSGMGa9lcAFfmbedqazjsX1pwdmSEgBRj1HD9ilZ7lHhrilV6YnXWdc2AE2vMWtllw2Xaa9aFf2kCbsxrXXD0fMNj74CJb0h6FlmWdu1sjWreZaVhE2E7cB1ogHIZaUxg33DNgEF+h4VfhRJotFwrbxVPAGuAfIJn3F38gotfVXWYay9ecnZEcNyFYF6gcNJ8zW6EhKSEQ2AwfsmIY3FWaGiEgWWtgx9qMHK1co+EclyOWO5uIWdKee58HWnqcNVjQHpBcVVN1F5WZlVu1Gx5Xy110VV5W3ZssWmhcPmCVHhvZSdfloZVdquFXnNyZkBY+G5zaHaF3XJ8VlpVrV36bct2pXA4hS2BEGOzap1A8WA7X/h6FlU4bQN1eU0TVLhsTnwhbshX6VHvXj93n19GcuFpfICsZbFwGIhgcdFiCVTQccVllF4TZl9ilF7cf1pm2V6wihCDs2uYaIJ0q376YaplwGA4fEZtvmavcD1oRHAodrV8NGd+azV0115TgON2tIyYbk5uJI0UZ1l2Jn02ZBlkImJaXnx9fnwPdaxhfHHKTRd+XW0dbrZoWG80buRyTmLEWfZ7zXXcTUZt92ZUgF1dxms/jJ1kLG4yZkpelGaQfQp+h3ceXjVs92vIZ/lleGzddylNZG6lZ+1lqWNGUj9w12EPa2pfyWYZcwFyjmr6XWBwlHR4VXtmhXURaoBaMHMjWdRx6nDBaxCAX3vyfrB4lGlcfw18nn+naTN+xVkSZUVeCoA0cthtAXBZfimAUU2ZcWdrLHysSU5z0HHmd1JsKV60Yft002JTZGFqG2jmaAl8m3GPhO5kH22gYmt1zmjuY+RxK1/RY457m16IZapbrmEucABUy3rRYvWEemcqdUN2gWwyV0Jo1WSkYSNcBHnBbdl7vFx9adJ1eoNfXgJUS3MDZp9g+V1DXkJvr2CGbRt2/Gt5aolmj2LscvZuWWlWb0ZgBmP7dwZeJ2pFcJp/Pl+YY9ZmnHo8dZlfTniIXzNnYXG0dO9g3nZKclVb/2WOXel/dWsTXsVzplU5eIVuYGcGW6xoNWoxXtVqWmdhdzVmhWjVbHlpG30nMVVsrl/FfEVlHWcabd9yJGL/Yg5zJHWqZ95vpWV3XYl2SWKEZqhriGvnX6FyqW6yaPNo2mApbHF3MZP4drZZcGZEgpVWdmj0guhw11j7g9ViwWUsRxRkK2qrVXB6/GY4cOl+8G69gOmGH3Pze49/w2F4d5Vx9l+WeF5w/IFhcaV4XGBoVlR+KWP9fkZooFuuYHZu8XA2ac1ZVmwbS7drD15yYE9mLm/9cAxq64MwXBV6QXykeBVwp2TsX9x9yHaPcDSSYnJ7YsZ7eIcwcCc6xW9savt822P8eNpy4mM0beZZw3mvWeSBXl0Qa2piNWCsWPxo6YCSW5xReFK4Typ91mybhG9wUHeWdAZjqIKDdvBQ1WiBcIl/Cl8NbOZQ9nSfeT9hwl9KgEZ5aGD0cBdtSnEPZ7xhf3LIbs1rw2wAcHF1LXO3aG9k12jZXDpagm/gYW50YGI6b8xosVjhYfV1UWsyZXN2EXrngVduy3Dodv1gM3CAc4xlBXksZkxoFnpqeGBroG8dZ/t3OV/HbSxs4HT2XJ9viXBXZPt4xncVcZhwlmJWW0Zj3m0ZZuNqI2b5c6R1JnK6Zhhto3DbYrBxC2IDiHxhqGQXfrV/M3WGRHZjL2bHb29ppGKfaYxiDGkrVoFtT2aldSVnFl+gYB9qlVc4bTZfvmh0cKFkiWJ1dQMyT2UScQR5TG8Wao14zGSWVfJcB3zcd4J072fIYP5uhmRiX3hwSnQZa+BvIHFdXARzy3VKakZq/WAGfgdzTWb4ZNNuHVxOdZFpnl3bXftjR2mXXQZT9l/pcvRigHjJYj5u/GfiXfmAx3qzb3RrznItYcdpk3ULZiZxZ2uHZzhdh3k/YOBgK3PkdDFtcXTrX5h4TWe2cIR1tV/ZZedp6W+2bal193IJZk5sJWmHa6tU5WkGbataZm0xmGJiFXtjes5ez4FhZrNxkGwqdH5spk2MYM1lQHSXZj9nomLJaQNgZj2jdztpaWbmbiVpPGc7YEJcd1xoXQR3w105WzZYAmbEHGxgZlsldMldW2M3bUp0j1bCU0BoJ13lb3h0IWT7W2ZmrXAKY8R4oWEFa3tu9mTRYapvim8iYnhTWHtvaYp6mGcIhMBb0mSRfNdqhHMRigZt9mDCgZ9mjmZdgPSD8Ge6f0WMWHO7b/tXeWzeh8NwxG6mayFfG28dfhdwfXwAe7BlyoLAXktvGnZ6d5xb/295c9RuYXIIaN1RQ3WuWcho7nW+XJl92nt9esJuym5uahF0VGfLbWR6KGNxfSZqtXnXYnhD024gX2t20XOpbyVnI2spZV5kil36ZJ5yQ20VbJFdhWzifdxxMlwXfiJi7GbCZ7VvvZSnbh1t1mH+cCJ3q4MObg1pN4C+cUJpAXYqeL5qXHEDZgJtXnF5d/ZXJmeHd1JnY2mmcgB3xV9zaIxzZXD8d1Jx0Xdbi3F6VmUEbUZ0+3enXQ58VHEzfCZi83amfIZr1FSwYjZdp1wAgGVgY3ZzdwpoaHwUaBR9QnnSdNlrl3rmbwF8zW5qgUR0l3Vpa0xs41K2d0Brk3ygeMdqIXrJaudpImKIYcFrYGamZNp3i1+gez5xX2O4clxv+HZnZ0VsRXWLb8Zein3RbStwkml2brFiLmCJgaJ9kmGRXFRseHbydtpjv3x5a3Vy0G/4aBtxSHMJZMNxC33kdEpqiVjOe2t+33BWY75Zo2iVayt7ymy5dkd6Cn1BaUB/W3XXdIF1v3FjfiNZ+WZicgdofmvHZLdyLHErcZF0OXCjW5NoSGILcU511X3Hcip36WhicBVkQF0DbHBs6XYBToRqPna0azQ5/V/Tc/BIcF6TcS1oA2BxcMBgSGh1aKZgDnm5d/prXHcaY9BiQm42cSFqfHVUcVxqpHd4cl5jHF7dZwxkQnr6Yu5mflcHdZdavGUWZ1xrJHBDa8Z8NGMEbnNmv2QxcW5u3WlwYrJh4mbyd/FysmWhYPdgFHGnbmZuHX//c8Z0KnEiZqlSVHUVdBNwmIZFbFNq4WCRdYRsJmt6UwhW4l/te450C1PEU6FV/GjdiL9tMmxWdvZ0oXHjYnh8ul+Dcbl1vWgeXDt8t20UbfJnwnKcdw5sUnDJdJlyqHRFfLBiunXybYNwwW9rcrl8oWtJam2ZuXvqdB6F8ZgVdMt9W2nIoTRgtW/4is9zHnSEfJlk4mtNX1NlV3ALaelZd3Zjet5pvIi9b294W2LujQ9yRoR0YhFkdnukW1RMW3UJgCx+JmqVatqn13SJYjlqPHfxcTiEP36Wdnpf6opsiVhpAnMUmR96AU9Vh5NhDVz8a+Nj1HFhcLJtwG1nbNJMAX9djb9s+W1KZddevHIIdX9NRXRLhXpxxYvhfIBZTpK7gXuEE3MteCWDDIa2iEBf6lb2WLBxzmCbcoddYmtsY499Vo5YYuKXT3AabElVDIuOZWiK4IfwcJVml3XzbB9ksGEYdHJu4oJ4dyhk9Ff5cY1plVvOXVd+s14qZ/xMeGCybdZnw0I7bmF4G0bVaKdoWWMJZF9tO18rWAt/7l1LZTWChm/Pdcl2eFEicp5e+VYFYOFm9Wr+WCp0FFiohAFs4GqJe55xnHWWQEN0FX5fcZ1lemJWiad5p21UcF9Lw3GoUOlopGoTdAV4InKJc9FoQHUXbphsj10eYpxT5mXlinRzG23Ka+RozVfQWAJ+g29YmYlt53OLXktpU3KTWVpjsFE/cnNM9mibZjFlxVYkZpx9BmgZdONh8XBrZGVl2XMqaWFcImqEUtxyw3imZidyplbgYp92xV2WUhF3IXKYbh9t9XP6hCx3vzw6V8ZcoXdibzdTyWKCcSNjkGh9dDNrm3b3byJgCG9kaBxhCWHGYXBdJm0TXVBMF2uUeTZq2GVOiiOWHVoeiP9spYnFbRA+c2uWdRZutWIWj0JlG575f5uFwYY4X2JoI2pIYMpRp2B9iuZwLJFXjl16r19VWdt822U+b9djKm2wc0B5IVpZcCVdh041XzhuTn8fW7p3M3i+dABupk+lY89TdWH8d6hiNYDZbyN1AmG2aUlzX27YZSd0RIDVWktvcWkSdntt/2nHcLFidGR6Y4Z9OWVtZRtbuX1red9cYz6TdJt4dmyscVVoQHz1fZlewlonYNt5nFzPSghfnHgzip5VTimBNGlcGGEZNTSRjU3LRBhb7mQeN1lYi3AoashhSGPQbRpDTnQVTLlCjmkwSpw0Z1QrRKlI1FalYfZLkl8YNQ1NDkdWVcI4nk8HYupAO160R4uOumGrYM1aS0/7cr127XenYeRksExaXRpWY2G9aBV1fD8dTWlDX0lYSnpMcZQ3WDVPvTGzZq1EaWGpdhJCXznra5xuR0CrTttLy2AFZrhPX1q7Z6h9DGp1ShQ6S0upSnJ67mAkW6RHYzIuSBZYdFZvgElSmHVLRspng0K9UORpgkUFVqhXz2hbQ/RQDHe+Zd1vl2GfQz5OZVHGMOBJPmPLaaVhYFrMdlNxmmlBO/14u3SxdyRxhHTdeTptj4Cvcv5wkXv1eeFqu2xcba51y3ihfndco3YId4l0Jm1QbcF2OHKWcQVuQWjXd2l833Wzgcdyen0zdCds01HAZux0e4FTXYVxTG7FcE5wIF6jd3JkWGAFbvt4tHbUgl583Hb8a95ssHfscw9mEH7cgtx1Nn9VXUOB8Fy5SMtxO3OedVx71GNKUH+BqYFsW2tx0m2lcLx4fHbgYstgjHdae6WG83o+XwVt+2nXhEF+I25waK9sioGqdhdlBmkfajZtc3QnW71qxV6Zh2l6dVxIdFdviWwCWh9xP3NndBByzH2ndOB0dGxeY+Z14XQockl4eYQdNII/wnX8ZztR22RebzlGo3deR9xOQ11tYyRSyV/DdvlgSE1PaARWCUqJYNxDQUlpfQEuE062c3R7BGI9hoZL0oO9Sjlba0ktcbZdDU26fx9H3GkffHeIImwXV0dj12D4c4dcWmdodT9p7IjLf1qHF2wxUPp0wT6RSqBkw3OFZmlyNVdZV4xc90QWegdzAVC3KHllr4v/dR12r1EIZ+g1c05kfA9lIo0VZip1+0giaOl2HHMAcLto43sYUml+2GBkUiFbdESXhQROm3K0Q5Jxhm0gTbVedG4iaCJfYEt/ZWB3uWroaNYzB28hf7pHEVYaZk93W26gT750U4wujJNefFK/XfJ5/mTWZ+BeNmvsZmRj3UAqXChaUHgMPP5xWmReU1BSNF7bX6pe4nRAYjVXLmz5ZxBhjHN1aqFPOYGAUIpumU09Y3FkFGQccJxUf37vXrtRsWgocnBxLmcicQNY0WTuerRnrGFlYX5vXGfKf6JgBFngcCJoXFEicS9sPWJPd0RqflhTbphP2WU4YW5oCnG6Y7Bq/n84eL9temXqWsBmS2ZxZU55An1DZXpqnnEzYTJcnlioZFVe3GpBc0RYlVX9UClR+oheUdZx8lwVbjNeQW97ZXRUgVW1Y3Vnh3YVa+hzFHSxZaVXMVsPV0Jbo3DgbyhoT3X/bFtvzm5vY6V3ZVvmdapq6ms4cmRqZl9vbzGHKl21d4ZfiYWubxBxXouBYMVpEXsobg1vgGthdJJtWGngZ5J51HF7duF962m0fCtpTXYgfdBpmVlade5xGmXOWSdv0Wk4ZVZ2SGERjghhQm5YZ6t0PmH0cJhrOWNsfO98231Yb6ZwVoSHaQNZlW+bcnVdO2kdkCdqhmUrdYprZnWyRq1taXqLbRhyKnjvdmxoOW99Os5tP4GBbISBtXbtWCx5ooETe/BlRIB+dKWE4H2HXu4vgmzibthkqXyrYKNot016e/1uanTMiolnDl/oR61oxGzxc19w1m8MeoJyEmmkaHVgdWKdYcZ3omVYUzxJzG+cY41ID20qbtVKEmMAWkdjfGm8bYxZnWQGZoZf52IvdBxPZV7rcxxd6VHaexNnPWDYgDVvS1Nmd6VXOnYxVyNd30avbcljm2X7iWpNgZFReFJ7kGY4W+9zfFqhZv9mSGzcappvcH+Hacd3MnPTQsRzSlVQSFRNY2bggGRoy0UPUkJo8Ufzaqd4tmETXe5jynM0ZftsDWGyeBFgSWAvam9nUHr7atlxdU00apV7X1ukWL5u02PTRHVxum6+Zctu1mo8hjBZR12FUz5rfHY1VwxsUGFPZnFdbTwud1ZrsGCobidNbGtGax9c2UGOcXCEsGvTXqVf+3CsdeZSxH+3apdy324LeDlp2lwxdTliqHM0bSBe+WChZz93OGgMZuFtG2ehVfJxEGY2fYmE3GDZdXeBXVsSXiJ7iGKCfO5b8GCLekGFHWXuYqh/kGxRcDFdQVrrXpJgIHBjbcBqz2KhcNxjnVM5cUZlhWeFcXproWhEafKAEmmcXElWvIpmXWB5dYSCcSKGGHJ8Y19+OIE8Z05+Tl5mX75+tGWLjV+BnV05aWJuBG/pW9txPGSZVpNuUWYvZrNnVWbAZyVqa2R5aXt3ITWXb7VtL39OYiJ4jnskeuVeTl2db61v93dJZpBglU16hvlkS3HFap5s6GJuZTpj/n53Zx1w2F/oa7N16n7WXOBsG4V7YYFeu3BaceJbr24BcxVwTluRYGZqWU+JdFJlqXPjfjJxHXrDcOBrxXExeQddP1ynaVtzEHCfZF9xSHZ1aiJhvWgHbuhza3QNSoZfK10oZq9mMV7BVwp1JE65ZZFrfWRQY0RtVWnuaWZ+vG20d/1ywGzcdjFUxmT8aAd9NWLDVAZoK17nbh9nyV16gXZ0v2pZdKlcA3HQeVJc52Ezd1Zkdl0ocltfRWAsYmxTEluoWhluEF7IVb1SjVNfdOR6KHFjYCNymVwcbGtoSHEoYStfdmyjfjVhEmtKbDFwMXxDaH9ky3QRfaphOmhTcHd7SXPNV5tq6oJEgFRpunWrdXJWh1l/g7ZkGIF9SpiBgX0uaSxEj3lZakNbW25QZzJoJnBPcmdZoXcld6ZdQGzYhLZ9MG7Ne0x29IZ9fdI8fnDMgwZ4JH1IikRsQIZMkNt7u35GavB2JFrca0Bbt18tiaFpmX4jgBR5xnptWVNtD2xIbkxdGXHoaoKKj4WQapZmfnEgbUNheWtIZbVlao97hjGHj3fMb1lOVHKwfvx06IdBhDh59m9CeHmAjWz0aZN013TzWhBtb39pWodjo3GChBd1zm3eeXJ7N3MjeZlvWnlNdQ1/UUeVXmd/mV/8fBRli3QCfalxJk9qYw+FtnHPXOlwfoSyf/pllYvagZZcHnWbiuRwyGEegQ5cP2yEgxlVgWECbgR5RWqZaUWV6mOTV1SPZ27Piv+WFGNqizyMaluia52VmFfuhCJXmYu6jrmYlVB7aclzNlzehyJZI2xEawVpioB4be5dp2fyY4N4Z3TRYFZkzl1fU0psJXRyWp6HNpQrXuFLdlCKX0p0mXWyZnNr0l1VXAuRboGgacBlV1eJZPN1XGRdfRRvUVWmZFY1rW04Wl2QalWBU61y+GQSYrJc4oPRZN5Z4mJwT6mTwkyLhEtpq4irZdRfjobyi6tng1dAb293O2g4Uu9aal72iR5hYWadgtCL311MY1FgiJNJZNVVCVQAarJqL3X3dClxA1l2YCt6S2bcbt9Zwmz+dip1rFJka2pe11bIa1JirHCvY7hsMXXkWVJ3xWwScXphdmygbdNmIGK+cHNRx3IJX/By41e/bidwDWRpXBRmNHe5ablhJ3NCcdtwv1rHbSJ2UWy/aIt2LmuycGBufWqmZ8ZjNHNPcGFzZGVBZg9gKHZuWLZevV7IXmVnQWKFdGNuWW0IamJs4HFUawl05HGIa9p0YnwibVpeQH/nXWhfJGIGcpJuKH16cCxwXl+dY7mJT3R/ZCVslnI5Y2VnFoXdb2t30WIibnxztHQdYl9re2oAWxp13l+UZMJsuXo4dKJzFnLBeB9uh290aNd0+Gf2ZkxivWE0eLFc/3uOQmtnP35WbDVEUGxTa0dsI1wiXw5YqmxjbY5fWmm6hSFgo2Z0eHN+wmTPcr5mLXefYHRhWFmFdXBu7GRYhO5buWdGfZ1jtXklak9jMktAX1tpAm5gcxpgbXexbHCCpl9XXY58Ll77a3teG3r4eOJ6Vl+ZVB5phF3nZgxn5mbNUD9ypJ7lhEdv0WqmXI9sOmpwbf5cg30Yez54b2r9dcd3GFx+TqRfampTZKFpAlkLXQFPPXSafEtv6GiiWux5bXfXaYVYv2qCcplkl2riaSp6rGAnegBqiVw3cIFpzWgsYCR73GPEbZ9pFW+Odo9ppXTFc1lG+mpacPNpcFE9dkhaaVlJaN9ZMG3IT7twhWy2ZJNq2myDXeVea10Tg3yANz6aXpNhs03dR7hhKkaUdDhHuWI3bKyBYE7Icxx5KEAtZJtpBzqZVthUDHX2Yadu1GppeHRegjwXaqZN2lPdPPN5MGLVUtJoTGiTZkJkNT+/Ve1hPmXyZs6bwnNjZR5gxXgYdLRiZjxqToptG190dA5v2ETUaZJJD2cJTJZz2Vv7Wrhew28cS9xH2nU7PCts41pvY9FnXTVAZ/Js+mqOVZ5v6nODeDdZglbDcTRtqF/9QO5e1mLdeSJaFkXZZHl162eRS4ZtTWLxdWhIzEl1YxdsDmKReEpu3WR+d4R/bFrjZhp+dFjpabJjbnX+brJuLIECZhtyYm19W6djqGOeY7hw6nL0ZK5ly2aQYh56s3GQdPllyXx0bfJtMlWYV/57LnMwfQ9tg3UMcxhbLXKFd9NuclMqcut3qWfGbwh3YnWaW6F87XaYZvNtWXe5fBVhl3JmXQ1ZIXOORoxuEXIZbCFqHm1qWWBnMmsCUshfSGRSXWh5XW/BSx91hXe6Tydug3woWIh99G+JcH1yvHA4dKR9bni0XQxcnF5LYBJfl3kCZYVVHnVdcW93T1SUgBhkHnmWYbVsvV1yboh3kGO5X/50EGX8YuJ3hGTMdBpy2mhMSONPcmmeapdey1TDbZNdGXmHTv5PJF0AYnBIM2e+Xh1BZ1MLcf9heV+9YB1Tf0N6cOpdOGYVc1Rl2GuAbq9LcG0yVwJi9VJybeVgnU5ka7BcjG6wdtJ/9l/XYZxzUlFqcvx5VWGkcntjUH2wcP5mFGRCSiNi8FbiWRZYFXErcb9numGQXLFeTlzTbEVrN1TsWzRtDnKdf51vvGhMbO9fRUe0a35fV282cSl2mWFCXAVrXW6QXSVc4nSnSm5otVF7WUxQ100Lcs5SnnT7WvhvwGYdX2NUWWC+XcpF6l8gc9tuqmPXYR1K9WmUaM9YimEoYNJ7h3fCWLdyWoHobLZIgmlldn1UE224dztxzlTiYy5AWkkxZY5Od2yYXZpmDHA9SJRwkG4aULZt1WkQhYFyQVDBYbVohlMQWvVmMlcZaMJVTWzjcC9qY0zCX5tutVbMZVNvzFF2QV9qs3ceatRsn2LIaqpuyU2cb1dUFkQ0TVB3KFiVRpRos3OeVWpWuGMkVuZwYXiqcc6Yfm33bKR6DnWSbMxVdU0wTrhq7WkdZpxrd1SraHg9wG1kVFFpAlYYRQluI1LQY8pN0lbtR7NFWFDOYHpxGTn5Y/RaEnHwQo9rK3W0YQdGKUahaslWWHWQXalo40fRayZYklDvbOVqSF9rWOZiRW3Ia1NO2z4kWkiCHG6FPQJnKmNHfJZGu2VIX8VnsH0bP+te72j2aQx1El47b5xd1F2vaChzz4rCiuQ5d29EYU9LizlLaG5AvGyNR+lusmq/dlFG12ExegFW52TIgi5VmlbLSk5w8mp3a51iOGG3Z5tHV2lyNEZJJ1mTcvdkHUDsbAh3QGRCWA+PS0eEZZ5rE3RJlv9kgmfjc6V0Z2yGjG1D0j/xc6FwoIfhZjY9MmMHbE9snEXyaq5ZIT2kbFBoBmfmPYWBvUBoZzRhl1juZCdMrXlmYehs7DlaYRJwNGnwXZBL0oGoYoxqhlK+asRUpWdjZFtBIHi2cqN5QVrzXUqHaW3DafNKsWNiilGCL2kBcYd4rlQSbkyAtlpkTFuCwEcKZPFNH2MTa0hNg3uscmVjkHRsYlmCXXBkXZF3cnusaI1oingaYyl1e2dNhXhrkIEkXwtJbHB4Zh59EZEqbwRtnlJEdZdii0afXe56Am8bZPVrq10oVvhqBmrEUWhV3XyCd1di4kkMc0Rfe423dC5kAk4QW0t1Rn3RfglwgGivas9NM3FkWOt+yIVDaZNhKmk1aVdsP3j8SzJkVV32VgxebmHpYqFtK1JaafNEd32qazdtTmOebQdhV2MgfKuDBVrPUFNsjFziXwZTxk5pVCKCHlekc69/HHfKb6JjtV7hfrBqvlmwbV5pnHX6Y/B7mWluapthd3Nje11zsmgteP19Lm7HX8pvJ2+fdNR03mV+erFmF2fgbZ15f3DycdxtUGssdINrX3CjcNOBOWkBcGJ0WHXqVoBn/GSFdiF3CmxjZDN3eXwna9dmLmWmXpxyFINFc314aXQncK5kgnpReSZvC3ZoeldtTWP8cc1u6mTKX1yIyXW6bYltAnpwZa1FaodJh+BabGCDbfl2unUgZLxJ7F86gZly3mrNeUV0DXz2fGV85mQVcE5xrmeIbwxy4UB8cB9rZ2OddWdwDHaDUhSBLZKYb+qE2WNdaZBeGH5mag99MnRdbB5jNWerbhhnlmTlZaVs735TdXRjpV3tg5dnqnS9c3NybWSce9t371qTb1pigHaObvRhKX/CbAJeiIYoYcN1xHM7ZvRmA3WHYW98H2sNXjR+YWUjdhxqxoLGaPh72VtFWkt8gWU7UBBqMH8xcF9rN17texBea3hYbV5rC2iJcb5+pm7BZ0WGkX3Kc2hdb30pcYNpiX8vb6VulGOQVTlpSGfsZrR8cWJCZAFwrX01WB5vzV+vXqp+AlzqU3JkkmnPZ8aAbHjGcvZrT3mHZw16HW4gZ2l6t3tYZe9kIFyIa+hi5nqpaYZll2QCceNwDV3Jcu1ctXqPSAaFLGRUeLlmZ2OScMtb9m2Ibfh5P2/Dcjx5nnqIa696AUEWbzx15WG5TRB5NVExY051E14qZp5lG2JzXZ9oxXqObSdfSGb4YgJ7KJ3dWqF4BmM6Wfdmt4BzSu9jVUuOXGRfinTWWlJsT3qMceN43mh2T8tQaWDLcxthTHJ2bk9rwG+NW8hjzl90V4pjB2jsYCZMXHIZcgFfs1Q1YlpEGnHZeTxihLIJcexo63zJjrdxC3ZyWydCr3lObhJseWAIRRN2YXOPe3BLLnyrYE9MAXaMa1l1xEj/Xh1PvmJPaBpS5nmbL3ZoC2VzZe9ICmwzdEFdFF5RXh58kmUVYyxOl2Y4X+Rwzl2hUBtpfHDFaDNp92VbYoFwYVqiWVZgpHUpZXp/rWe0b4Bal4MEXtp9YGwea717WmJCVVFiZmDKWN5ulmw7cl5bEl4OeSJ0/X4Fb0ZtXnoxcal5O4MsdbGJ+VohYGdsMoUSabRtWYMvawyYiHYZhUhlRWwPeOp3F3YCXYJucHPvcrxqIWsgcS52YVlDfTtYCXw3cj50p3WIc4Z3mG+IaSBepGXPeRR5Yl+gYdJUIn8dfvVxDG24YdVw54P4c7Zb812uc3BZFV7phzljUmSdf1R0sV4PcAmH+Wd7aDFpoVKXar9xBnOzckdfH2UlYU5zC2j/cZhZpXLUa09z6H+icbF6ZYWAYdVe02F5hNxiRl3aamqFDnP6dsVBUFz3b49rjksvZtd2jU6OaGtYhExwYCBe8l/Och15UWTDRg1p2ls4W49tNUFJVU56Z0wAW/12sYLtVqB1FEtBgYpQoVQ/U5R7N2/XVjR3nFjdocN59IFWdK5X+2rZWxxtWlM8bN520lqAgLdrlIMdZLhcRm0dRytFwlrQY3BfMokJSj9VNmuiWVlkvmihSvdVcmbLhOSEK3ZCV5hfXUt6RJ5/+WaYfiVrsXtJUNleCIPscTJfkHJrZBdDGHmTd7RP1WANXPWWZV7kbVVdeH/Qbi5MsGIeYNZma1YzR7hvXnMubiVmyloKbT6K/E8qRh9xMIt6dfhJMHTvhWF9XWlZduV8OG+DZ1iCYHwvejR9/Xb6XiJ9XoQEZqxRtmSAdU1o3ne1cZJzI4F5X5OBNIYSfZB1D4Kqctdj9WpodaaBf2hrdPh69HMtavhXQXgobR99jmlReJJnVF9ycTZyT4BoaUhobGtIaWVpL3XYa1tvHnV1fnl0eHNPeoODtnxFaSp6tHcRiORq4nIgb/N11X3eccZkg0cYa3R+3Xy/Z198Bn9teGdbk1TyacRtk3ySbbpwmWDMX05ikm/5jPdks3Urdw5jE3Q1Zgh0tGDscE5pbG6Ybupn1nPZZBh+85EIZ01lW1NHbsGDbWl8eGCFvITsXRJprXH1ayVrlWjAbr55328BYrVqWWypeqxs7GOOdtlh8ldFfWxmd2G0RxhhemRkT1ZfmGPDf4dvMF/EYONnqnU4eX5h224GXnpnGWaUbNFwZHYSa0GCLGHCYgxt21/8dR1UpFk1W3BaMW+0ay9c/1mkaz91NG18b3deY2PPZzdm+nXfWad7z3Qec5Btez14Ymd4AmrTX+97zXaKZeRsTHVeakJp+3JQbPtjEmBOc2xsj2E6bzJtR3Kqb9l5p2w9dI5Z1FIJVntv4nsUZfNgblCfYC1tEV/ybYBtPXbxYCFs6XW8ZL1xEF3jgK568l9HY8xm0W3KaJJVqGc5bnR/42yAWLdmMIKob5VeSWhdf3xjxGHjYkxewGQacDB8+naVgIxv9muegpF16GRhX5xnRXQaY05obG+JZxdg/F2fX3hir3cscyxuPHG3W91wsW2idzVxVmcoddJpvVZXdNJ+j2LRjTlwL4I2W9tbHmh6dQFr+HchX9hr2mzFaHRojHyMczJ29WtMZilwZYZ6Zv99wmoyZk12fGcoXttg1nATZgh7UGtgVpF+022CYyB6pmJydaJ+hHALXaBeY3bHWYdw1X1ddjVkp3MLeXp1C27HaMNuBnWVX3JkY299bVhgfWcMYf11jXFKdTdiyGaLblxjS3VWYOdvyV7Sel9zqlyhcnFojoG3dXtx4mMNfrN484UmivWH2lLQZHaC4k30Wwdyu2qvb49z71iqZ7xz63c0X8xa5XVSXINd53MuaZeK0ZQDUGeAj3EhaHhhd3sGbWt6/WRIdIlwsYjjSndd0XsPa0CLG2XJWtNXTVsqhMZhvnjEYcaEh1/rVsFeP0vhXohS1WQSaClRsIhihH9kpUXVfkJttX80fG1pmsHQYEdqGI/qj+RveXbFZChElYlbdGmCQ5QgWedvQmFob3JKn5ASY5tWsHNRUix0E1K0ajtUzlCzXBNV4XjiMoaE22IkiBFbSnDeiLeHsENEW6KSmVqMZVZb2GosTDSFklO2U7eCFIGxdX1vHnWwj9FzJVtGZ4Nnb20IemFBuV2xZXZaRlLEYfhFblJ4XRJNXl81Y7Zy/XCCXNd3B2o5TDRxrGAcgNdlDUW1aEZwkVF2RZ55T0lIYiQ/Z3DMfcOIyj+6Vzxnc1mXZtEu+jg4OxReXmzgdYlgvGMKUC9fv0WPYHlP2mLSPol5aHpeSO9wFmuuYglVfFVjP3BhLGoMa/WmnV+QWihuh3rxav97n0YIRQpmdmKYcXt6JUs4YrFk81lNOCRk71DhP9x1s2F+ZkVBy22ZVDs8qE8ATlR0DUThfGxi0XVSWTxleGZsgCw9QFk5ck17cWIzU7VkHVD0ZgNJR0d0ch53xWdMUDBpcGMsdDxKzVTcaYqLH3iEaWFtYW4EUZ1mm2jherFTo3kzZsFi+FbnYO5px2YXdKRzXYVFaixuNoIpkqFbFHdmdp9ugnOMi8lkl4NLc8qCWImNe9hshE/maX1jLXKVfTRiQ3lFYBJugWMjblBti4hAaoZ3SWm6YqxvUGjXX+d0dl25d1uC7IHKbLpo6G9xfaNzXXQNhqNuNXPeg+F0P1pLQ3ZszW4HeRlrx3LQbPdn9VwaOY9sPniIdzJ17mEEcv1iXG6jaCp7Yl7sbw1tHFg5a/UxI3VEYlN7qV5ra+t8eGFFYKZyrITEdRVwCGpmUq1yzmqtXmZqE22zdbFhM2cIb01y5mE4bFN23X7rfotjKWeZa2Fp6l4SaGNvYHZgVNdzZ3ZBY+hmlWfhZIhtQ3xYYZ9lK3WsbbCEw2P3blF5nHk6YSFw9110XjKFnHY3dct5dn92b+xgYXixYVB+RXDUZDRsuVZBaw5sFWSNX49uE15ObntloGlda/RlHml2arxtO3XEbQBuAWLbZ8Ruy2THa8Nu8V+SXkZy+2+BhUphhU4qZ3N1nm2ceIZsJ265ZC5tK1+Nbkdo22vSZBBzpmCjbQZqQm7Zfu91029VXodZmXx1e/h3Il/lZ2pmanLDZXZwal5Da7BmOm5IZXNoTWCPZc1q3WwweqZn6me7an1p4GvHahhnb2YUcsmAtXJeaBN6mWoranNft3LMYcB0LmRpfPV2YmfDRfJkkGqFZBxpWGzUZ7t1pm5HYS9aEIFcaghuSoG8iCxtxYk2Y/J9I1yjcLdgIn8XddJoh490ZvGMeHcmc7F6fWiFbOpx2XFqbCFn033OYhx82HeJf0RpC1eFfkNmCnNVcVpyV3mvgqBmGVggbtNWXmsXcU1vXHMOamNPJ4f2do5nSG8FZPZs+IUQcc9y5mjZcnhcAGNOf8lyyGOSZmJ9uVauiMJ1zWTeW2xzNHVEYhVf2lkbeBJlSVWXdpx3MnpaY/hmBmIygdJt03lPWs1tRm+SWWFY3F/lg6lgX1cQYjx+6HTqaTJrO2a5dOVqklvNXvRthWKmdTCAZHakXjVeEWNBYblpKWoqdEhkVWzWZxl0M1E0cGh31nSYdgNw/HnBZ/9pFHOuaXdc/myNZIZkkWw7da+AjWZslU2BXHrNYoZ6tnTNWa1mX07Xa0RsGnNhaqZp5XD/XTtrMXHVYKFn73DkbsFpgW8XgmJjz1pgVhVmU2vGf1ROEWFRYt1xM2zuYGlgD2FAdJ9fImpCd95d72OGZehcZ3D0ZqhkdH/UeyVHBHWlc95oA2rxYId1bGS/dCVVmHfhZ1J1E12eXYJu0mH/XThj22jTarlZ5nAPXLhvjG8MXTxuyX1qaZBZBl/ob4B7jWCEYMl0OluVZR9phXWEXjNplnoFcwV6AGb8c81poWZ3YaF1x2dpZD51SnjUalJ9wHJ/ZkhxsnKgaPZ3dGmod4d5w3yGcYiDtn9vaExUYWZWc+1tX4DvdQF6hnXAfrdiu2NQZQxKLmRibz9n32mJZuZfg3GHg99o/neWZJ5+lGJYUaZl7moAe9hv6YFWWntnuoL9dM5upXXsaINvQX6TbzZzv2c0ZYFZRYfMbsZgsHvQbPJo7GDIXRJlYXj1hPFwx2xxdvJr4XgBZTB3qWeEdepiLG9nXhN5aWjKZjpz4IJBc7BkuT9wa0xy93T9ZOxzQ3OqXDx17GX7abJnS2rBdnR4qFzWY1xu8m27ZqtpOW5hZYNxaGT1WvNoxnfXc9NtEW+XavVyRWCUb7FhJmzXb1B4S3VMUgF1oWzOdgR1sWxpYOJrTE92efV2R2CtajZms3hyZQ11928Zab1iRl52dutR92m8b7Z1GGgOYvhTiHBxdwdsvGW4ZKNam09jfPxdiHS8Zk1VzW/Lb9SJx2oKdK1XTF2EaX6KCm1LauBgrWfRZ8lcP3YybXaDamEdb7VuUF+AZFBoKVy3ZWN0unrzcwxrkl0sZcRj41wsaLJqXm5hd/tvim4Taotv1mIWYpxmwGbDdKVSr1aWbLNe3mqEY3Z3bGL8bulu0GlpYHBr/lw9bJhkymyEZJdcSXdRb5Bwx2OheE5yuHUldkJlP3M2bw90023gc/Vh4HxNe4Jdu2KcZep5mmryZRBr3GZhY4l4ImMDcxRy53/IfNF6/20BZ9dvOmQEe6d812uybX1lLm4sZZ1zplcGcWpkkmlacdlp12uWbbJ/J3SiYSJtworCfHthQGZkZdZ3QWAOfq9k118xaxh3dHIseT1/Gnv3cR9r8Wf+biN6umrtfktcAn7WafF0gHXlYZNnpmSngLtwwHW7cpl8SXNScwpgundYXXV8GnytZfNhdHtSeblod3KmgfFarmcVUFl48mqLcmh1qGVaex9uMHdzYbNr7HLjeShxZX5cckZ4r2x4Zed6EWgoV2Jna2TgdL138G7NZ3t4YGK2dOBWLmQoc1l2+GS/Zs1h6XEBX898Y2sYeHFt7n1Ec9ZzBGfMbMNlXHZScst4WmYnac9w/GlkYHtweGRyZfBcu1p0ZMluNWwLbHdy4FoBX6F25Fp9ZmBivnCYfF56PWjnYydfZnEaajRqpWloW1tqM3MSf/hiqGHgXJFiPHzKcg1oKXwKb11yS1nsbp1cYXv0X8pjpWPXY/p43XBZYm5kaFxQcxth8G2Ca3dhQVq2eDxuh18texpk7WbCZwRnz221dORiC22VYp59/1nfZxd0QG+jX8JnzF0KZvNz92W0VRdv93lyd4lVQnGhbNJc4U24d6xjD09RcHJc5HPJUbdfCXTCVep8C3hdaY5122zFfsVtq2KDfEFy1GhBVuBhLl01e5xh9GuQbrpYBmf6e3R7tmHsdvtFcF4tVx5k2nHMZB1jimVmVxdooGARdQ1kmmvdYABiKm5tXZdvN3m9Vv9kkV6kU7BtT2xpaU1c5WDlZPhkXn8caP9tQ01mUBFuhnUKdblspFfTZcZgbGrrXHNvh2o/UEVs7lOSY95TdGDYVSxpClTcVP1xU5cleENi9WU4Wn1bj3EHgPZXEWCrW814e2uWaNpj/WIyf1RW2Uxqdsp5UGzXYn5mOWVgZDplWV7+YARXmXYdbB9jLmCHdd1qR3vXbg9uWXW1aSVs8G1mc5BxqXeLajFjP3/GcrJr2XFWVHBvmG4bbo1f8HRjbQd4g3ope7tqKnGqVAZ3inGHZLB2DW6de7V4uHJzYJpwAGwDc+Fbc1opXwxeg1wsaFV1SHIqZXmJHWl3Zb1YNHspdVZoT33yYANzTnFEfuRzP2TvbkRiHHPHiLx6A2vOc6ZpX3l/Z2hf2G24h65cjnxpXeVfR272ayh8vXOrZTWDuGqjcFt9z3ExeKh9v23AdT1jA22pYD1twHKMcL1leVeVjytwiWKsaNFhLHLYa713YmM8gb1gRm1bdHVzgHQ8ebxtg5UAbxxx/l22YvF7i1hsaVBs4FlbbvlnxGJ7bjlnAnNbdARteGqcYgZiwnmAYZJqt4OrWexo1Wt+bYxuqm8WUjF7fW6bbwxz+XYUXyhyp2jZXqB33mGqVv5ktmsmY7V4iGXQa7VUPW+gWthsTlhFWnVtuG9sa+xRz3a2Zlts4lg4Wntth3j7a71vz11HdtBdEn4qdsxcw1RPa/lpF3dHclF3GWOUbLtqf0/fdM9We2uBadRVhXamZitr5GAmZTNPuFxgWDd1lXQacMRyfGGMeURrwWcNaiBkzmJvXh5dxV6uXl5flWlkWdJpaGv1a2xywmUSc+Fu1215cvZfemfaXvxgLmuvehl56F39c592c2GPdyZrjmz+b4N8iGZue6tnA2flcLduEGiLe59vHXPmck9xTXOcaftsFG1VX+NgOnedX/t7AG/ChPNwd2QaX2Bycmm+ZQeFb2VlaB5qBIDCX+t2Hl9VX8NpNmdcYA1pH3CWZbNjm2ewYlNoqGeDekZ1EF22dUthTmx+bg92l2aDYQJwwGKKbtBwaXjbfIRyrGZVaBFzuXZhZ85yiGhRe0N8/39Ya9pu4XgdZO9uB3UNa8NoSXvbeMd122ICcTBkmmJkfG9t8GhHZ6Nu4H6xe/11EmvXZKVgzmoNZk51WHq0ZmRrZFuHdxNqWGp8dKJt2XUmeFhm7FFLgtBjJlC3Z9Vv1U+ffCVl1lFCdt5nZFefdRtxUmE/URJokG0yY9pntUgEYpdsIGFZSUp/DH/PWYiCiFMMdSJmHVvrblx4eV1kaJGCmVbLhraEXnF6cgVns2qJYYZx72pAZM6GZmWGfzhulYBMYRNhPXXfXmhjCHPXer5mPHGiXQRi9XTrbUNdoGDRYsVQEGddklV5foHlWAxqoEmRXZOGkmlDivJiXHFVY3dn34EpXUF0I2ZCdq95/22eag5m12ndXcGGYFTFYNBNGnxMZxdJ5lt2ZI5j/GfBTel533AibIdtwFSHcxZ3dl//X1F2t21QbBFWcXWrdm5xdHArZRVnx2rtb/psNF8ybJVrfWd9ditpxG+KXaJsV242ZPBwwnitabZ6YFw8ddZ6GnYidfxriWFPauRylG8Eb/BX9XHzWEB88V+DYr95Y2PWam1uEH2bau9jim7EdQFjWFGNchBZRF8da/5c91qKbVBcdV/ohi1ziVuVcq9zhHQfZ6NxamkgczNr2WfEXwhgMm9/Y9Feh4MEYpBbnHZGceJnwGEiXlBjwG/PXmthRmZ1Z1plXHVAaiBddmugfDpq+WNtW0NzKWandjBnv22tcThik2lmaDBnnG1Oaq1iN33DXSdnTUx6aR1sl3ekYU5gCICxbBt5Wm0Fc11vWWayewJ7Z2ltZmBXFXSvaJ5N/2bQZ0xWdFz3aMFUKmWDXrFnY1wlW0dmW2bzbNZdBXQvebx2ymLmdLd1jmnmT2ttbVwVbx1Um2jac9tsNk94fLRsx14SY99Jt023VW1rsncbbDxUS29Tg0hqYWcNc4RZnWc/avZv0HIOYDJs6Hw0Vvhi82jUZbx3NXtra+l07WNaZuhqznBpXJB6c2SRUxdx31o2axR8A1nKZpOA3WuHULRj72AsYMZhwU6fUj9V23CvWAhjUVrAUMxkBmoxaqtxAHm6TsJkansCdoJbpk48dwNnzGwHZoB8rGQvcVVnUFeRahJuNHQ/U/BvCGfMdGxQs1MHVShT0VX/juZh8WuFgMCO3FGwjZaNu1JRfFh0QZp2YLxsoXK8T6dtdoIbUrhyf0sQVmCKnFUAW76MbJK2WtKC61YNkdZWE3ntZtuO0WkUV0KU+0kSjduLYoEvhZhpSW52c9dyxEwScc6CsXjBgGWAxnbzfJlo9YicWTBgDIDYbkVcYXiMdcdPn3uYX4pvi2otW95NSXvQcxeBLYP0ZL1cVmDoUASTl2SMYaZjxo/aXkpoiZHBdIF3J4DMjXZk4I1QbhiEHG34TqdUpW0hZ2NTU5ehbvJVHlwTfz1vSWT8e8RhFYXjZQ9qpmXZb/2D01jZV/VdY4P5cl1r2l5ufHpyHXjGdTlonooPbgxROou5f+ZpTYlKlupgD4s9XZ6KuHKudcGM6Vsac3WcHmQQXaNyJHnJmpVvAk5nl3KFFWsNllJxRKERaMdxjU9vnvdj5GgTl+xPIDJeg1mMaJZ9buRvnqQlaI1uCXA+l2xsNZHYl8STXGm3fbeMblMLbdWrrpT8dbyXD3gHRRN5MJJ8c5ZhdosOa5ZslI7Nn4aJq13SWdBTHVxUiklpMJgiak+bGmcQioyXHV2bkrWM640cbBmSS4bQmeif02UcSw9iDWIAVmCcaHbTa0pM8If0lh5cEIQAWeSBtFiTgPZrDJgWlLJXjlemcHJ+XWDlXN1fOYYHhqaKuW2Rdt9vO2QBZ4JZnWr5ekFWSGOQZBRfd2EfYQlsiHJkZzRqnGjDfsZ9KV0Sa5pp6mhoeYhn5GH0Y498VGCoZw9ml29caL9sCnAVfbtm/XWhZoJcH3NEY9ZdYnJeYfVZJGJpfpVclXIKXkhjPWoBaZZkVmABXdR34HTIZW1dfGi7cc1kXm6qaSt9N2Jwc159smoZW4dfrVgUYXVqHmOMdOJ2hmS1c9BW+2ygWgR30lqpVrxrGVbGbHNeeWPOX7ttz2PjZohsTGEjar5xRnBqZrxaHmc2cGxTi2u9dF1nH1xzZVN0m23kbjNrCGE9daB4FXFUYY9e8W4EYXZ2XmVoalmg65BWZZd1koE1UopPVoyWXd1UnIiiWGVv50xqemxuQkPrhslk31+gh1xszJNasb5YCJ2yl2xPXFyHiV9ZxqRfWn6IfHOJkedo1m0igT9Lx5r+al5aamfHXQaGgHUnSFBj+mUJdidn1WuSaG9NnFlWa5Z99mnWjNqHAnbLTJ955FHvhpKMzXY0jRVvznPBmQemB3JZUHJOilTUi5Fh9o3YmLFWnHfLOt5hHmkojCpQT2NWcdVRTFDWXTCY6VSrYDBhs1SmmWVl7HxqYCWX1FuiZ8OWbH9zVU5d6IbMgfNiil1CTwlg054mVsJWup3viV10Q1nqaVmTwVtHV71TFY5cPcVF8m9TYdpdbWx6bm1UAnF2aK9LAGqFXStitWB3aB5m5lmabkxraUPncelMr0VTanBGIE6fc9NpzmXygdxExXFxTzxpoVhWcrVwuEjif3xe4ZMZbMKCu20UWTJh4X1lXENru12Ve91o+FvIbtJw3l9nUcFqNknLUFptomKYd16Au1BWTvheJ15ldeln5FAtTs9qKIgodH91ZkjjWuRMFFZGaaZfz4JjW3Z9+UYgXkx9znM9XwJ1Bma2V45ye2tfZf5fwEbKedFMyXFpQAhpDHS7S4taC2DKW11WkVe3Yvdprm1AbX1EgmBZenRQ1V0Nck2HY21CWGBoXYKheWlcA2MucQJfj3PoaVB5nW/NbFVx8262Y9hgiGTxaOBjPF4Udp5q9mG8aq1nOWpSa2lXE17SaaNtmncAaqViBHKGZaV6MGU3db5ndVx3ZJ1usWSdXsqFz3dvbMFpR1zybjhhGmqidctsTm0CaRxmZWmNZJFeK4P/dM5552nkeXlpqHbSaxheKG54Xs53jVgtXDdhN18DapiNnXsNV2R1uWzxZP9fEWstbohxKG7ua5hn+FKDbKZtvm3ZXUxvJYPEYotqK2e/Z/dxfIAuZRtztWY9bcxrWWlDc2hvkmWXe8x3c3HZY354eVu1ZjBraWSidJ93L2AabLtbdXcdcXNnlHAfj95TdFWEW/xqJG2WZuRmhlZVZ2pfBW3yZM9p7FIRYlhjp24LatpdFloncD5ezFU+XY9bBl2EU+VrenC2aHdvJGpzeB5s9VJJWmBXq2QTYUx+dFnIhwOBG3Q4YtxopXQQc2BeCHD+cvNooHEGZBljOmyZZdxj4mHKW2FLAHG1Z59afX2QY5dTb1vWZgVmrm5HZgtUxloKiUx3YG1HbOdsFluNVgZw/19Qlf9wqnpmZo1+a3lLXCxWKHsDYTdW2XKgfR1z6l6pZtOHzFV/a9hZOmG5X6Bby2bvXxxdP1ZIXYpvVlijR453m1UWfXp8c2y9UkVlP2YYYfZRp2OVgSdxrWvgjWqF41Qra0yGF1X+QeGBcUZNWQ+MczqqZKZJ/XDmbF86M4Wha8c6ioEjZC1z2oGoWGqJkJHlSQFghJHCQr19i0jceYxldmPYW1Z6MH6oXzmF708UTb1LulqagPdjWTTAZPB54GCTT85xk0ueUE9ONW6IL/NSjnw6iqcpgzZxWOdTQ4O0gjl4c1OLc5tiwpOekBxjbmOKP3FINJDAaSOPFoBPTKhxn1+8dZ9PxpEOQiJGR2OBT9FPX1PqRnRR21hpTg5E6o3Chrl6hWnOkcpJN226i/CIYUvgRpJ7IzAQXl5Qc5W4MJyATT8SSR6ZnngOcd1RgGFsekhq2VBdQv9St1onY8RqFWsHX8hmIHuoZqVuA3mcYANqrGm/gDJwu2AyemNnJWtebt1tv2BEbxxWEnfJbp1r2XTodb9c1W24WfZ40F2MgZJZ64IkVlBrOXriaWFya2qObWZtR2XVcHx+g14rY8VhT3ZyYpttGHFSfFZu+Y+Qdh9i0VgNjw+C6mm+dVNlbXBfdIxovlpgaStszFqQgCqMqX/sc6ls/l0gbkhPdX47XFd2z2QGaVNvdXQJeKNci4GnblZ89Xt5bJ16oGwneH5Y5G15XRdvTXjveS5vuVzha1+AJYMtbZV3qnVTa/NainlfbXNi0XzVa1NxR3L1dn5n4Wz1bWFtdWn/hZlylYBkYcBjTGwWYC5Ue28yYtNrRYIkW6htKmMobxlo+WGGfQVixWjug1NdbGsWaqlWD4Frg3lnPF4cffhat25AXLR/bnDaabxXvmsAfXdZ2Wl3eQ1wyWpib0eG1W5mUA9wYHWlbW5kCG3LULVkrFdCacZoomulgD2C7XNtY5pTz1gudH5+SXXDTmxrTWmShph8ZWs+dUlgy2j2Z5ZgAX9XdXxsWnRzayhm5FeTe5Zf3k+QdDRYXG8hXMJqcmKuY/FpwFg5dCCAaWlZb1xwL1rAXMlxQoflXtRZIG5NbxBjkGvkeZJZS3e0aABm8nBGgFdugmqiZn98YXGJbJJPVm4WXP1Wa27kclNpE3oqaUVcoHv4c6Nl8nWEZ1aBum8MbhBxbnMiYiFzuGApYvButkrld0BoV2DLYRhwYGOfcxZhKmUJUZBsbFstcuVmpWb3euhns2z/fkxvC2NrYqxbNmogXptO2G8QehdmEHz5Z1x3x2VnZ2x7Mm0ITetrBXB+a+x8MkVuZ1V3LGkUbnhzqk1LZlBfi47JbLxsR1EVa4dqamJkbytdKnwgWnp1rVAyadRvMFsneIxwn2yHfTFzNnxiZy9l1Gu3fDJn6l5YW053pGlwWOFtM2q4cSRm52OmXDJvXVeJcz9rc2E/bSduEWW2bhJ3bWG5cFhY0HabdpZ/D3TQfFpgJXA1cD9XKVn7fS1VR2VRdiRVdnKVWWxwCV7HVLh123LNbpVs0WuOeERxJ2K4elJ7nV6IWs9qTGAPcMBuXn+kcCl54HLKcD5mrGj+eetZRlhsX1tcI2q1cKVmjmxVVwhpzW/yXh5fTGXIXcR1ZHctcBp6AXqacd9moWNpWadmrXhwbrFmd2AkZr53dWwjVppTVW0bXMd5SVtefEF2dW7YXjhkS2ofcgt38WFTVXRbmlPUYJxqc2bXYsJcTmQ4XMpqrW8XaqdqCGtZWOtfW2draqNTRGNJda5qUF5iXo9oX2/zZeFkt1/eZAx6pG4sYMpylXj/WlZlBGHCbRtuMnGSbMxglW6UY01hinK4V5JYGXYAVXp181e+ZAhewEtpdehf03SVeOZhem44dhxmXoLFdZhuUGQKbvJrZ3a+ZCt1u2a8WzhZK4Hdfs9gEHfdZYZqgFIvVBxopGC/YEh3/0gDaRtXO1+1Zb9ZJG5qblRrdV2AdPl02nKLWyp0pGwpgyCHfW5oYUFcT2Hff0B/ZW5vWXts9Gt7fuZmFXe9cJhkU1+eVlZiHlgeeIZqamtKazFNBmNCYK5xTGBaY8BjN2d9bQB5/Xq3btN5DGTXZDN9Q32bVIlfoG2oa7xqoU5ujFZkgX9wT7FimnyfboxkSl8TbfGA6266YW10jIOffNNytGuLacFx7GIdbY1uRW0wdwFfIGoQcmZlq1mAYNdo13gNb2p3ZGzFcIV3nXzaaRJq7W55ac9t9W3AY65mjGWVahVk93V3Zq5jFmaOd4pzKGjaYbhkK3DuduxghmKYcWteG2WIacpco27+ZiJyfHHZYpBjKmfocEJn9GQ4eWRqJ3KhYF5yP3ddc/hqvmoSchNy2mRkZA5x33VLZzFuNm5+Yed1kE5JZ8Vyd2cwa61mzltgaDd2QmrdXM1ba2lucSZ3RnP9WrFzGG8LYfduiHQic6pwsl92amVqIG4gcURbZl3sY7V1I2WndI95CGuBaWVog1mlbCZuAWc6bkJzn2bLb4df/104eP9b2mgeah1mEFMxc2lhRmqMRpVw5WNpRppmw29uXqtfUGmXa9t1XllKXZ11xF6nbJhjhV2zYltwUV4vZ31sLWx4ZEZkv2yda514XVWjczliG16AXxlWcGSfRhRxc2m5cEBo1l2NWulrVGBwXPRaUWnAVgdc+3ApWzFjT3VZZANeh2I5bdNwgWlWbCk9oGk4XSJhPmMwcTNeD1xPYN1JxFnFaqpuRFWOZ8JmFWaDXQJVOmBuVUtkNlOcYxhzyWrEarlnH2NOU4pdJ3R8ctlQ5lo9eApsn10HT1ZnwF+zcNtRt1xbYvtinV60bs1bi3HGZqtm719VXMRZ6nYEbC1gCndUZl1zJGSNd6BssnP/b2d093HNbCxtx2ndWxhdImQFcKdl72XXR3V3SmeYdT1tNHE2XkR26XObfO+ET3a+OnperWi0Yjhg8nhadX1puV0FYt9ckHSQXjtcyl0DZ05fO3AuVthqHnfTbktzMWLQdhhgzmord3qDVF7aXNJuT2JUK05m1WxeTZBLAmb9gddo+1ZlW9hx/HQ8b8FtX2x5hrJv2WRIZ5xOmGMMa8dnnWeNeyOC820ZcLVtaVz2auGG43LVY5lnDmRVaihj5XOKdExpo2m6bk11t3n+ZXRX3H9VXbprqmpNf+Ru7W39cK9vjnbuW0puBZiJdE15gGbbZOJkeWkLcwp1jHWGc9JgN3MDceRpWGPydgtmKXZHdadz133QbSZ0PWHSazFksXvhbsR5XGstZSp5amM7a0eA93N+alh6bXWObu1mXIZ+dEpuZHWScZhdMk+tc3tQa17HdSBiklxvbphfbl1uaEV6kmKFWmR5TmdfZHZ52W1uZ9Zk2WgsZ8JpqVqadi9ryHPpbMpipFknarhug2KgX0VdcmujYdh5yV9wWQlkQ2KtcetxIWyegPFsiHM1ZzRqP3gUcrB5EGJJdDR5c2xXX3xvIW9bb25wh24AdNVcrVvraHFuh2ezeNh3N3UccRRzyXLYcTxtYmy8b8mFqGqrXC1k6XHiZAZqh3MCbVxoh1T3actgYF0/WwteWmiZYh1pmlrycj96YWIpS/1euXPvaGFVRHGzdQVrj2AFbqB21mW9XYVepHSsXTZrVWWZVrRwkXhSbVFcx2JIaONgtV7yTAZ5dV1ia01ubG1JZztpN1+pYRhWl292aNRuWGPhZwNW8mRXcCJxAW1ycqRe41y5ZcyFCHM+Ybpra23QVbBT9F/mcaGQN2cZZSJZWHG2eM1nT1YfZ5h6q3bNbcpYKGK7ZwtkOorpV8BnHWUQZjBgn13xWudtD1jhaHFxwnY5ZThjZWn1YclbM2LqWz1mxGR/bmxl3F8ca/hwkW1BbYhtwFdRdRFiOWLAe7hxS1pdcY59NV0YeJ9rQY4qX6Fg4X6Ua3pt/pASYD9ssXMwXM19K1rSXSuD14AgYvF0M1wFdqpdeYquc61802cNWsRw01/MYAODBGcYiR9mS3dfll5j5mftbUF9+Gnnbbt3WHoyb2F8enr3ce1ZuZSmgkBelnFQdXBYmleCbCV0c29Qa/1odnKce+l7BH+zcXFiG2wxY3CJ8nRhdttoQYtEZdaDonGqW8ZvP3+PiQR6E3qVbgOI/H60YjNI41pbZ9plX4LFdG9oJmwcgsV471x6jbJl44BPSZuB9WZybMF1klcObdlqc4VZbd5y1naMdvhsSoX4SsNdtl0CbZ1JNV9gYARce3VOZX1IhlACatNNA2OQcoJQYVNWdcBTTmKyYFBYZnFXYGNVcVMZak5z4mHvasRTA29JS81exl1ZVZBjJlLDefZezIcJbVN+dmq3X8lzZFi6YzdR/mcyfP542WutVRZh3GHvX/djDFFKV65OF12WelR47EzcSlVncncUbw9wpk30Xn5mFYs2Z5NrEl31aFhdtFg8YXltNIk+aXNYaVtsaLdpwlzbTPVhEHcLST5kiFirYelibFUbfvxEmXMJVQ5bOnPhSDtPCk/WTv5QnFczYzVPpFJDZQdVb2zqcOlcNGR2cb15q287VwFsX4R5dAJH9ldUR/xm4We7XaN53HHwVhxk5XC2aOlneGr5d4hwmXJsXQRaDXD6VYJW1FzUU5JaCngjZSpPjnN7dGFOiHqsW5x0FWX7R4Na7GoHb0xMEHjWS/GGQ4t0fAmFOlgsd0tiBGGmbRReJn3zXcF4S2aLbSlqPk/Mfy9ULVydVeJnlWIral9iaUujd+ZdGnEkXcJVhlNnWr6JVn6rbOFdzGzCU49KqogXXtyCrG4yd+9RN3e4eI9ymF0xeI2ANkYEdox5CXMJdLVaY2R+T8Vzjk8ne6JmVmQlV9B4V30qTlBF6l4Tf6peRXYjVbdvmYFrUsU/A2qlclx19EsjdAV6v4JMVsUgJkHhVftmaTQXT51dCECgXpNmBD0nYn9lsUfLbPVoT1JzbqdlwUgDPSVoDFCfLntfGzlNQhlg/1+7T71Ylyy3TtYrsU7IOoNydVgPT6xmVTpwgr1SoXIDaoFBWHiNcu5ggl0hampeYmIrVU5noFa7XmwnaVYSM5E/hFBtXxFwjmImM9I/3GyFYrRfenItNTYnt2pVloJBv1C6Mg9h5W1tQIZWMG75eItltWR0TplSQFmjYldkJnLgUtshQlsJdJhnuWjxNVl6zzihc2hJLWF5aJxUX2ZhXMBlAllVOytuM02sYDNDZUexRY5VlFNmSndwWl9nYhBZ3mudWXdkbSbqWmpq3nJlYHNpb38icaBr3W2ccHhrSXkYX2FqtXLrcDp3LHpxYDGDCHLldPtaaVnHYo9v83MAbOB8C3JSePt1+3ZOXsWCJ2ZfdYRvTmR5ZVls1oevd1JiIGE2ZjhefIPJbTJY2ltYZKRuMGjcaX5jS2ejbeV9gneAYvKLBHxIaxZ9xGA3ZdVuYGJ/YSBfkFBQbJxZyW4QbCJm1V16cxFvkmOHd0BowXpfWl2Bi2W7bjR5IG47fcdi+Xalf3Ns239na8VuC2ksgSZ2VV/IaodzlXGXX6d383feapVwOoiiXNtkQVSDZTp5hHpJbSVmP3kqcxR6cl5ae3xcGWpwZ/99IzUZT7doUG32Pj1hxHcXPiZtlWHTNItgUnAHaelu5mDhfSFHc3E3XJFRp2kDMOlQHWOKNZY853qCeexRF2iWNxx1+zx8SBlPEHyncxBbgo00SmieMooNib1sBVkzZVJ+wGk1X2JkNoL/YEWBm3GycG5eilN4aaM/30nEWIhlTXZ/gu9CsT86b5OB5G08aeM8PTzPXu6dinN/fM9jTmA1PvdXYmwBbQGekWBFcsNC+3E8ao9osX5tfANpAVVucedusm+lZEc/RIidSaJxhVbkfE5dBEjfVD9vBXqeW09V+nKJffdQgntbTeprp376N9ZEz2ZuhPtm71wCcKeOUXIlRz5L0GAuZFNvXlLRZ+14Skihc01ZC2JIbQZ1G1q4YaVmM2CXS3VykVlbUsVyMkj5TxFlM2GOWK5zu3YTWJhsWWASem9N4W7CVlZdcWbIZbtyvlRjhzp2cWt3Yf1mFHAhX9Jzume/bqJqSl+KbCBZ83jBcWJTWXUQWLpOjGoFbTxbRWJuZJNWWnN+hSVrHmTdYThby2rGkPF78mIhUrlnk05kZJlsF18wiKtY6WHXXSdxqG+OaQ9l1ldYciFc7WprXGNhlV8yZyeAqF75c/lT2naIZxBcaVE4bAVkUlY5XppqLVawXjdo4F8JaB153U+ga850cHKNdlNaFXgafChy5lq7ZDZuOWiFZKJveHNBZtRzTm/XcDliD3q+atJvqXcccs1/RW5TWSZrqVXgZM15mYLeevlcX2W3blx47XcufFFo7XGXWVt/qXc9enBnJ2eHc/lw6EvNY4FoEHlIb2tjgHm1WPB7Gl+fcxhnl2ZgdkhmpGtmatpxH2S2b4JxoXpxbml16WRBa41QlI1GYPFvWXTkeZtp70lAeJZrMHMOaalwhXapblVlslrqWd50aWtZdq1iJGQbfcNrAXyYeKp1NW3xab1xgGTzS3ZpL2H6aC9rGHHrcA9pom6HZ2Z5c4/mWpBnLHN8dBtd+GPYfk5pR2CXbNlx116/bbZe73OAa8VnqTUVP6pfn3Y4PW5t8Gx/TlxjVHGaRj5Q+GqGZxly12S8ZxlY7XcCWI1NGGzxN24vcGYFWfJS3YOocrc4E3GEQXBk1kV7P35BqFundn9EK4tKQNafBm90d6psalZmcsZm6mnrblBm5ndWXzdk/lWqbhx3uEfhVCxK90ehUKhetnLnY7tH8TtVZbtIAHO6XmRGfkeCYj6oinX3WqxP7mpiSV1V2mi4dImQN142Yb9E72ncXyxpSHEIe09doS6DZ9pjoWVZX+48t41mPSlm50wPU3d1GT/QTEVuv2pfTYs/W3gLVXphj1e7S0Rm6WhzS1xQuWVxdX5xWkksc2J/TGcfMJSRZH5ZYbNjdGw5VRlWTowqYwpcsHJhXodkbVEIcttxjl28jmFjplyoeFVgmHyIhIVbE4GJfbttYmLod3RW+3fRbD9m/XX6eUVdVXeNgSxqfXYxZMZhOFXJUY9zS13dbXVgoXqLZvxRYHSbV7lhHVodX+pi7V0zbr56K1IoWptitlbKc7d/Z12ybhZ0gGuyhQOLm1/eT65mdV7micxds5WGZSJeLmOWUA9hz2TfdBRbEViqbcNi4GNyXCxxlGbtXSRolVaBbPc2K2QHaex4DmO6axNxhH22Wd5kqn/mbcFoSFMwaipc8XYJWT5X+nA1ZWNwlmPbcpx/E3ObY4hh0Gt4ZLR03GF+dvB9hGaDXmJtcXRZW5BuMW0ZabdVFG6SbHFjQ254YM52GXBRYYlu0mLPaPdx9mhPZ3Je0WNCXBpxoG41YZyB7GcQaVdk9WGaZ25wYnObY/9eT2mpaSputUzeZORQnmtAZhpkqF2Yau1wV3ejdyZvjXiLb2lnL2YxdhhbzVmaeb5hFHc0Zlxv0WQzYfRXNX8TZFhrlHKed8J9MGJWbHxxB39UcJRgeXFzZ95uA2AjbJdi13HPgipncVhoZV1ebG1gXz1nb2dHeBZuG2xfbWdvLV9wZvVrpWxnaUBngF8MaMRnPF34ctRstXczYelvs2Bedutltmv2ZsZ0y2llVtRm8mQDSNVpcWa3V6VvZWRWZFpqO2qmXCFgwmtgbAJlAW2gZblpwmGuNeZounudZhpKv3QtfkZnonYzVI59lWJ9M+Blampka4lQ53rMVOGV63Y4gj5iXlatYZd4y2tSSyh2J31Sbjt8PnQ0ea5j7FuPcL9j7mnSapFshoDgcWhsOVMCYINcQWw+b79XB1PBZaR4wGynYZRhrGXlSnlV8W70aECTx2ecXmdSN2FqdG9aM2K9aqtko0p4ZXJuqnGzacFXN4JWX6xwlGCXdLlsSlVbO71uAGBoXBJPf2mRbiF3WmmtUGV6gYKTVa1GgmX1dG1nG12ya4h0UXk5W6l8EYZnTAFg4XqdVpxNz4dYTpBjEXDIUIRsemnkbHRd1U5ehoVzF2mygwFnUpi2awZiRoSTddFnR2y2dEhhB5JbSSWEgoFOY+1es1+kbVRiloMBVbhozlpyWeJxm2xQZklq9V9IZEVYv3JOUOVRHFh9cAN6YllnkuBu9WDhR0dM9lhfevF3Rm2QaalgRXb5dhV9r2Xoal1lqVFsdOtejY/vcBlZfmWJiU5wMF3JbxZatUnYYLpfpV73TgR0+Us3ZbRSelmcfNOEXoaqYXJ1Vk7MbcVxFZYkTjtWG2FVe1hgbWQ2Ua1dPXnZVipVTH7Ne3VgT1t/YeJ6JnAvWc1WeoTbVkhdV3D5a29n9nOdbjFzuWfSW01l0GlDbVNet3A5crRxOGR4arRoZmKadWxuWU5cagpoXVzYbjxjhmQHY5VZgGZAWLdjplaXXVVzNGGhbVFs/H8IcZ9wLFeGUnxvdWFAaWB58WKtck1nZm8Xc8ly6Ws3Z9pn8GsdXYxfnGRwYPt3FFI2Z41yGG0za+9o210xXJRer3ztdGd16109cB51LV/ebdJfsnyEZ+pwzmr0b0F4DHMAZKxsbnchXNtqhGbbbgVfGmgDjltmoXE+Z2hovWYLWf507l2NYHBgiWmXWHZZgmILcrFqhmRvZY9Xnmmicwp1eGP9X8Zn22/tc2hnflK7VEWBOmtOZaJk4GWbbipmVnAbW99ixWEhbz5uEXGXb4RukXU9WElc62RqUUxdgXnlTWFSM2u5cbtok3coUdZ2/l9ta+FkI3qucFRZHniUWjl6JXz8bd9j4mk2bOtm6HPOXj5rpXRjZMBrzHIDe2pf/FLoe4tgBFiyYS1y03Z8cZlm1VkdZYN4FWpaX8lSWmmVU7yMwXVVdYtniWGXUepdoGv3ZpGNJGUOawph13N/fNRkQHTiYyB3HmY3eeFucXoVbMJhk38FZ51x3FH4cetpu10QVVJgx3XKdl9lm3PzcaRB8m5+VQNyP20XVBdmBW8Caw9uHHDMY8VnoYC9XsN+uWW1UbJmDXbSYs5Sg3h9YAhawXBOY9xjYlypZoZ3llRYbpVywWWPZolpZ4VEhlpHTnSpZgxHWkXPaJ5YM23dTbVp6l6afzRW/nVDZpFKfWORQuhLSU1wZeRh1XYRcB9vf2/WYgxaQmRHYy5b+0vJdj5xh1sqYdt6eVddWfZtp2LpZxJh2Veug19nPmTJZXV+9GBNalhhqFCwbDdqonYhciJgZWUaYy1qz1fYdbVw41bKeZBjrlViVYdi00/AXl5BfFB2a4RuuW2XYnVh32V9dRl4SIEAWHdbz2/sc/ptPmdEfX9uNHRjXT9cFnfPd+pkdVLebphto2qCSfxge2EXQ3ZhM3rHYy5m9H7qcdNZX3vQdq9qwW1PXX+Bu2rEXVN4v18NXid+tm5ObgZu+U0faZ9wZlupd+pyz1ABaOxWqX6RU8R8T1+8ZTdpsl7YdblhcW86bMNwQGonWHJpJmmLWupUDW91bc5vLXGwd3tz+F14dgJxtGIcR2t04nOIWnlpuFTaaNd9yGnJc25eM1EGYP5zM3U5Zrxyg1VPbQlwO0ydcPJbo3+QYiJly2cPbyB0cW+SeZ99pW7vYz6CNHKid1l23lZYe5FZe12+WyZ9Bmc5VY5j6XFRZgJfdXbrWWd8kUl+cyVaT27Zbz9pGmUqXJltVXeQZY1le3tgYsd3wDk0YqRz8nWVVotrU2MMXIRqjGavXDljLnXuXqthPHIpbM1mGmQ9ZUJdUWb9YhNZ/mFCXexTzG3PZ0FXsGFvU0pv1VD9WHNNPmfJdzFmLXsqQ8F9d27dfNhU72srYa9v/HS+X01feXjtco5W5GZ+bfRdu1IJayVSGUZAZRVZ92b5bWhKimXrbvN1aGhqY49UclKtZ1V+fmPjeH9pKXHXWvZIo2p/bx+T0Gm+Wq5iX2z4Yg9vpm5HWkNj/jiCYZxlx2F9W2NMQ3q9YlZyjF89YWJ2j0/dYUxoGV0ZYo5WmmdHUA1SZWnjT7VlZYC3VxhkIHL3a5lgCGhmbL916HeaWKZ4wWfWUi5xYXlnUDtYtnV5TjVI7WOATXhxDTwIZfB3AECDbeJoHFcecrRnWIDQgZVXVmtSajZbvGA2e3JKkHSkSH9mFG4AdSVUwn/kbyhPX2hwQatdE1IsXO9d43ONT1FlUFyPdONHk2IOYf1lLFEZcTFhKkmAa/ljwFP2YTdmiFsrYwloaF8CfSFq12WAb/mGgly8ZNhDQFbJcj9282++buRE81xcWwNvz0RceDxXeVQeYFlmnknoSbtyP0NXVKNMcEdya9NTXWENYmFsSlfhZRtpUHjQXSNcm2EjarlgLGdYQUlTC3WtXuBMA3gxX2txak0tYCN+CHIBTkRX816Dg0dvjVkYantiamGXUlR82VrSWUllq1lSZ4ljL3dcXl1hRm66ZlBKHWPIbUaStqbKVXFmh2dFT5RP1HwwOymBAV8GXHJt8YQsYmiGtWVmVcxtNz7OVO1LkmBreW50h2Gvc4NZ23OwUcVxLU++YBtWI2tuXOROGXDxeIxbOl7NdixJD3NUdT93XJdRaUZpwHv/j7ZnjlzbSSZhDmJhZj+IEWrbSIpgN0QzZUFJj2xdX6dH9W76bBBbk0x0ZnhaeWcyXQ5jqXl5GgJzYXU4byRU5WYqc715nGADawpfjFpkZgFfDlLAS9+C+E/QPc19h3qpYMZc3HJHhRNyfFlCOK9XjIxZdLlg+GzwgbxlQWQmdTldrmm2bcNKkF7sZ9Nr6mdFToZ7mmmsUPWGqFtveHNkh2/9gvaA7Wd3bBJu+1NecE1hYnJnaxlnqGWcYIF9kWp9g4l7R1wbZQFqi4OGZ4JDvmOsc6ZvHmepZFNfHVUbVplduFevajSBxIFsUpBV9l3QYGZ7UHpXZa09IWrSeRd11nQRZ2tnZmaNWYx1GmTBatZ7ilYFZfhrzGCSWDd4qF7EXKZhfEwoatRORma/XFVNfVrkV110gITWg/JiT4E3Tvp1kHDBiDBe2kSZf3Fa5GvAbCF/YkpGgF1OgGnQdA9yq2jlYD5fO33ZZjZm40yNaVlnuWqKdIZfnGxDfDB9qnj9byWMMWQ3dQtxy5V9b95dsoVKVLVrd3rYUC9efHFRbkSFcGK8XDFrwn4+VxlsYVu9iHZYmWFuZLh7B4hXY1Z5o1ifZGVyJnkmh7RzLWEBh5p75mFbdreAW3ixeG5/EW00YLSJFnr0WUJtOIVuat904HnXdEl4C33ugIJzFWCZcKt+AnRXV+6K73zIZNBu7F4gblKJ8mQ9Z5Ju33aCXkV5PoIFawt8bIQacb55qXluh+F5PXtFXW42t2GgX3Fe7YUUaalbfVoddrx8e3yUfC1eK3M0ajBt5Wg4cAp2f2hsZVhlW3svZ7Vi+m93gSN7N3Nqa/9fbnYiYktov2tLcBxwh3IedIJZEnARW2xyX23DXIl3GG4xbzRwymMbZ3Zl72N8ccha/nMTfvx4eWXkfDFeh4AWXtZ4JV96cohfaXXYcKxlnYIsea1tiWZtYD1gaWXpY75Yqmbmbtdf7HT3Y/N8DHLRhyh1mlhtYF2OU3ewXJ5sq2pVa+diG2SvXj9sxFdSbXFeSnmZeJRt9mGCbJJhbld0exFeOneuUoFuh2yLedN9/WwabX1vzGcMe8BswXXNZUF3km/zc21s0GTAaM9+yF0aa8t0xHjfe/BqPXYac4Z28Fg2b6N0p2R9ecp1B2m8aPOCE218fIlvs3Wtb8CEsnwBZPBIs2VbcrxIdkVbeAtZxEWjaL5Xx2heSadlNWCEUm99t2S8UB5vwmAKh9aN7115dmxpiWReVbR3j0gkafpHoF6AVVdy+mHyeUBzCVyrZhhViFpYTpNQXX2bXaVa3V4MdUpc9k7vdZtMtUsAXdhgVFu+UFVern09WA9ienGwRNVzK2W8bKJy8mHFaqaHK4J3a5JHCkizPCloF29xb0JkUF2gYkVNuGgyTR6FZlHtUe1kA2B8WDxPfFKHT5BEGGKZQU9r8H1falZyEn65Rf1jMHV0f+E+wUbgapxaB13iVNx4VVM5b7I+Rkxwd8lhMWbpWHtqxnPKZfljTEeAYEhtb2fnY7x1rFb3aTZipWIVerp2o23Za55eAoOzZdVnqWd4er11m2lOav1oBmv+YGd8xHBmZyWAl3CTaD1rQXXXa8tccVzBfG17cFn6XYGGHVejh4qGmnRUc2Jx2Wf+edp0rHEBZcZ7M135dER/d2hzXIl0uoAFaFNyE3FBdl1p9W6ga5NqN10GV/9tUlr5bwRsCGrTbr5w8WeKUyFmXm7Nb9F7VmY2Z85mzXQUW0BocWX6ajN7BW8OekRv7Gy6cl55KXr9bO5Yz2PTdNRv33HzbEpuyV7mcAxk0nIwWphrMXVjWKRlM2XjdFl8jWqDX4d1AHroY45lyWoyhoaFlHklNsRK3npNdGBLCWfKgQw5EnB7YCA9ymiXZm1hV2t2YTBS8TyEbpZg8kYbYGRAS0L/ev48bkJXf219UF2dfeJS8XjxTmFT5lNset6Bi03Phh1N9LFlfRt9MnLFW8tf4WP4ddpWMmRyhKJ10Wv/eBRmKF/FTfxwwUxHQURixGMoX4Jvw0heM51dt1jFb/dnHzZnOSpqkJK2gQx/pl1KagY38Tpsa8JsKJlXZlhlIE0xeTptO3KIY6xmz3F4SAh0SVyyVEJdklHGfQpSW3QiQIN0g15/RXdR9XPmYZVN/mBbc2d4TFKdXsVMmW+2fddTkU1OY3N5sF6DQghfUo1xe5VUrHXDaqF6dG5neb98q3FGakB6EWtpcwFjVXRWdQBhRWAfgYFmQ2Exh0OAt3E6bjF3THGnhA5wAWy1Y7RpFWwwbehmYn6Gi3Rk/Hq4b35rQGxrgwxqV3IrYstjDnKGXhdwO28sUEhhq3ZOaPFqQHhmcXpyGn7+eIx/M3f6iY10nGWgbFlx84b0UptpdWCmZHh3R3QTXApirG75dV+A0W4yeE2D62V3cCNlcmnFcIh54XC8f+dn2Ho3Z7l7Q4r/bjZmpnF8ff5/kYite1lro391bY1skH0ee0JkoHGEcad7yGtLcP+OY2wSagxr7WRxhWOBpnMLbL5qQoLbaoVl5WRNiyV4dncIXbxtXmVIaDNwFXbaYs5nonf9WrdgOmI2bFlwDWNAZbJZIXLJYihpWXBMcyxqQmDcc/JiWGYTa7Nuu2ElZxBgb262X9Ji22B6cTlZ3WpLWNRzUFkjSVNirWkYbFNw2kqIbe9jyFyWZKZavmQWYFGDp1xTaetsano+dIdScG+Wdq9nql2qdBphsnllZollhmZWkSBvh3P5fj1krnBodx9guWC1oR9tA10Oa2VsgF/vaVdf2ma5bmKBdl74ZUBePWwodehqhnm6aux7DVQSelt4qlwvX2Ft+XuBhj5Xc1NDWgtzQHZ2Zrdy7m4mfn5zBW5Ha81vkl9haqBzXn+JZUZ4hm2VbXNdB3gWb9Zmy3yZfqVofnG7aURvxl8QdOJxaG7gcdxxo3UOcn12TFtNd0haz1x7e41912rwecNeVXCKcNp3B1DlajRmyl1MbzRfm2wicgpz94DObI9vlGwHdRBx/mr0Z9lj83aicXZ4KnXahhh4xVzbZklu1XTEbt1yz3XSb7RnXljjblJq92Y+aPdw12mYe5BwRm1UZCFx6nOpdEJueH/SZf9lw2inaSl6BF0qZMFlr2d5eg9qOnc+gKd5pHBxaDhs03IkbJFzGG4/aKRv6X6Bau5wx4FPac92eWgHbIR0NmyzaChyFGTEcZNvi3YIee1dUG3ZedyFNZhOfcNOzmDGekhRL1T3iaZSeFBLlXVQt2dnU7BlsmFGR3GWd3OuUwp6m2P9pP2zy1M4d96HjmCEVhOb81/9d1ZYxnwueb2r9F6zaRN+XVjniDNJkWV+Z5liPYVob+9RnHAok8FullSdX+VWNFRBZzN1iFRlSmFzxYQlUmFKgHIxZfmXLo8tdJ6P13FEer+dTpNubhM+MWJ1RcCPy2LCkRKD41g6dMo/cmIxVpiKWmCGW8dhoEXcXK9LCXofWftTi1qxYlqFdUnGfcZuQYZCUK1ftZKBfGNLBFtvgZVjIWL3ZOBcGjdQdFc+01l5j/Z/7Xa3VFddR4aaaz9PS0EbbUhnXWq7Z+hg/Wp3ThBhY2qEWzRRGl2GTl51u1KZbLZjq0cqcshkFmm2a3Ri34OshEJk8lycY4hEYmDEaKNSxW0IVNlqBXYtfV9Q0m66YztSbnJgI3BIAkWSW8dedV/FSsthVHRLYnROK2obaPBTvVoNXntiR1D8aKxiQnKvXThyCVCQc6d6LGAfi1VuM2Ruamt5N2tOZj1Lp19FZT5lbnlxZBlbG3GnWBVtSkq8cSxnJUc/YddqtmNKWn53VETiUuM/m1MXdztNyGlyZHt3/FZodYRr83FQSztg/20+cX5wJFX/XVFo/GFvSQ9eUmyCZ8lgUGLpYvN4B232X1ZN2W5geFFv0l9ha+t0wWvpb+V+AGQ6bt9/Wlr8acNeH2PCaGdf6GzlZyl7b3amZWRrH4K0YK2BlH69ZPR1j3dgadZ+p2nJdKaGgG/0XaBqRH0Ec7t0j3tqdgBzRGe+edZzE2vLY55mRXMjc4VemWCOa9BifVzta9JkoWlvedWF12TNXCR1THcMcSpd11usWdJeEnk9dvxUR0LrZ/1g6mjWXqdm7XzuXplsiFzGX/tds31PY8xahVkxW4Vd8V9qbFNnwFkbaTBlDHIGhT576V2kbBNVA2qvaPl7oFxPWd14V4JkZq9fDXkEcRZ/qG/0bQWDK2StXxhu0WAxbYtfoXbdbUhqoE9pYkpfhGx+aklv7Wf+d3Row22CYoJn9mTwXcRgNXW0Wk9hK3Rddx1zRXP1aRRMml+RYoRwanngY8Fz6WHBWSJi6Ff9bYRktVteT4tunGHAY3qJ1HacdX1nyF3Sdc9qx28ZYUBfVWrtcKZiZ25WXwZo/nhcbH11cVQjeKVnJmqZdt1RKWo5ZIFdBWRrYNFfg1l9cuZrom65cQJfaGdncqFl8mu/ds17hXJLX5lb+GgYaVVpHFbFcCp1iHNUXbxp622zYXZqJngUeZNsZVtIdDBtSWaudhVs4F4mYtd9ZWteaJ1TMG5SZ8hduGE8Y9J7Dl1/YotwmnnfdVBzN2lCiGVgDVmIdDxeOm7eaiF7wFrwf8dm61xacNZxuXXiaj1zL2KyV31nE3gEX45vUE2RYcZuOVtUXyN4zHFhbrN5f2ZsghJV7nPlXtp9QWYAXwF+0Wo3kguFAYeWaL5xB3GPY4djoFwVZxl0025jcCFwHIIuaVdlaXk0XARYcWxzeT9f3H0fS05ku2OzVBNpRF1HbWtZnFePbxqGLW64aX1vN2qcZ6+CxWcZf5BtzG8oS5FfYX/Raf1f7W6EeudlMYVYdZ98eGIOaUFxZFb/bolHAnVQZblZ5UiGeDl2kVL+XSRktXUEUT1zHme2YpeDy17LYz9lcnxVa05WuXKmhmqEfWTVabZawGjTX/ll+nV9ZGxdPnDKe+BwTGrWaC+D/Gx1XRxnCnGgZDt18VZoZbJPbURBf8xoLG8EiP6FUFtvewRkgXGYbMZps2t+czVmHmwiiOhTfYQJeLxy2HYOcbFrb3+OXW9z/2MgdGhvFG2XZfJwWmLWXpNoN1r0b1RiAWGfaAt3jGg1bOhs3U9AZ/5tIFpSVp1lpoiZf3xt1WEVbOpe2W2Wa21kJIr0c8GDxmq9cGxqxm7cbXJ+cnSSVvZ4SW44eWJmZl5JY8ti41v3YiR4E2K9aY9RFGPXeBZfgFtWXRGFFVT0aR93+3kVf49yvVfeYgl8sl2AWrJeIm2qdjNaBGJ6bzN0sm6qYfZ/94Jsc2Z2MnCYebaKYHFCf1x1lnhLf8Rcx2gpjjBu/mgXfNVaJm4CdAFw7GoqZWRvT3sncfWBx2o3ktFtb3QLZjtefYGJa7xxOnBchaN+kmsRaUhwb1wiSHFu/XcVXG92knVqds9kEo/WhOZfBWfDkASJBGTYfhh2dW+UZwZVmGPFXJRgkHnHWmBdr4lBasZ2nWqtYstq6HjPZGZhsHRCevB4R3V0faxybHYYcgdvEYLNaxRpLHpxeoFzU2STaptlz10seoVilmTOarCBNG1mYPWYq1fEfJF4+mwhdbB233VjZC5oCl+7aod0jWSIbMZs0mWMmohvInLoa+NjGGrjbEFy0GLuc1RqMGMOaQ1mPXNFXqZtOXvtZKBtjHThdL5riXitactzNmoFaHp3M24ocnRugG7taYl4emasdRp3GWtjbeJ6LGz6ZlWBdW3fdqeBCmTeXxpuUmIgbbp2ylvGfWdz72qBZu53DnSGW+xofXQbbcl0RHGQcxxk5ndqgt5lcHnvchJqKnAcXIhuj3ZOaQBxrFwNZMVq9HM6abNyWHq4cCNmXmUnbRBz/XW5bv9xbH5PfuR4sX8/be1yOnTUdNtlnoFmZb13uWyhcY18PmblbsFVRGz9Vkl3H3b+gBN33H1HaUxgF3pwd+1uzV31eENjwXbsaT1x5WicZNtiNnuOXwlwAHBgbvBpY3jCXgJoJXXzYql0c2NfX9J56WzMXg9tWnzBchZf3mxHa+hvpW6ec6x4Mn3rZJN2j2WFasZuW34va+F3OXKEbLp3o3rvfsFrPXfHbb9dBGSoapphBmZmeDRf4HSMd9d3hX4+cD5zOHjEYCJktHxlc/ZflYPGcf5e/HvCdlth9mpifdtql4U5Z7Bqxma6eCZe7mq4djJnRnk6bjV37XDfeGBrr2S1dhR3An72eGhymnFmgt54UXEydHRrAGE3eM557HFDZd6ADo+zZw9zDW8QdRBmIHPheMV5qYUEa2pjbV9ScVdvpHfMXXN9omqQdMdyOGHScd5ifnoac/lzsXTPe+BtaWMchixeJG6adGl3W2jefB9vAl8ZctxY7nXic0B50nerZf5mMmwNfaBle4Y1eXVnA3ssbVN14XM6eEs+KmP0dQBx7WbFZ6hymWrEZZRdRHklYiZlc3Gmb4hpLIPTfyV3TF2ieup7eGMDbKdv8GfGXwFAJnqAZy56H2S4Z1NeS2+AcJRhJ1y7ajp0AH+YaZFUMGKjcBB8m26HZylwGnM7f11t/4TUe9x2FnGffI9sE3ZjbPxsQnltdJZgVXY2dI5yQ39UZFB5t2+cf3hejW1UgSBilXh4aKd0eGdLaaJfxWU6XVJpTGULbgpdFndoXPVcWGwQYsFPcGaZXfJN/WPuUSZxpWWkd+J1zUfkZKNkNVgoedlsJnL7WOBOa1x8a25ei10nd9Ro+FyVUhBlE3gScdZf2XM1epNiVl9XX2lVNGLyVvFZmHDfWaVhfHQEcDtVrFxIXKRWlmBoan5nZFaBdslhPlnrWRdtsFx1ZDlpfmVHdTpw8mckbWNk0Gicl2pXRmRkd5hnKW3sXrpX+19Hi8hcmWjVcmlzB090WvJkqWOTZLdkolJoWyFmLmP2cUqP6mgxYKBgLmOEanJo+YTSSuJVZHLfYalyWlZ8bSNrsHbPZLhdYW54Zud2mFxRZkBzm3SsUQBmmmD/VqlfCHAbc71qknVpd3NzcniNd99fXWApblthJWK8a2dhbmSVYYFoVmdadD9mCF5Wb+lZi2QQdrNpoVtebiJVrXV8bSx+a3EIYFVsoWAFafV0iW86ZSd7inLJVaR1KGQ/ZJZjxWTjcgluvWTBY/1u+nJjZ49o/2RzZY91jHOHYotth1JKcXliHIT6bvF0S1FiUhRaSGS4baBih2XqYX1yP2X3X3BfGnLsdNluJ2BicqBam2gsY3VsZ28khNtrGWBAcdRt2XBbfEVrmmtYcK117VvWWiFf+Wr/aNRvXHGZci9oj22JXNtjpmIjaqFZEn4QX1N1FWGXayVrDHPob2psj2ncfpRlKWsZcXNb0FSahLFnWl6BalpUv3EkYAl043MoUUh/Dl+DWP9ximYPh7xwXVl9gap+yFZDXrB1oGF5Z3he7333d2tftmGOeXV9YlpsbMpY4FIHXZlgbnOrXzFgEW8BavBmTFVwZixpcVqhUm9foWhaUHNrR2wiVv5T72XeUOtvFX8aaVNfP3rpXBd1AGhXalZgBWVKVLlmWGivd4p14F2Jb/NaL3BgVMt+lmQDaP5iqlY2ZbtOG3NbagFe12FRVLl42oJLan9s/WhITj9sm3fSiERQLku4cKJu/3MEWR5q5k9mfShUe1w/a3tsOWqgZtBe7nkrZPdTd1APWrF8ZoRQa8pqkYHtbuVah4ffaehzNoQSac9tVm5fboNpAGpyd3dr1G9Diq1wbHX+aVhj6IQJjTprdG4Zg6BqO3n7ZwtufZD1aZ9rAWMehQh0gYQxgnFcGGkyZ3uG32uqdT9dfV+tZEVf713dcRBcy2v1ZWRwtlzMhwmOB3Urdy1oAXWmcruGhXakYNVppWO4faV1a12LXVdd43M0dIxyNX9mezByxWVxZBxhMmygbc1sKXMcX+N1QWFpdcF7s2XtbBNxz3UDitiNq3MWXmKMklxWZaZwPnwlcx5p0IGUf95e/2IIjQdwMXpNbsZr4YLohIBeMnDya8t5dGeDWbN0A4zWZKlHGofZba5VHYZudd1aZYCsf+VHKH2+Zxh7k22FdlGKkEwMcNFkdWCwbC1FCGjue7NQ1lWxidl/4V/Ue2lk2Xi2ZABU9m19gx9dtV4MhA1VHY41meh7+YrvVwppLXKwXKJVI2s1ik5vC4nXgueGPXfeXXJ3rlBLWHB6+nspWtOBI1QWX8t09XvNW6hzG0eLRg1dAHXbfiN9dmIKdfE/O1mikSVsNIkvaLGIN1rwfqyNa19HdKaMMH2VXcJ93HTcftJ2FWHpXBFfVF6qQXx7DmGrSNNEWmwje/hlUUbwZjJ/AFG3b2ld+G0Mic1bO0P9YLqC8mtQV+hzzoCcd7h7fVvVYhB18l8UXmxiK3TOds960HHgdbFmNHVZeE92S3Z5eC15JnTVYo5iP21vd3Bnn2xzaNptxWWQa8xvy2MtatR2FF/bclhmHnNJZ1JmJWOCbVxijnBSc9l4fWuDXl5x2mJgbcBtXGaedxdiEWDeZ2BhpmbxbzZyRGkBZNJqf2cCZPRy5XiCaiuI4WHoaPNs1m1SdFNmpXZSZCx1Rl0Oad9o6WcXcTB1fHDqcBV9BmttebdeCWKbbdVkgm7CYxN3mGD/dMxti2p3dndp/XatZtFgKW/UYlN682weaCV8f15Ic7pxTGREaLNfYWmKb75z1XOVcshuynwtaZZ0Dmf/dNNpCXJec2R3LWO7W4xqD3kvYUtSQXPmcLdl3lllYuBr8WLsdfRqtHNlaNZhMHbga+9UEG1wa/xfvW47ZBBgGnlwb0doG2OcZtZmC2IIc5p3y2uRdBRzIHA+bbRpzmxkZN9zJGw1cHBtkGc0bqpytm0eXWxfRGY4bLlfVWAQWqpi5WURd4pjSGxuZZRhtGRsdfZn73ULXFRr5F6WbY9dFXuUZg92EW6kaCVueW5vdv5ibGy8Z5Rcg2PeV/hs8mPTUyVu5FiveTFXTXOBXDBuTmSxdi96e2/gYzZpqGvuZWxrVHQYYP9w3meuZwRzzmsEdQluLWZebCR3SGGZZmFYil4fcaNvcWgjc/NedXircA5YBHCQebJnL3YJbaOFR2hPdDdoBEeJddxntk7VYUdf2mbQdj5auGaSgIGGdXS3echm53s+Y8JoDYKlbq114W+rdF9iVomOeauGRnOnYRR1OW8bbCR/wm1JgS5eH4AmcFOCsV7icaBsZGwWYVBkYXgBYexsomoMVYtvMYmUcbxlKlRyZ0xt+Hf0ekl4K2+jbN1de15ZglJsKYG4aLZoM1syT5iAQHeccWFvSGtkd1dmgW59d1xguGU9OdZhflwRYxhsul5qcndVZnYNaCVlQXfaYNZ4w2n7Uq5oNHkaeCdcpnLSa9lwyXEDZ1Z0vXHKarR4ZWycg4FQt3VEczRHqkYhaNZYllKwijRSTHX9SGFzu2TVSbliOG9/Y+dwU2QhUp9b+1Ygd8aAL0jaS/Jig05QaVVVbnDKeG5PX1FGdKh3lVnhh/uKB0vhScJNYHfadXBATGrzgMZiFFA2cL1BvEh5SpBtn3b4Qudz4WH3aZBZR2jKU3BckWAQeMUjk12ZbGlgq3UWeEpmr1loQ4V6fG+RaZxxiU3uYnlSf3BOTKRcTlsaREB1V1smQ+FVboQoRVxPUlDTPed9laN3dt1lT3AGPR1w6HU8dwdWREXEZ9B0YXiKSuRqxkiDbxQ+HVAQbXF0oWYCS95qvYEPX3FcRFOdcZZxUnduanteJnivdaxm7mkiY9Vl1XpaZNJ02n+dcw9hm3TaZqFoMHfTd2JkbG4SYRJjAF4VdUBgKXZmYzxgF3jPd4F1A29Qcnl4THFObaJptWumSHtapXZ3YsV4NmFRZE50A3LaX2lz2GISeVBy52QFcPRtVHC6bCVkx23Bd25rqWkXc89jNVpEWAVydmNxc4Z2t3HcZYJgQGgQfKhYoGQ4eOVswVvuYHlmTWiicUVsXW68cCVlcmONZVZuLmrXa9JkJmb7c/h0YnlvbXx0E2j3Y2pohm0nayFmU3O9eqRrwGUtdLxo9mMEddVxBHQid3ttUGvQXXVg7WdDYSZW433FoiWHvT63a5mB8FKjORWNq1ItSOR881BGX8hTDnUxYD1DEZoObTdeo5vyXA6lJoGDN+qYipZUR8pE73nNQgeQ0U+umGtjd5lAOg9kYY7BO6anWWkMRgc+QlJoeIlj0FrCcVWI8WQPVYFmPVR9VfA+WGAVgXhEr48RfopkHUW1bEs/QocMnsJk2GkHbw13Z5gkp95y4EONU/JTH4Grcu6UMIr0SKR3/VI6YkZCMpLiQodIuF+pTJ1G9lJ5qQtAm1yoVbRFhIodn2CHQmSEncVBi13RmZiQ01g5R9SMb4LmX4FNJT88TOabJlF6QdmP+4V/eK9LcG8DhARgAUt4QZ2WeS+0R7dod2mdRZB75GphVK9xqnusYdRyXXSLi591UmKYaMtLuHFncOdF7GR0XYFkRXJySaxTZoBahPxOIn18OHGBmlgOVOBgB3uNbBxhFXX9Otd04HuWe3KIn2JTa+1mmHS4YZlvz3uEYNV6BXz7grVa0lGEf+RS2DfubVtkalpxdxlJcE+GWeh6Am1WZEBVxUhgdJF9PW8dfEJu1GRTT9pNhWmoXgSPl11vgDtcplhDgTNs6GLvgEVo0VCKc8hximkAdOdOo1QlTXJbRlnDcMBxQVkKTrVxQnosZIZYvHMtiOBsl2LuW3tv34RnUa9IZ3MuhkNfAU53bGOCoW/0Yc50UnUVc892eWu+eYZ+NF8XbjF/B22hg/dvgIDyXlNuunKdYiNfBXT/ZrJxWGFShKR6wWD5XMSAIoIjaZZsWGWxbgNsQI6pd3Bpy1fucTFrZHhyV9ZtN2q8c/h1O2vUXfVuhmWNd6twrWt0dNt+a3EZZr565Xptc5p6uoW5hZ1z/XwValRc0HKcfxRrqXAIe4d4GFVobTZtbHmpbmxyCVSNafZ37XJmcqNqWG9decOAV3XubHxyZHMYcFJ/7XOLdUFt22zQYJZ7KWTlY/1jnm4WWeBpCV3XfOFmR3SwfltYyH9ybuxsPVp+byN3tX94ce13UoBzedt7CnJdft1weXUIUBU3bofBXb5Pn5kog0JVPYJAnmVR/4a/Xgif22YWbMGLcmaXdzhlsVFZYnlVm0qimXVX5VEOmpCV+0MMmO5g0Z3MX7tfay1+lLRSx0GTk+ZI6WSDkKCVs5jAW+Rm2KWdXf5LAWnukgNkTo18hayTJl+SYGOe0j9ATF96JX57dv6U5FbdUkd+W1xeagVlkV5+Vbl6lFvthrmPuEJ9Z/hF7WSHgkJqFVu0aPONUljuku+EFHctk0qX6IimPhWSvJNdmEicwT+wUvRTwm6VTIyXQmJZX+pAII/ei9FDB1FqeKWWvVYHiYBWcpq6lkFAKTZFXwCKqGj1O+9ogpBcgUhV2GWTWN9reF/1WvJkQHVkYR5mnXLsUrxwpWfgc7p05GdKdG1cNHOdXIs/n2XccXd7En5XZMBIUopEfQJpGXMIXj5o7jNsV9lRTG4vdt9JQXWCUJU8LXfhik51uVLncEV9ZGpqd11saoEYZaxzKIQddvlpX0ikZ/FElGHEWW9vaHfAh6tmgFZXaPBxVnTrZBtovFaWZO5JQIE9bYNgM27Jef5nW3SwdANnyWqfYmdmiGsHaDFyVmxchtRgKDyJdYxiTHbmXp1B70YGRER34liEZY1vU1pPWx5hF3taXiBKuGuzbdpqc3gLZihzqG/dTG1TLF5ke5Bhr0iYZ7pzTG0iO4pXYXLYcoRvY0nfZwJnzGW/doJwXVobb9hpSVn0Yz9o5l83U7V1HmgvY9xjs3BWa6lkD2kTa2ttkni8b1ttc1z5ZBtCtHD8VdJzg3OXZSJp3lqPfjx2EWn/VbdgHmyfXn5mqHfzdpNae2mSVY9t5mkJZcB8s2wSbzBazHJKbW5qLXMOUmJ7l17+j+pd/mxbV6FpQFv+bM51Z2rBdZ95H3WqaNtdYWeNdPVlf22kXatY5HDBbGBndl5xZSpwzl7bXO1zVWqib659NGjGde1qmGQ/ZTxd0HO1Z5lsf2Mtcspo3GVYekJsaW8BXnFvMGWeYgxeAmByaUhre3ZvZphgFnxjXGR4NHTDdIF48G1+bzdt/2iGcX1wY3T5dfN+dnFBXc9sem7Xawd2t2kJdXZeulYPdjF07GcZYVpzh1mBdG5ffV90YlRygFLLXvxs7G1FZidrzlygeIppYmIyYiNmEWBUWBZs+W2gb4dj+VsocXBmWGGGa2hszGcDciVoYHQMcHNmgWCva45wSHW5b4dylGIvZ8lr0HjIdFZpqncNbgJsXl7OYx5fr1qVX3taC2SjYCBRzF9HYYZ1nGTlayl1WG7jaOpjDnT0eMxxN2/BXNdsxWIAdQSAkGQZX6B0xGPpc2deaGBbYy5mvGbAcQR3cHpSXRZm7GfzZNthTHR1UeVqpWNibzJb6V3zWG1aYmGqZ7JkEGe8XS1Yzmu0a1JjY13jZdVauWQpaRpzIHMAV0BgkXCnad1j93G5bqlX/GpNXKxu7FUbXGpdj27BbVhy0HLIcgV8dmCfYjhvVGNtbtNeq20Eb41qxmOHdZ1e5m2zXvhxMXieX6NxlFIsc9Zi+moibldfl2w8aVCFeGDsbGRbUl88YDd8dXM8bNFsiWaJZi5pcViJXPN0UHbKbTJiaWmaVnJ2UWuBYGJuZH7SZahgsG2YUu12CohWbnVjsXegWkpxx3F+bm1kXGLyZ4t6+l50cGF8JGR0amttu2wfX1R5n2xpZm9d139lbhpluWTebzhzi2W9YalgUWXlXM5vPWpGXvJzFXTWbBdqVH77ZQhhM2Rec71iQGcYdk1rVXDVYcNlq21qaM15TV1Uak5vtWiNeOFnmGqzZ1ZhpGeneQdmn3AmYNxymGTkZExxe2ImdRFqXYNDXj9nJXe3YJxtLmtZabZ41XP4eHRvi2fccUleEGuMc41g7F/PRuxyUWtLYv53D1z+R95mRFjEb5ljAGImdk9j6lyqXfhthluTdmBwmWReYW5zzWTcXCp9iWQfXR128HREc29jUnqLZ0B0/nQ/buN34H0eW4Rbnm26e/dt7mYHXtRyZGhhZ81qU3Q0bk5j9Vmua45ggnaUdW5aPH40bidz+WeTcFCBxWv1bypv2YCVfg5uVXyHcW6IfF6cZBGEqmp1eTyL+3V+Z4VoNlFBdVZrrHrdbBx5GntSZjB5bXCqfARt62VJgbdvJ3dcZj59eHfjaT9+iXnGff1poWlhXd6D9WYmfj13/HA9eWh2YGNhfPCDV3B4cu2PdXIhdMlnZmjob0Fv+DtqYPhmf3EBaOdy42Dwc+57QnHwYxNn7HM9bylxW1q/Y75zo3B8fzBkPWx/c9GCqXBadUxqbYRYbrJ4/Hp1ZgZxxnKXY6NxV246cxJ2qWkXeXBkyo8wdjdsDoRwaRxrp2TYbwt8FW37cK931XLyce1x73qPd+2U6V5Bbt5sPGbsZFR2BnL0e45cHWsudQdn5GNddeRb/278ax9mZmdfaGVfFW+abAJiLW5TbrRh/WqlZHFxvHQlaKxqTGy4aylnMGQ/gqJzIWX3bHtGnWc6YwV7iWO8cm5llWc0f/hl4naxW91hyGnMb4pj+3OAYvVg/HOGY85e7W5/XYVzymLkaAVzcFpfZ2pypHQ0dklp5F46dNZi3W5zZrhrV24tYHV74GbxdQdlO2+3WBFkrXSUb/BaQGCCbjZexGZ5Yw9t5HHccc5vDXa9crFxrHXPbLpcOWUdX0xqI3HIXgxzoWJ1bTllVmPZbYpi1FyTZ4h2OnBWdfFcalyPW4VvcmZ3bOBox2aBThhYonFNZyVc92idYg12KG6eaaNyjFQ9Zpx1jl1ibpRvP2hAYtNdNmDBdxh6IW7EdHF4/nNeXeNp211FbBpdl1eGXrh6Rl+0aUNxXGvEX5FwdGSISeVtfm+KcClsi1+OXSlVP2XYcdNcKGiSX7RkAF1mWCR36G9zbqZyc1n2a9xv6GsPZoxfDHZHW5ho0FDqYUlvaGJNZuVuFl22c150W1S+dzla3WKLcnlk0nAoVlZRX2IwV2dkk0dGaghvuHHTcA1gNlNwXIJyu2l7RKFM8GrQUWBuCmOyWzpTjnX1Wr1isGAfc6dum3RjXwlbKGG4ZktU4VPXYrBoR37cbD9kY3CqgJNjMHfBfph1y3wjbsltyHJbYtmKr1erdJZ/AWUEaIgodCExceJxwGYvb3JzXWbneplfTXraX35vOk6BdHpdCmb/bid3C3D+gFZz9XonXGJx3GWDasxuUnNbcG5duY3adrh+FnFLiBGIUnwlZUKRMXm2btx4ilhUcapjnSrAb6R0cUm8S15j1XT+dIp4f2EscrZhj2DdczJzGYC8b5B95mWwcbR5NV/ncxN6sGrbgVl4S47YgdR/PnQYiM9v/GT0bmaAEXeEUj1iG4KiiT9pJXxAZrKJi36FcrZqeXPTc0xpJ3y0YZ58iF5KeIhxUXfZeJWTK2UJdpFgE3bbaiFs9WSjcbR1AG0QYP12aGUuZ5RdX2pLXSRqpF+QffVpQWYNfehocnSxZ8RqyW5NbjNozm8yaRRyUWDmgsdxVmccUvx2em5xZVJgs2b4bVtpR2j0a8pkfGYtaFtpk3aWaK503mFZcbNwvHaadWR4RW2ZdiB6E3jbamVpuHX5bL1pFFdEaZ50mnVhaadylnJoaPFmyF/fcVBr7Gq7Yg1m33CTbZxomF65bXpmp3J2Y1BwVWcTa5FiF2M3ZQp1BHoIcPdtUWQtY+FxGXJ9cK9uwHDQXrmLpW7rcJVjJ3IXb2Zxj3LdcRhx4GEWZ2Vh+HYpZS5sF15Qfx9WCV/MbvlroV5aeap5uWsyhbdzIGm0gU5lPXLwdOt3MHjocBVlOnfrW9NwgWEabU+Gd2A2WMOFMYhNXuSGzGBsgOlay2BDWxV5WmZUU2h+3FsEdTOJj4w/iexgOXAVgulYwFO/cUN1pXGIcrV0I3+/dRh5x3m/XrNYQnLKdAdyJYQPTxdoOVYZkD9l92UPWhVUcVmBWv6EmoDjXt59sFtBcox8vGvHdzFr8HP0b3dsFXJfYGN8E4GlgK5x1ofUe+mC33cgWb9XqWS9ZX9mp32OaKhqI0kodt1y0F2PZopln4WZTPtpnmsPh9CCTGrMYv9qzXd0ZFNokWHJch5wonlsgX1w5myiacKBBG2vYF56l2DtZE95BVyKaQNmzGkedL1esl4QZktuSWU5XuNqanAfdSd833fhbXlaDIJbcEZ2eXTmgWuBeHp5Zetiy3JvY2NuDlJfXwBlIGAUZhFyO2GrbY1drGQDW312rGQwaKFoMXklf5JmmnDHZyKBx3UQcQRjPYLHgrFsNoFVas1dinplej1mt3ANXJNuhHewcoKCSYDFXXxfcHwNaZFwjoONaGBbOl6EdOJvBXPXgJlmX2mearddSIUXe1l4J3IVd6tqY2t6YQtwCm6ebXiDIISyc25w6nq4YtODplV8YGd+Q3IRcKBZpmWDgTZg9249WOuGckczRrCBvW97VCmR/nXaVd592oqGUKN7/neZk4NySHeLdahYo3CfbMA8m3OfXOdXRpDRP51HNpZOjLxTGoVuU8d1ykZTX6xZZXqbaTtDV4XlNhhvXpJtgVSZaEvudN58U28iXSNmFYIPZJyC2XV6fTxvNlOEfAVF6kJ7XgNv7mjJe6pW4labeJZwqWwpZ0FQakrlda1opoLmh3FVj1w9WZ5etIP1da9drnJ7gS1Z1H0setF1EXq4kqqLYlJ1ezCIi3ehcKlAF2GKQVFipktfg41eW0p0U8Jv9G0YRglVgm8Di+dm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QmMpY2BRfpFAZRVPcEUOddBEql+2hIduBnTbceFs9FkneSdYnYH3VVBObngTZcWRtmwgThJhh1wyeUFT7Wj4XStCh2asVSFJvlKpeZ5G51SSRNtgq3a0n66P2WTwjQk+sGfFeHimjkmOP8txInaeYVdY6EcrVaeCtUmCVkN804Did29It2ujl3pr9kKzRmh2o0ZFUBVxz2aAS513WGqGZ1NsS3kCVVhlO29Ccstp8nXgd8Rro26zYoNVWHX2TD5ngWkKTFhTAIGGa2toG3tmV/l/sVOSY+lEJmfXXgVsH3mZWzdzWHBta8tvf2PfcC59j1w6Uo1xa3r/b19pWmYwgO5tHFfrZT9YY2C1WwtrsHKxZr1ZTVg6ZARs8G/pakdUGk3IatlrlGfFeIxc9GRMXoJR02StbMVt916efvZh3GT6bEVuYHKEf810OFG+eWl0/ng7ZKZW4XnzV39o9FMZhOprl1NybBpj3HeZamxd7V88a4lZe3YNWHNwsGqEXp9bXneyfgt2y2p4bJhwH4DDZc1UO01Xc3xhV10eiNFyzGqDdjSF/1vBauprwIxqcChzzoLWZNJ0m3L3V+Npv3a7el2J2lISSfqOdXrEXdGMTlaDgJRaQVwjbPR0kmS1SWmDW1l9h/CQf41ojAlXqmk9d7JsMnOEaF1/em7qdJ+Eno9JX2xvZX/nRztfc3/cealnoHvObs9RZ1hpa7NjzmHCcfhizGd3YbR4DHedYi1pilvqWQiFU3APfVhfN4MQVDRth4fccweIPX+Ddf9nTo0LlfR9GYwZVaRP6lk7XQZib4rpchRVmk4jgi2DTFXPW+d5YoaeZmt3BkrYhkCN315RSRRv8XdSZW9Y+mZnevxwdlTrZ6Jdg15IY0tnCWL3VLhhlmMqXu1fWGQXYP5YIXfmZPFl33b7ZZRxQGoDdzF/rG6PXGthR210VY5ipW/jUmZfwVYFZD9poWh0YhdsoHN2U25iv1bHTFxiwmo3ZzFytluian9gEGctT/5fgma9cVhkCGqaccFcwnB7YYVhrWZmYHxgsW6bcS5jz21AeOpfKWLddsBzIWNKYLZcWV/Qdq5jeXINZ1hon18PZ0JXLnP9bhZkN1xYaBdQq2WpZfZbc2b9WcdQrHIbW+ZoblrscJts1V2ddwJ4lGvQbzVpOGD9bOBeylITcOpf+Fq6T6R3pW2FYTpZAnS+YeFeaWvNZG5b5FgmczFzHl2hVfVdDm/mX596lGEtZe11yl8qaJ9uJmgZbydUnlxnWtRbMmMRWtZoEXTbUbRi/2kOaolaqXhMUKlrr0Y1coZpJWRnZu5poGYWYJZaOnmCfNVyzGNmYYNY0WxiWc1q7mlicXpermdbccBgmW0Wc6Fh+FX6eSxoQ19LfZ9VEnWYaneL426+YWhOhGYTWAd7dWh+cf9onmoLcftqZHTYZcqDiV16cl9vnWE9a9ltqXR8YMNw13a+bNpjLHr+YuJbsHd/ZiBnW2vKae9kW1gmdKphEmbmZ26BW2/JbP9wH25Sb3Rw3XagWhpuFWOGZs1mGmcbYjtj/mGcZLlAYEVVfQZ0bUWUfdZ5H2G9idWHm0XXc05quYPdXANjIm2zVp9pf2PPRSBuyWA2YQSOM0arWxSKKJbCa3mU11IqfolBtFwaRDR7Rln/PrWPdkIekHF7gXqdgDRE0WvjdZFgsF0+bAyDGWoQe4uGyHXobcA/7HjlORhOvGSIdCZ+n3UvWnZa0VvJchFtk2dOW01bq3EOcJGIFID4UUFxt2mLVliBcXAhX6N1jYakXPl73oY0XBh/loWbdj0mZ34FeBJ9On2MVvBJy1CAbTNQUHp3dg5XmEdMc+9sI13yTH1iWI6SbSJ/9EmthN6GCFaaTGRkDYpEa8xbOm+rfTOC6T8HbAVzx1ogYk10hDtdT0l35FtyP71ggUMtXzpMq2ifZYQ+FGyhZ2NYZWXbdaKXNHkJS61503oDS6RJY3aSUS1l0FqRaFJ1jGqXSo1Z1YEhR5VlGmSjSNhKqk7XbFxoBzkIcDqKoWfrVxBlGFMLVwJLy1ttYlRAU3VsdcJaA1IyY3lL3HcpaWpjYnijesNnCm13cQdZuGVESnFbcmySbENtp2T6Wc5tTIRtbgBViHwHVKdDGFooT3lCeU7/aLpOKkY2P1VACnuqhph6+Vj1ZDVLYWROblmIeU7rVJJpOGrqc+hFKkbGT2BxkE43S8ZqaHuraWBJOl9rcOlvAFGcUcNlTnmObqM4TG8DZ+k/50QKmhhPvDjXg51A+Gu3KCNmfmLwNMuNDmPGRLWRhl+YtX+a6ihyhUCJhlU0OPtt2UNAhH803HuMf7xVDS8CYfODuz8Iih1p+EXTOxs40HTFaDhM82RadWhwDzFJX9Q4vDW+RI9nUmK6J+WJiGpbWdhD9WkeL2WDYILBW94cOHIkbHiHUJKfXVVm6Co5Obx3JF7mlgZtiiz9bCBfP3KHL3iKwFH1LP5drETNRzAwD3ssOUoytkO8NkiA/auAd8htkozzMbhyrn9bkGQ/x0zAaM+CWHM0MV1hgEuzhh9HEDv7fOWI214tM4hte5RJcFE6tTDmd+9ap2IccSZk5mPwaYR12GieeDxpmnW5eA5lNHJ1Xgh0c4L8ZBlzZW3wZ0dws0sGNpZvLlvyZxFzeX0QV1BpnmU/YiBypGlHP+14zm5Bam9+22eiPeZrFHZ4bNBqnXSmWsxfiVQIaVt5MGvBe811YHqLZcliBXpSXZVlk3ngeHt1TnBgY4ZmkGZnWDFkKHaQaOtltWmTeT12OHduVzZiImIMZH5172KXdsxp8mscXCdpmmFKbFNup3+Kde1v5mXnZ0ly22svXIB6fXR7a7tlz3TbcfZmXXE+c655zVmpa8NqvoIdbiBuj2ZmbR150VzdZUFgMmzacKBun27MfLtUQ3HBkK5vXH25YGJ+HX04aIyAqHg/f3xrHGbCZ1J5Y2UUbFl033KMY1SJrXMod2CSYqCNgTBvv2YLaEJvFHvldxRmI3kGgJVwi58Ph6R8BITAd82Fmzwkg6Bh+XiLb8RhT2QybtOV8HXKZLxliXC8dx9trWc1i8d5G4AThn6A4XV1dJ9yw4c0dy1l43GAfPBppoqKgc1+T1codDdp9nVHZ2hwRnocbBRyh06eYdJsJIZmZrB3vWIEhq2AsnunibRuVGtVd8dxVnCSLC1yMXSWa0mLtW7/bct6uGmscRd2FphRZjqBuXA2ZmNknm4Wd1hrNnSTaQx+vWq0bpBxmnEgaF+IplDhcAZ33GcbX099Cn7Vc0N6Dmj0Z115hXZ+bddcpGHvc3diMmc9dshcUnRVXrdacnvJcTFtJHISZ4Fr+XI/Y5hpP1T9eJte+mEbaTVw3nH0cmR473AvZllzk1uXYddjKGHwZcJevXkFaSZ8MmZxd/lmEXg8cbdrBlX3ei5oQGF9eUJRFWsLdYt55mRfajNeQWmiZEdnFXIsci9z/GhsbB1hbHdLYphlnGkue7Rszni/dXh1RXsndLx7XGYAejVsrH/haMt4MXond9Jet2mxafFi/FtNZS9udXQ5YW5zIF6GfRNtJHrGb6p+em3WZw52e29Oey5hL3kDcGGAxGfGdUVq5HUcUPhqH2dTUApI/IWAT7NYtmeZX/ltbkJeYjddF0qvbuty62MBaxNaG4Z3dDdknnxXbB9XVGM8fnhVCHe3R9V0uG5xaCVm6nOwZ1Roj3oKUZhQa1WeT8FpVHLPRtZv1mbMae1OWGqmVMlkFlZHZjdbX2EKb/Rz6GJtSuxpplQTdVdyfmflQ6Rr+Xc8d/t1dXieUsBQVlnHgYNpMG9hZc9Oj29FW/dzIEaFd5ZVGU0JZI1gcV8rWX1wSlq4UT9h1UetahqRzG6ZXDVoVkwKcz98rXnUPCpgy2baVmRuIGJlSiFLe2/lQ6tTpHb6anZjOGLlZ/xmkGzeYWFQ9FhKZP5dPn79X55d5mfQabxmTHn3fvRm3nkZd3hvHWCvdaFvPXf+cdp0oWz0cSVdjnraevFgBWvAfgd+H2Meazdah3njfx1412IWeRZn5W+/eRBwxl6Mgx9wGINNZ3JlNHpRbP5obl0BbMt3A4B6ewR7qW3hWZxrMmpWd8pvoXSKeqiEwV1obcJf4YCOW0tkvF7nd8ZfgHAXc898TWOYb/dxL3mNbqBnpWHWa+x69mWDgT5lmGXxewVuu3iqa1trMXF7bCZxfmyrZ9hubmddZ5BwZWBndvFyIWxgeAhlq2EOX4RxylxUcxZv6HGihKRuwmEKb5FywnKCY+5dgnJteIJpf02OOQmEcmrsSih4sXG8UEl0NnQuWO93U2JtgBNm8WxCfTpN220/YxU4t2ojTbxYl5LZSoBKc4IGkb1kCH/cUhyGq19lThJ2VYF5dBA18YF6QPiTOIR1iuCDxk41dBRnsHBcWPxrA3ZOaSOG43eLgo14XVB0iO5In0zxXQh9CWGicylTwEy/d2N/XWY8aOpj4ku5W66Qpo3yd9xk42BtPx9Ny4Tnef2FGnIldUdbeG9qgz53tYKHhQiD3UYzdox4Enb/bsY4S07oRnFm8TzUiOFuwl2MJcl6nn7yZF5asnX3lK59gGgsUJxzB4VzVHFHoWM+lIFj0zTmXiqbZH4lXzWARnlretxxm2ySaC97p3s5cWB81HctfOdfvYXKYaRdLnNTbCtkWpQTeip0J2FdZih5WnvKgI9w/nMucbZuD3Iqb/t/yoJMdBd2oniyd+RxY2k0OlJnYl/EcodutmlsdehzAnBQaIFvMGjpY/hoE2qddtyPj3I1fQh+no63cxhmB3BvaeB2qHzxaApig3IkZB5vEl9JX0d89XJcfOFh6W58djB9z3KoW5thLXaieDl59XozaBB8pWxWfpOBqHXXaqJy6HXYafdsY3cOXLx7hXhnaN972HZcfnl1R4Awns5gwGt7jHh29nOnealwfXmcc4ZkeXFAayJ2cHBGaNd4lYelcvRg930OYOduAYWXgXdhHnXUdDN8BXdwc26M6nNLXruKLWk1aqiDtV1xZk9q2GPpfqpdZXuEb9Z2anQpfhN1iXjEcNaE/2ZDcgluS1+fg+Be3mhxfctu+YF3ZMhdlnkvX5xzynHKeEhyhXs1cXaBKWnfcbyCsWFMbM95EIAObjOCpG94bChZ3X3+cB51N2GgbpBngmvlcht+xX1+a3xtRmVuhGFeuG73ds53KnpJhEGESmz9dl+Ko4b0d2N84n10hXqInXUlWn1t4WPYb/JtIXNOccBsv4L5hgBw+H4oafRwVWJueQ1kxIM0hBt5ZmT0X7V3NnSicJpk+X36eMp4KXGgXkZ48F0EbYpuTnZsaVp2zG+UePOG5WAJb5ZsNWhhdIlgO3n3gk5onV3IaG5h42w3Zot2HXXVZ3tkNH+1byGDm2NMccFEy3KvTFBp8oBMegJl5XdubaJz12esb9RuN2kUV7FxaHNibxx7aGsReqFoknfuaZZwVG+1dZhpk3aWceF9l3PrcCVEv2Isbnl5nmOAb+BD/XmhecRzTGG2XshwQXubXl1WEXRwgVplZ2r1YypcV4Gwavp6g3pDb1h0nIT6fvZf7H+JeHtnF24Vgc1sCWfndMZrJ342doGSSGCpe7h3QXrKb8d8Amq3X8RtMGF+grljm2H8YfNqcWQLgH+aSpUKSy9mMYf0TVRBqIwzTkVIXYZfS+JmzDnaeBVs7Tpui2hhJlXgmFRunJm0irFCnImJmLlgN1u3l21Ft5/XST6Pz4mzZnpBV3rnlaRGE45nWO5Px1OGUq6grWf3Yb90mmDKYoJC22amWJ9NiEmfZRh0oU+xlCCRol/aPIWAs0WGlHeYyVV2H9lpvmAOqFqb8WEhYC8+B0ovlBN4b5dAl2RKlmWiYh5ncEq2ooFWwVFQcx5UQExdRl2ZfT91VP1ZI1TvhBOkL4JEaymXnUf9Y7SMIJEDRc1MaJfufl93MFYbbGxMnoIsVf5d15wyhMtwwUtjZ/+VtGMuR4cyCHeYaNB7n1Znd1N8mVayUdRtQUxNOEx2dU/6bIo3hGA/b6ZJ81/kdkpg5WhPbWZ7KXuqXG51gXOOTONM0WyITqluIGFtc6F54mSNWZJ36XPRXSR80VQjTBFOl1CUdHRlrU5TbCBofWILWpBy0WA5VrVVplyBgipFkmQedrtitGJdZrZdgWVheG1WiXaYacZcW3fbfZljrF9MUz1VBXRhW3VlG338Vn1jQ37cZqxc7XEWZqxUiGzlYMNUSFRjf1RdpFFGTphVrnl0plF8O2htdQpPAW/oalGQ3lk4YzRwanIBb2pV5l9+U8hkYk5BSB2BBndSYbVc9VzIfI9zCk0JW55tsHIjcpppOWKMaIV5WWvwYAJ1YHpBX9By/3VgfNNjBWtFc2B812D5cgNkf10XcNtYaWmWcgpshHo+abJu9XNrdp97XXUzjOVgOoB9YBdwwH9NcA1Sn3ykgZqCy2IUa/Bzl2PhZ75waXDiZVJ8I3/MfiJmeXhOaAdvHWPOedhnvmsAf1BjFmpHZ5Rbc21PbDFcCWvEYYJZLYKybPhyu2wsZw5nd3xQZhVd12p1d5hiPXYMaaBna4aQfe1+pXEpa15rCnUHboNgM3JAXEdkw2F/cXNk5V4KbRt9rYM0YuF8nXNueBVhO2xIcOZ5RXCQcUFuU3HqcD1tGHNec811Mm5len9rpmPred9mMl5pfnB/XW1YfzxtWl1jbMZ2p36mYjpmLnjXZEV1qnbBY4Jd2Wp6YC14fF0zbHyA4XEFYTiEyVZac9lal3PiavB97GohYkeBpV72bjqCl4ENemtop2wHbR1vpXEVdXWB9mQ0gcFn0oBwbNpumXPbb6hfD4DBeOdlSIiyawxvHmUHaGVrimTTZe5j7mvyVJ2A5G+aV8piomF3YGCFyGdjXcRrKYNDa1lqWXJlckyALnR9a4tn/3cvgaKJwHmPYPl51m+JYjpuHnQJXU5VYWzxaTRzOGspcRZbpnTuaLR3V2Lrf6lvAVMfYtF2P3T9Yq1dXmc9d+F1xn4cVTVlWG3SXdRsS4k3bWRpXXCOhTRzFm9dawuO2Wq2YvZ3m2bicVdn5VL3dBlnllffgbFkX2nlh9aCxF4FijRf2H0/ZKNnM2S6eCNeElWGjTFRL5mkexOJZ42eY0VdynDoWfFyK2Y2gzl0HW/3dBSBYmBeWVeBuGK+WSB2RIU+YBVvZGp2VrJZxGspW6B0YVlUZ3FsrmaoeCR0IlRlZR9Y/GEqgmJq6GhndcGFZFU0dL51S2UIc8d8mHLRWvmHaXyikCt2GVbsYtdPX20la5p9bGhMWpdXG32IhtVbxGEXbF9/tmxRacxdH4cDePtnsF6LZH+Mj21nWGNidIr3d4FyzGXbb3Fo1XBbYoZ3sXmiaRN+U4ePd7dsm12CgZ10fHVWdYpU5GVJYoxn6G0uW4FSXnstWfRam4jOdmploXaydxWFiHCXTed4RGklXfpbQYhFUzFgB3CKiKNpE2WeZcBuK24AfrdfvXJ/cYp9c28Xf1h1I2XPgKBizFMPa016SXuvaXJbimobcDpkImGDcaBVZlSlbRljaHJucwJm3mHlVtNcFYQgae9bkWIJe4pd4mx+gDxvDXWvg+ODEErfa9WDEYHecH9y2Vb6YC1ww1+3fOxfwWkAU1poHmP3cQdepmWOfR5pzmJmZiR08G1EY0BYjnB1azdx6WpAdaJ9inOHXchTpGKejiRqTWpzjOWUcFK+mPCaSVPqmQNxtYpwd6hpEp8cWihwpaCPXaZ13EB3XtB7a1zUW72GbnxiTmeVtFAHiGFan6G0RiKDmGgIXdt+zEvAXtyKS5ajfRtfCXX3gUpjdWGJX5SXvmEPj0+WipG7eSuOgYq2Tb1jH6yliHly+ZOlXz5YJnKOOQ5ytmLMUsFNqXfmeHOW3n0DWE9vEV0ia7OT3XP3b+t1X44yUW6TEn5ncmKkJJTdin2NCp4tfPeMJo27XiVha2y/YA9bZps6Zr9eg03nmGGS4V40mNJr443MZ7OUE1iLjVuOJGS2Yql2iYaNYAlfMl52lOiGSqNwfd9j13XGdWdmYIazeeJ2IoGrhtdrcoDBZg184HTJZJaUDGdScHqHImgxYdqC4n1JdiJkmnIacOVrB3cZkMR16nyacBaDQ2jRhJNdNF1nbuhrV1wTf/iA73VTd+lkO3xjbDFzOm7Egaxkc4Kcifx7smFKjQp9CXfCdzWUVIEYXoOAF2vNX2JoC2eAeLhyinBDf41gizNQdomCG3N4Xvxm84CSeuZiajjWZYiAX3dLieKFoGK9f7N+EosJj+J7lpCrh/eGnnRTZJBoX3M8dYp8z3eGbdVitoQ4jL9uDpAcaXCIQmJsgrluTYq/iZRy34CSaCV/ul4oZgtx8YEwctmFdnVud8lmnWCqckNoX35EbbN+D4H0c/5+kHD0dOFhFGjEgf5flGwBi+VrtF2mbv94YINcdIh+bX8Sf6h0IoApYndx+nT1frdk9WcTYuFnyHXDbAJKhnJUamh0NHzDYsx7fFwZgBNxbXLMcWJ48HXofWFoWXLlb9FmrGunhJp5Q13Ddp1/pXYzXmZ4yWQIXFx5+4GAYvJks4KLeyV1Lmd1cUVnfH23Z+pMTl6YgCtpWH5Tf4dnb2sJcO9/ZYJia65uanvzfYxnaXS7e2d1OGXhdRd2KnaOYlJz1moRf2KRL3O5dCCKkmU2ZcNkQX/raqJspnDbdgdjF33DaJZpeHEge/x3c2iHZV5x9naDWSZtenDladhw82uVcK9ww2uPZfRosHOzYUBsb3CXZ3Zxfm5aWBJiHHlAazBg+mK2cQNpnWl1Zwl/H2xXXHJismcdbVNcPnF5ZAtWdl5+cx1p+He+XAR0I1lNdt9iFng5Wklql22udVBt+GfwZbpqMW1acJpfHXMdcdJ56m0tXFd36nDQXzxnt2GMWMNr2mNFYKBpKGFpbnd3kGsMVnBe3nMZeyd19VlEby9xZHaGZ6B1Sm6DWvZz71yHe+yLs2anat5uRWXwaEVlC3HuY0R093eHdd5kHVzHcmJ4mWZraiprcnxdYSBwVF6ieNh1b3A+XARmsnC3a/x79WArbAh3eUrpaJJzgVXRT/x4IlywXZJXHHYpcUxHDmGqcSZcv2RlZb5YIXMPXR9zMnrdWqhg1XnHY5NpMlfpbRBpm2jrUrRgzXFFVsxviHx7Y+Fpz2NjbPV1ZGw5YUl+mGNSZO9mumZJWO9d7l8wevRdPHwxbX5jOl80aehnh3MyeWBouWQqdLdm+nQHZo9t55QwaJdW1XECeIlv4HC/Vqtm6o/SdCBgz2HjYbZpz2h1Z5tXeFuwbT1Vg1tBWXRPI2s7gFRo9mtSZsJoiV92csyGUFxWV6t3sHeubApd5pmNb716ZVb1ZWJ6PmsIc0FXu2TQZTdnIlotZtNfKmxaT6trsGC3YehqZWlDYXlve3iDX7R9oWFRdXVikWVaevlVg2SoYwZpPGBWVOCCwX8DV4NZ6YEhfqNY6HlYScN2hl5ddTw/k3cfWLxo7H7VYBpW8nHZfjtc91t0ciJnG3RUVptmkG2iXaBg33qjdrVwx3Bhd6NqxWAudulr/XrLgGBw6lZLb+JsoWJPbDNorVzibcl93oC2ZYJpCW0UXGZdQWeTcTBz0F45e+JUP3dqZ31l/WzQa51m9GbtaC13P3FYaeVcFmdva3h3wFLjZjdqOVvTYXlzf2lvYwqHkGoscZpmV11VSYBqQ3buYShoUHEhghlsDGr6bdxz22ndW9RjQH+KYAtdRXmNSe5Us38WTaNGi3XXYWJ5Qk9Vb0R1glS1buhoXFXSZ+1uvWj8fZRmQmwKdaNWzVEudXtZM3FRUPtefluvbgRgmGR5Z91YdW2UYhNRjlzFZP5yD3jOUFJzemrVbGhcu3hZZH5Ypmzaa0ddVVoDaMd5k2PxZy9v2F2SX+57PWPKT/hyjGcEbedpq1zmbg1SlVBRbSdzmHwfc3xdGHM2Wyxi7lxoYO5tHUnQdGdYc1e4Y0Btzmb8V8pimEnZbvR7dHr+ZzZ+l2RRYeVtoHhZU9NZJ2nlUvVfl2lrXRBbu2pQZYxW/mBGdyt2f1d7d/N2tWN5ZJNOV1v6ayF5RmeucuxlkGCSYzN3G3KYduZY0YAcZuB9enAYbQpnzXBaXr1w7mazXbhgCWQ0ecJxW3oyc2V/xVxpbvRdInoAUYF+kV15capdj2wRfJJ2WUlQen51xHLPbXdzWn8zYdRoA3bqcrFoGHXIZwt8jHS7bEpr5WWMW8l9bXv/dWh5s23qZwR77lEVZDBismWwViJfiW5hf5ptVm3WYDxi42fAe7Nkj069a9J78FjEfKlYdGKEfY6A5WTUZ51rWHJQbIRx72H0e6NkuHQHdYdmZmt2U8VzdW5seb1mJGsSVPR1TGE3aZpcZGsIf3NgEX01XvNxfGPFdmVe+H3aYmNo2WOoVrqIRnm2V0mIH4I7TTqG2ovNUvd8t2Gljy93KWiKhlBUAnhghwlXAXFfaqmHQZooZFpWjIe/hO9P735PWfKZWWsaSyRzZpPEX6ZTx5LeWDpfgKOAj66IKGP0aJeOumMpeV92PJ6lcQSk/49rip5plGOBl+VUhWh7jr6JT3OJmaF4ll6TXYhi/GDQaf5tXm44aPldCYR+l/xcjHS5TcNpl5LlZTZjtHAgmNJPyY/kkbJ234/7oCSTqWNykqmS+pkTkxJLBzH1X91tJUaxhxhmFWn6WZiCKo92VvtcTl9phVh64o50WaCRjoyDYJpYPnEYh9hsiUkpcSmH638Kdy96kFcCgPBiUF0sc1l6eGJJbTCF9mKdf+B1mILdXpp2bXjjXg1yz3spaRpoiFmEfaN1ymBnYHKCBnC7ZwJyKm7afkdueo+nTt1utmteY61oXm8sQZ94w3tRZ6VmhWjrbw5yUGiEZAx7km4ncq92ZWzeesF5u3XXbS1lDI2WcvV08nm8cY9nmF41X4BjinasZm51pW29ZTdwGHCqcBRj7G4HYrF2FmCoYFlwboB+dU6ECXHJXb+Gm3ZEbBx/C4Eoc9uASn6MbMlcDm/HXnpjeIg6ZmtjX2bicJ9/63J6j5FnKHEfTs13WllSfrV9G2YLdydx+nMeYlNqxV93aG6B13rYYuFxcGWgX6J7oG54dgh7nWAjWYR1/mSSeJ9rG3hYchNudGVibMNa23Rwav5lX1sWZP9x2nSnec9pg3dlXntxa18zccp2OmW/bQ1sbHFmbTpw8makb15ukXJQdO9dD132cfxpRHepcFRnfGMqbS93GG7xZVlu/G31dvJzIHNLalVnqWNRccxgEl4tc+lsZ3NqdZxbv1r8c29x72/oXc1wQWqnZ1J0C1uPaIRg3HUKXa1bKm/+X+ZcoVthZCBeCluhXBpY6W06dZR1/2ggZyBs+FzzeOdie2SBbkhpTl82dBZiYEEzdF91G17PaS1q5mtRaLxcgHC+dmdzBWbDYBxX/IYoY7lya2ujflRmeGgodQRnhXwLZO9hpWYZdwZzRGV9ZuNi/3NbcQZhDWxlddSJr3SbZ3xzT3k1abR8MXQUcOliRn+jV8R913DLV4ppo3l1fX+TSH+ldb9phG92du5aTnD2iLpcJ2qJdhp03nQyglts62BQZy97HXr4c/1nY38hbweB1m2PanWLl2JSX8p1vXeBZ3Vg8W0RZiVsy2PrWfly/mykYwdlz3PlcMN5qFxWfFhfA25ZbNNjFWk1fTx8N3XOX75iRzoKcEFog2HgbgVnPWuwbPR2NnL3bFdm0XT7ePRNf1FfbpZ1d3MafLZzBGIYbQB3cHtSXz98kmrNYlJgDV3fbrxrL4B7ejdv8WfOeFKAb2a+dIBxKGoCYkJrMWsQWfp2RmmJY1FgwkQ+W1JslVSMW153FIdqZdt2ZVHNamd7x1NEU+B8eHmsWUV6KlI+ceOGH4pGgrRbfnljYXR0U220axyJqnF8e9lmVnhzbFFcd2yZY/JphWrbZ516eHY8aXRjnXY3NuRshnF6VSRPlWPuZFpt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c1N4dxB3nUJadIWB6GOTdI5wR2q0c0V+sYNEYCpwUm2HbyRnrFWjUoBOBGuxZrV42HRzXhhfiWzLczlvwm1TZFyLbWkrceBDDHeEgiFWPV1odOV29nSaa4Nix4ADeppTaV8nU9qIfnDrT6Z8GI5mSG59v5GIYt2R/GdvjrRma2iWhcw+vWL5h81ZNnI2EwBNAIQ4aPRdVIKchpVdO4bOR9p4pHHPbYhdkYm8VsdWyXsMYgos3m5xh1hpkkzmZdFpeHAsZuxrn4vEXk17U5LRkDBlZ4jZkeRX4FrLhG14vHPpjv9RU2UDYqZek2+rXSBIG0n2XVd47INlbQpdHmbvUKRhYIBcbY1+C19Qi+RObH9cZvhvsow2igeCbWMUbx5yhoBBdeheiEdFYYJdCVN3fQFr913qQ5GE+HTuVx95KXXegd5sAHv6YQl5DobzV29bB3V0gMhyNlnCa3iCHmJpZgRsg2zZaA1oxmErae954WOuazJ0NFxgbXBzf2XKci5jg2+LX9tnVWqqZh1xpGjZeuZ6+GYCa75vL2cabgZ8plyCaelcQm90ZfVlIFYDXBBsnnKWX3BwC3r1a3pbiGyQaJt0jX3hXAdmcl9DfPp3CnpkZnJ/nXlvceN4zYEmfihuXXfCbclza2hFbtNh5Wi9YilwMnUQYrlwXmZQcxR4Bmk3X8Z+HGQUTT9nVHoObghlKYDpZBJm6HGtfQKGYH33fZJ5GXS+b0BqTGYIdGhbnGlLdSRjBV6Sf3Vnv3H2gplo1XBRec9xVFc0c/R6H16JZY1hvGsEZoRx+WvFdgh4pm24fnZmPGX+aglzDXo0eG5t82uKdv5yYmVddhByrW5qcTd7Mm2Sd3OC9mvzZCt44VxdZfRvMXJ/Zw1wPXSDYXVxn3Vygp57n2Y/eMVgy3kbdOhmJne9b6hlxHdPZZh3/X3HcJd4fWUnaQxmhnqTdBN5l2fLbEp5EHjVhXF85ngjawVnWWtGgOpYaGJWXotkK2eraihZEk4icN9p54DHa45nVoLvfQBc1VjrX8FmU38jetleFmv7Yxp4sGLMh3xzw2dZbhV1XmztiYJyXHIifmF/aW7Rdg96l3CidRl1CHwkZAdm7odicvFyvWwRckt51G0pYXdxiWo+bcptc2uGcSp2n2CgcEBxLG8uaQNp3HZoZX9uQ2hBenlinG6eYPBetGaDevZdkmUOkEVzuW8WaPdP72Fned1twWLOaVhu220KbkNt6YZbcVRnmnPyaDOAu2QIe/pGQ2rLaKFmpGaSXxVxvma5bP9luGmuXV1lYXrnb6F3L4NCcHl9u299hnNsL2bGdh1xUHetdrg0vmCscvNnnm9UY+NPUnS0YS93Dmu1XPJmSnuDY+lJmXPWamxxyme4eZR0oXEOb7psLYSbcMd3/GNXZ7h82oxRdlVnznEpZi10C3ASbcNsZ3uBeKZ43GVJZE2AEW2OcGN4wGnZf6ptfF0fbj1jZnf3X/xXKGBgmbFohmrVZSZvdmoNaFVh7W/FXBldn3EWaDxg5mBXYAlmwmJHcW9hT3UBeuRbtInaY3VsfHYrYQ5fK1weeXdgXG0cZ2BiLHtgbJdgCmcSblZql3iqdaReJmRJXvp072vManZrx37JYlFqwV2kcfhpnG+8ZKtwpHSUbCJ9h3ZBcadz/XMbc9ttS2wqcV9qHmzobl54cWLocPZvBWkZfAN1Xnffbc10f2nfY8tkGlm7aVhmtFa3Y3pqu2g2YeFlmFsvUfVxm1YTeAx2fXAfallvKnKYXr5zfXu1a0ZdvG1OezpcL10PfGBawmh2Vv5cD2wZdwd1om+WY0JhP2qXWpdqunmfYO1baGv5aUlf7VnTdNNcpWIFZbtmJG1BY85++2w2dotpbWJmagtmCGQrZLxjcUzocYxs0WBEd+BvZGxXbLVq4ndOZ9ZllF7ma19sYWOYfD1v3WShZF1x1m2sabptmU1eaApps24fdMZfsFyJd1JlXl2kYDlmGXX8XVZnYHSfabRq1GnAYoxtW3jma+Vum3GdakxceX/jZ0Nm+mcwYHxwvF8BdfZrUoZ1YopdamePaQda/2gbYMpwKmE1VdxvU1hbdQxji3EXfIZoD1tmcLlnm2GwcvxiNGc9allmt1fJYcZoXmgSZ8xo1Fytdu1qK3a/Zb97YHVVZGtl9HzMWMtWRT6iXs1+MWkMZHV23YLkTrCTIaFTVYCFDGv/mddz7mh/h/ZJcXhYhi1KNWDAJhc/mIqgRMRYFXpTitBcAY3ZSOCJRELbcgdTJXYEdfhMX4FeZCh3uIa7k1J7aki1Y512tncUVJprb4spZZyG1orLiOlqvXHbmORPgUSEg3yAqn26i6g530cNWy4wQGIiZCFB5idKX52A84qijlJRsGMFXsRNAos7bsGAGG51gpRZr3ZSiWRg5Xu2ih+Qo110lLeAg4I6e/Vc8EJeZJNtRU+6k5Fhu0dBRkmJ3ItOSY91eWEzh0pw2oURVOx1WYU3WK5kI3Hll3VhU1mCdAuWFoExcrRgkXQkd7RmLWNiYyRqEnPlfUx1emnhdnV3GH8XcZJ0NWm/ZJNg+on9bixl/1kNVfZ1QV10bk19sXhNaz2BjGHJe8dibJTRRtV3y1+tWc9kwHhWTnx7vX8adsJo5WkGZwxufV/Hds5t13U+d4WAMXz4dOaKknHodiRYa3wMgLZ3oGvxXAtfg2yfYBVeCl1sXapozGxnhKZzf3MAZ+Brkle+Z/FquGv1ZmFnVHXHb5V9dGu0aiN3aW5pemqJJWmzcaxxpXYNcOh0gG4CafJliXmJXsNgrG2FeZVpal5IlkFfcGoWX/d7SlLfdlp3mGIcg7hpEndZaYJm+2jPfHli1n2Tbm5SYIW6Y/RPH3qkfa5g3obGejdj4YaGckiOGWpqcl99t1f0Xwl2a2VgcuhdYY0ShzJtjGU+iPRtRW7nfjdm5oHST9Rwlktshn1vcVEXeoxam3dXcT6FAIWuYdJlZ4HYZiRS6mv2iWVpQX60eG2ML13Ads58TVZabBBvvH+RbKWCJ297aVtr/nM0bgtjm3VVazN1rXW0eGiDRVZEcjtf93AHdkBhFEVJZPJ2Em4kcfd7yWcChAaGL4YYeNWKhpPChKSPSFDzR8hOmWpVVH19SV1rX51Y13cUf6BcL2i2cFuH5WFjeeBehXochztYEVqScxB/8WHDa3djTYEIjlRtLoRQfLFr/2tJad5tNGwdcINiyGIpXvR15GLXYoxyI2AGeB52PWGSaRh9517beuN62mQeXcNthGc2dq9sU21gZBpqaGfabKxjkWAbbL1uy137a2pqGGjZabVrenAFdtll91vciQRtWnWpYet3EHmke9xvcoMabCBqMXrrcwNviWXhYzaGzXjsZj+CeGZCXO+Bi3dxXp1R7GIiYuFp8WfxWvdlR339eCtbu2MBaJBzI1tIYWd31nD5Ypd1rYMwaSJx/nSnYDxswGhCdoJsV3pKd7R1O30id0llLmCRd690R2v8dQRdZW58b4dnmWM9ZsKBP2BhazNlmHv8bidwzmpae4ZfXmAcdhN5PVMvccyMQl9LjDCEiGdleelkxYwZeKJiN3ReUUN1vnp3U+pqVWklafeFyWsQWOiPcojCYp2AcWjcfRBQaoQ6Q6x0vGk9Tet7NGGUTWl4aXcHdzdgVWzedgNi4Vqpdn+Li3ChgySP+n+bbFGCan1bT1hbSnIDcvNkBIYBaOhWQGPyRl1vJlzua/9lSXLkV3x2WH/IVWNjO2vPV7p3ymHGQAdlF4Xza9uJeIW6bGSKo4UGdf5XVogbiHiAwX7jTepSRFu0X51lj4P1eENX7WTxc8+AK3AHg8Fnw3zrYFB0bFnJil6A9k9HayllcIMrcjVmnmgwe21yM24gg2dYnnmcdvllRnfueIJw8mbUbcVzcmHMcSFsJnI2eedbW3M1c+Rpq3OpXuR06YSUcVB0OWcnd0V/hWyLar5irWfIW4BWmXwMe4FjBXaWdUJvXWgHa3+BEmdzarBq7namdThtyXYCfK92TGu3btVqJWT9XPFtt20VeLNt8mefhqR/WoDvYd5oKEx9bWFwMYGkbVV3ik4pewtn2XbrZxtgSm8BdHFjgjdDc2FgS2exWM9qAl93X6V8mmPmZ6R9WYBIeHpvrV4DWilwK3IDbq53Jm3BbexoEWEdX4Z2BGQubZt07nQBZGZcp2y8fllhal9Td3J8rGZfcgt08XUlbEpn0xrSUaVQyXKTNTlEp2IITYtd5mG8PjhjOWWOaB5yF2ZLTilNjl4XLMhYuHAaQY5EHW6LL5xRooEbay00oF/fKDh08kdZX/VbZ1h5bthQmn0qPsVX0mQRbjtr9zi3ZP9Z52QXft9wVH0DdipcJWJeYx5itCLqW8VHykD+OCNQRXVUWcE7z1oZZnhtt3UIeOpD4CIdaFpSOmMqUhc3sGefYstAJ1hgZZBCp3PFYSc0l1fQZgVwzmUsc+ZeHiiKWsBGsG9fRFY8xmS4NQRq4EsIVct34zhzVTJVFGA5VcE1D2WgbFBM3EkSSexHLoEeP10/fmLMauZmXkkvd7xqL0XzPMxmcXYYZTpsyF0UZbBv6GAXdb9vBVqDcDlowXC3XjhjXmwhXZpoi3fobnNoZljBXMxxsmudW01oZ16JZL95Y3GIdehl/mn1Y+lbbVaHbQVkf28fWYtfh3I9Yrph9XRPaZpeiEnJaFZ2EGuqbmFjjGvBY1lwWXA6ab5gQGk5ZtV5MW5bZuV0GGwejcdmU3LQW1FRLnSck71ndGjYWJ5mXmYbX8d1VF9xivRzJm99Z/hq/WnlZMt1tl15ZShnVWqZZN9sCoRPXj50pnr/aflesHJGY8dyrWjmcPl192c1coxw323vagtm5nNGXlNuxlxGaXtpQ2jid9aCbl15aSp2VW6jZkZOyXnbcx5IcnTZhYNk6H/Sk5hffYOiXzB71XYVcQh/p1tzcE9701N9dpxqrZRVjS1VE1ccgpqVk2ytjxRNkoELS2lmS0JUinVwmUl7hIBQkU2meG+PUH4nb05da23ld0NUZWemerJhcYLpjcp972URYTmDblFWcuGBGnW1e8+AmX9jW7xtVkB8Zl1slolTdBxlpTzof+VyiGAWc1ZoUWTMhsFilV1kdNF0nm9SeTpxbWmqfOmLRYV2YbN2KolEezp0IT8ISstZeXHaVXp4N3FeWSJPM4edg9JUfWQiajaIy1Fuf/JFeX3oe45RWlXVc8+Ly3cRWThfGodZhPhEnnYZUryEbmuNVZaAqW3yXNh/ank3Ud9sUHcob2Z0T2PJaodWQ2BhdwJcx2EkbwOOp4KzV9JYvYFKb7dpvIHIaCCDJlNkeYl1aG5eZ5RcSmrHYl9GboHQew9xm23xbKR40nH4bdVnbnIjdXNw/G+4b7Ni5HMvbxdPu3Pcb4x7xWZKhqN5AmjaZ1uS7F2NaRaEdHu0Zs9nCHiAhAxh02hHZwZ2Bm4uYEd2AHAdeB5rgXfLe11jKXr+dwNsul1ehkh5OHvmeXZTTlMVUk5ywWCcfXBpB3e/XfeAnGmRct1hz2vac2Vmzmb9S9x1ZXoJaJxbBXUWaotsAWXacyF8nIICXt19iXa2fhVoymmMd9109mVHYtt2YHXScjxwP23WXXxl5ng/Y9xe3XubZ21qdHV3ePRtEmwuempxmGyibi14FGUDcbF2fHUGbnt5fm/MeTR2pWYsYT9kiGOzY/py711XXLtgrGszXf1reGn5dOtouG9Dc+SD/XSEZahu93eUcHdj23rddF1zIWrUY11fbm0EeNVug2b0XMpxmHKRZfRvRGlJftB6g2r/dehfJHVcc3Jlk2MRYXdldWvqeIyCV2ZXY8tomWsNdttbtWr7cT1xo2Z0X+x1GGsBc2SCoGsxeoliMH93UVdiD2BvYxRglHRbbL5wCG5wZnJ30HPCbjZukH+CYmJG7HtvbgBZwVrLf7BhDHAefB48v2Cxa5VsgHERcJNs51BhZlho8Eh1XndPkYngfidD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m2U3ZOldv1n/cUdhkGrqaGhxtmCkY01wUmtQayBqdXnucaBeh2xnVVZouWdaZYhTUVkKYv913VmZWeBwCXHSXfVreV1uYgxn83esZT5twGziYftnvW5wWZ9oemYKZP5i/2KUcQNgwFq2aplsgGAOX+xuE2OUZlRttl//UyVd1GnGYYRj0EmwUvVzwoaJZDxbZGswa6RzMGqtbTdYI2BScC1vYmK1W5dY/WAbaSdPSFtDd7Nw810GXDFn610vcsJjw3EMbR90LFk3ZzFzdlnFeHl0H267bF1ltmFEb7Bztn3+bZteGHEyVMpgn2XBdWBpd2GbkU1nkFsKYB1lOnqleHFsn0OPawhAMXNTdcBpf1j0YPFlI2hvW9Rn+nkia+1bumw+WyBznXobZjxs8WuIZEhxPW0lYTt1Wm+yc95cqHxvaC1kdHGwXvphJmTAmF9sB18+b9hR3l/eb1Z7I20cca9iRWqAUlt+nWBZYQVjpXrCcqBg+nanXiBsnWjIeodv03HbXktzN1cHXT1geWHdX5lvK3JYZblXImSJcFF20njWewZhTHxYfrFv5F1/ctZ8PFnfe+BjzIGSdKF8mGdKZkRq3GO7SSw9344ked04lmMEgWFQXoX3kFg5kneJcRN+YmJSY7V2Ik0id1puX1DHbZ486m1YjqVSRlCEkUSSrl98kqZBuY3dKAZ4Ly+neYRpN0DehnRFUFkkhByb33jwXgNjNGLgZwtLgmM/k2R0v3sAj26ClWs9T9KPskDlSGFxY4O6am+EZVLTT0NpSTPxdp1vXVzwXlBm+l07mIdxMUgAbfNgoFQqiVFqNEvOZu98M1cCcaptI3OKgUeONoujMFeEFHjKhbFqv0rqVeY4HF+JQPqDEnVOWe1PBnPZdjRdHnbDbyqH/GrBaSZAVW+RlVhSoVoNcVmOBGbTXIhxkZz+d00mo3KPbIVkB20Ue79k3148bHhPljuWcGhaqGQMR4N3IXcOZlt6cmWrbuV262JOfJNaAGxzZ/p8EVjuY6tme1IVdA1qQ3FGY2lmz1tVaoR6jmBjdRp4ImJlU8FifXyFc31YemwrVqx0l2dBa51qCmJ8WHxzPlCXXI9vwGVPaBhlP1x0YuNkbnKgZvlyhHbtaxV3CHn2Z9BiI14wXUhrpGJ7dyt3jlOmXTN8ZmMjUsd5llktVARkfmKsVEdTPGdoZ+JLXFrIVbRrq5qGfhBnLWjBXqZoBXvOff1lAk3ycspuVF+Faw1g1l9BbhZYJV2ncKVviXImZNlzeXecaepgJmkTdGpOnXLBVHx3TV5CRTdQVnYxZEFRQHDJWK9iplL9ZNVuF0pIfW53Mz+5fY51+HhKOphWvHcDd9ZQZFXcYixXeWWFYyBjJVezThtUu2R2eDhg8XGBRJxbNWEEVVZxq2UhX2VgBk+Ydt5MgHW1aFtMg1O9bHBSEFFzdk5k20aHUc1y8Vz4YmBu2nbWAaFpz3WpT8RzY2yCiFxigEC7W1NsBoPrW/FSBV/rbeZk9FF9bNxezk3PbkNjr1Z7WeBeSlTXTGhdeUuWYXy4IXfgbLdxzTweX/JfipSrRR1Pp3E4VZRq2l4ARHJlSGGeVWRWvXM6c1p0jVr2dExeOHQXYSJWU1SzL6tMYHiyXvNN2Hr2f/FDx4IbfZNNjpRfZ5CQKHBYY6+PLCtUeOiGJkqYaQAAxzh5c2Y5C1/7hMGLTVMIho5KeotzTzJ01juTiV9p3krng3NF/FJXdX+KloKmTNpvLHDxaSBSVHbvfJdh0IbDh0+MD3PcgESUj12QR2+XhIj4dr97x0T8U6hRQmLNX2NsPjSwPZRtJG+6iPt8a1T9bUVH7j6HlilmRlz7Z96UADpNe793aGS3if+OKnp+ck6DAoqBfHdfQE8FSKFTkGzNSaVwTmv5RkxQepFKhQRTYm1Ud1t3v3WChTZRRXWykKZKtlw/aSKKB2ILWBd2S4KIbH1tzcFFqMZaHGXyqthjYFLMk6BVhVhHq+xf/15MWLlmLGJHcLSYmHOusv+qY1++qM+bc1nEoemWD0mJT/6afUvVsz9XQbwslAOSqVHvWsWXBUuapFNe/2Y1VbtIMaatdZFDr3ind8RvXlpRZJ1S8WRcWSZ4Av6YVVGrT7laxV1qc37LTUC5ZItlYyc+y2/9XVKmNbtkcn1WwlyqUXiXLnXcjmqsp1xXXXRyGmMcY7Oh51dhWl91/mSTSixc///jX8NfQVqoTbWh2Ywclm1y1p3SZEZsmJ0UkH9xLWB3j1rFeGmmWRJzRF4vmaRRg1U8n+6hD3AYUgx2Hqlvbuc+h1fn5CBUrFr2cSthCFQTbd+Aol06bQJ5zFOQdylj5YSZYH5fh3HJYfFzYWbDXwpy2mHJZ9J8iV3uWOuF5W9wbK2J7FTagqlA8n0xbhV4wGNKYaFqJV+ISPBxLHhyfdFVn2AteMphH246c/p5nG6uhch6+Hg+XWNsYmwpbJZkn3KBhDx26IhEYX5yeHOucJddmWppV3xW9GzKYeyFpYHTaWtslGdEWntzKWFwSfhnjWq5XI5+r3X3a9F8fn1Eb6lmcIFtb25vZGrSXBtcc1RZYjxf0XGbdUplIlpzayNsXVrgdpJubXGubeljKmGLbXWFQFwKavRzlH/7YjVxlmhfdq52ImyKYjFe4k05dNVnbGOuWgZ/9ElHWJ177Ux+bq9JnmJDZltdYHZfcOVJ3nOIXkRpDFhXU+1uj24/TdxeJmzOYWxpX1/fVylFw1CTTshl7GIWWbheOWGpSxxh/mMecNhkS02Ta3tiFGB6UtJor02oZOdgpWm2SwZTWW4gd+pHHlumatlhx2FceWlkYkx2aahwjmP6ZzlXJnKuTbJZPmzbXkpzcWuqYeZcHW8pY61Y1WiGZvlLvHURXWFciE59XTVXmEEfVKhFcWoXklBy5HQ1eSJeJWdeYQBwm1REQ+J4AEJeZNNJM1gGUNNkF0n4TPZzS2cyY7BPd3Fqb29vH1G9SmxLO3NoWxV/O2qWXPFiwnd+bUBrLWzObG9pfXDbdCZ3ZmDUdGppTWrTdkBktmF+VpZm8nDiZHhnKmyidDtxW3pMWwF6H2xCcsmMm3T8Y4pmLm+9bUl3kmuYgXhdjXNcccJj9Wu2jDxgJ4VYZSV+Bn71d0tdil0cfAVpYGuKdQR14mR+dW1pFW6pYeBFn3LOXLhl0WvZZn6KyINLf2Zg/mIjWwRuVHO8a+eBT2tKZ6Fg/Hm8Zb1iAHficBV1bV8XfNpk0XTAZjR0e2ziZXJyT2rvcBlrbXRKbVFp6W+Ue39apGdYbDhdPGhhW3J4DH6Oa0NkgWCjfldkDmX8bPFye2PQadd1PV5rdwt4S1vfZ+h+6m3eeNt4MWM4a4Z3DWn8ZHRwCV3bWm1uzXWCVz5mB3UShMiJm3IXayhxKHPFbr1u3HB0enpuoWGIZgVr+G1tUNd80GjKZdJ25IQVfRd/4ndVXxVrWVIwcw90+nGqe/1oPYXMc29nq37fYst+gmUrdFtoRm15hNVTjWCyQAVepWOZd411rWyHS1h/t39uZMRy0VcDf6FlbmaDbHB24WuIZfdwbGzTaj91sWWDbCBlY3i2d5BvmmZcS/lWz1DfdAteJG6IYtZnmGpjcphsCGi2bQpbRH5+ZPR1yFoVX7l3+19Pb9FrbYSTa+NfrWkDewhzA1kccFVnwG0yZM5qLnBJYw1y1W0ueYZ2iXPxYNp13WkyXhpvmGtcZZSQqIAOcdt2u20cXyZg6GuGeR9cEmH6ZaRx0GazdCV6Dmpqc79f+GSEaxBsnTGMdVdw/VuFdm5k+nCnbktvHWy0YHprWnXRZXVuvGBShK5p1WqhZNSCTWSNdYpoSG8NaA9vpG0Mb7pg8FjKZMVoB341cqFaoWNwcGRxLGjMgOdnKGnQZmp6Im83csFpAXQmedlwonjGlB9enGKzdrJkdnKKbhZ8b1rWecdqCWV9bdV2gWHcdXNnJY6SdYF5j3UpaiJ60GxSbM53ZHkGcYhvEWXfg6FdhmKDYtSUTXw7dthqr2WWgEpvn3GBbghvvXADgzt602rnbQh0X3FZeE1u2GYvdzpztG2/hjl65XDJfL52A22BcVR9iX9FhBB86Yf4fVJOYHGoVztwHmjygmpiEXuNbutrxoG0X9iC/3NwbFtoAnCybNGGwHyHaqFyzoeXcJV/a4AbgcN2JHsjeoSGVWofY7ZgjF+sXXV9LXYDWiVKX3NqcQ96q18MdnqILHyVWqYsu2VSfgKEpnMobwBtpoKZg9R0tHgMfgGFQXmDf1141GIGgHtwCHcdfSx0roBKeneByIIibO19emi0fTWF+ncKedF5TXYbcRtteWMmbuFuEoFDbq54t2sIi2FUh1u5ieF40mXBat2DnWU3fFOFVktoj79yC5C8dfBwS4BDTEJpZY/9Y15hhif0T/yDykpgXWSGc3XjZIJ9ckORdnpvhHbOPE5+mGujVkyGoGIjVFl1M4UXaipkkWinam1mLVxiaIGQ5HXVhxqEtHfebfGCVpWYUo5edpoPjuFw1YMlZpJav1hLVktyunkFTaBSp2pLVqyKi3MMbmpySU0qRqGRQG4lQ79x0oYoWS+CmH7FaFKI7oP/fo6F9XcccpWBmnVEXAhjBmtVW8dTMo2QbuVC50sgenN370/th5tk7JHOhMB8I1OXgkaOHlJRYFttnIsebBdWoW76g151Znq7VvFPuWhnYZ5KqHWIfKJuOmU1dsNisoSpa1F9p3gCYBJ1kGQKazBe7FzAba5rtyeKeWxldl67dFtz+VwbdXhEJnHkU8lId1Aia8duJWZ/f+Fle2QaZMht0mqYYzpgSGwTcXJo0XCwh8N1gnI8gKmCIWewSapz709UXWJwn32jYABuTVT4YS5f8iZ8ZBhg6Fm2bZ9jMUnsf95n1lUHZ7lhlmFlg353BUXzZK9mBlyRaepe8XB7c5dwkHVAZaxqd10RgXJmvUj1Z/NYS2bUT8Z3cnewZiJemnmIeL5UhEKHXzJy0k8ud35Xv277clVdCE24Zt1wM2WIVPBxany/VXBlaWncY9Z2KnMMc8lri18IbFBliloDeW5paGLRZThoy2olYN1ePWx9aGZs/Ww+dQpram/XZ5px6Gx1c7B4XF3hd9RvOGLkdDpu8nMmcB5102YeahZ0XXGmXO5npmNlX+xm6WP3ZhVhzmKHdYB0PXombWt2hHopcyJsxHOmZYpw0F7yZXl1lHOFaIBhF13IY6Vsp3a9W3VJ3GBEY+Vvw2zHbS91iHibZU9Wd2EfYLlkYWcxdOlyP1iwXTBmTmYYa9hvXGCrdLhgpnQdbH5kU26haftw+GrgZqZwFXT5ZBJtnmueWltfIncuaWVySGFlX65l/3DLXNVlu12YaNFbCl8qcddvFGcpZ390W2rhbVJmkmJ+dSl6FXRqd/hlT21cZwVqm2iKaDRlO3EWcaFocmVeUqZru3ddfHNrlWqmakh9iW/UZ/xrGntcfKBp31lhdoVs93RCQNdfn3HXaM946mktax9x8WsFYDl6oGK9Z8p3HmFSZN13zmMnd49uo3vxeaVfPXTfXXFk6WHePqBuAWE/Wt5hcWCabatkx2OmaK1e925tbnZnrGi/Xm54jnLWcINw4GQRXKdiVGIra9lpmGTxc9BxVmuScu6Db3KFbUR+LnVGXv9w33vXX29swnpId7FnLXe1fQh5vWnRdO54iHJxb85u8XEDYs5y01s4bUJYknyCVFxaEoUebSNP2WnGeExQ94zShL1S53WUcfCAanjea0yFnT0KeFWAgmnoXJRbNoBAellX70nzgmaBY1tykDxcyINOSfaKN0AieKxgAmFSiEVZt1uhceB2nnn6SzVwlmlXYhdMp3gngMBtPXVveoaKy2bMh3l40VqdanR7yYeXe9WBgGDpX/NbzGuPbnJ4hGPLVAle6Hdzi8h3sFrzdatJa1mQjeRwb3S0Z+lxAk5edGqE2V20dxCIIId1gS6GonWzewJ5oUzZWbJWTlzhSFR5OGMaVO1kfHRChapZv4j+ZrV+AF6pb/tMmnOJheFXF2TOd715NHk5ZjpcyIFSbCVkn3fIa6txE2fAb3x9sHUbcRJ8mYD9V3xxmmAEcIpvwGxwdORzPGDJX7drlHQwZQprUIbqVx1gEYUGf+F4PXa5cbl1BXG8eSN423f1ZiNhBXxcbutlkYC1eoxsj3HnZjNwLl88cN1piXT3Yo96zGyTeDlk2lOyd6luxWa+crxmc2eEeJtzvG1yZ7NonXVQZjRfD2ewbWR8lnhPfVpYzXNLcSh3+YM2Z+U4El8vgjtfQ3Bfg+pzhXL6bgh3IFpOaGGD1YDSgCNptWq6Y512B2ArZ39ozmwUa+V3yHSMZlNdS25ggF1gsWjhVnR2tn+PYfdpT2MRdXZt92cMcZtz5nkMYDKMNbhNrdJu1P62dBuajOLSrwJWfeNNkoVABKJQPlASikbws+tQG5+vxsaJqFdUhXZm+b4MwF1sVZr22YWqAO4pjyzE1IILgl9wB5FX+H5689bPfoC20KqTozm5WxF0KdQu/4lbSFBroFqZeIun3bGyYC6QHn6p7uiECqOipMNy+45xkzO4CW4bVglFazdmqHVkVWHbb8+buWB80GKKufm7srGtPl5Vgchqb4+R3DOKpqSKT9mYDVhneIyMvrJGf+1v1EjaugAAoMHOlJuqxa6ITeer2lEDSEVoBtn/xxhLyKbQZJ2d//9ScRidyueT5QghZqPUX7uxfx6LqzWlj6WGbpen3IZXeqN9An/7hWeE5nzee9h854CJfKKFJ4euk2FgJXWAcx2DIHETgcCViY+8e1NlKoeGevtklGxEadR9BHY9f1Z9/Ydda8OQjnKrXwx7zIVtZOx3O3arh0tvZY/fYWB/63V9rM5x2o3YdYCGFYCoiXlyAIl/ksF2ynMWgNaB64jgpV1gDnPgcaqIMp6sl9SPq1QZ1qeBTF5LplJm645YT1BABHYdcG00Vn3Xa8Jac2V7WUdMJWejjlBdQGE5ZpN4rVBQkLR0M46YaJ59ToR7cGtg/HPYTr6FQJbUXQp7roQCZcmBeIa7rZe+aXBBd1eDpZEskXp5dpJfhRxf13gGavWuPZGWbSBRK2vkmkx0h1HUjN9lIK6zhtJk6XlchnhvsH+bdppyhIqoqSJDNcAYYi1kKmOwd9qAy4s7nK+NDYC3dQlhfGd9bz1nZL1nVYyCfYegq1GVO5CVhB+TAGUtlzC0qnFbl8KP5moefW6Mp2xjaI538DGSbsOI0lWHfwh3SoioYTV6T0e3hfiJU2uSZfaG1ILWO9dvAVW9Yq9TCURxVbNakFRsbF6Zf39/ixKDuVk/i/1N+jlslEF2TJWueWOX/2c+fOhGlqigj8J/Azz8eZxz/4BXh5R5AmGljxhdmnABhWijR6D+kXljK3kdmR2UKFuSkD+R52vzTbChT3jWnjJTapJGjLBgqF/1agiMB41jZuNEz2Okh/2HzJT7pZSLElWnTNStCpoyg8OrbZVjb81WbYsSeuGD5IQpihKCQlrZR0mDCX6RtBWgNEILZ+CRmGRMlb17J4rqaBl3LkGrgs9hTIQUVcFsoILAcKeGhHSNi6Q3LXntgmaLgDoWnahjqIXXL55++mBPhHOGIYCpROOtE3qyb9NwT2QJYvyCGYpVgzyLOEkuYouIKX61VM5uzX2+iu+HA51qdyZ9AmIhfFCSF33pgSlsIXT9f1Jsu3LhgvxlvEimbP9lDnjXdZ97wpgHctpgYtDsUZ91cI60fmVvkXS+e8ibJ3jTWa6JEppVi7ZzsoEIyA9Bv+KHkhWVnVPM54Anf3ICc5uOLY+XabtQSagXXbpn1pj//y64oo0aZjN6RkIeoWyR7XugkLyIUTMShtqJT3ClsEp0z0eYlGO+6JtVtmWGd4FfFsJhnp4WhtJ/n2uVe8iZVZBRfzK04EpAZWd2wFYcha+cun/ycM945qA7sR9tvjI3r6tdI5x7h5G4yYF9dKZ8gpQleVV04YCrYPdqGp0fWgyKhKW/bhGChGTuR9WfT7vma9+P6IQqhtt0qXnt1+d7bHIxavuEIYhRlDPCqn/AjcWjoYinxNpj5WuEjgOBQ2ogdYOEeJ2iUoyhx0dDzdtXuX6UWqmWwz1xnzCzOXS0RfSEyYpsgoBy/2c8XWSPky02SZiii4ymgeh2sHaIXLR05qQIpRmakTus1E6m9HwcOn98nx++cJd11ZKMj3jka7HpbXd7g3HFY6hbmHwggIZwinjPTIz0y1duhZ63ma7lZIpHInYtaUVQD52SMGubWnISdWRid1crmz1aJ3ure612Bo3CowRifH6rabNyLIv0hOFzw1CpimQsoLL6aHN3r2GAjnhYlG1ccTJieq5ia1uwcR7SZ2WJtnEmeMaMym7Rq1CKHHMSeNlZp1RgjnR1sWSZXQN1DYL7k6NzXJZ9e7Jmew5+gWXUbHP4dryEVIajXYWSXXZ4d9xBZbWwuCeR99E0c3q5TrDnVzVn6IYLUWGa03uFpvt1mX/EuhyQ9UL6eRuXoMRGVxt6j7KdbDKCxXbDfV12IrX2jCqDDGmPyflBA3QrbuOMf3N2WyloXGuaXrmmGlGTiWVLVl/MTfhvfKvnpeCpqpX4qqeIjByQpweUnMBxbXhKm5UTaFpp3zg5e5ms8ksnoGte/pMgXpaEto5SiEZ8iJyvp5KNDJa7i+xvBXkBswaaEZFNStOT340jKPtkv4bEmKyPnG13hZ5W+3VSNSyPN3eNSeGbQ50tiYhe1ZVpVJG7+4PcOmdXmK1Gjn+ToT/9dJ2zLlnRU0OMdKNtf9dhRImnYQNkbDmLIUFvA1ckea2aAX8dkl5xLm0VXTxoiHHeUlGFB4dom8d1VYSkWNh8w3s9qPx2Y3yTciVf9Vv7ipSNZyz8oHyXGHXzjNNrfoBkeMt5TJa2Zz+y/4y3hsaWTribbfNpQn6zmpp3ZYV0ZJeBrHviaVWA2nXpbsSZOXuxVcctfYmaNmd95lZxkhF132BLbgKqbnpJZf1ow3U1dmCUX3qbUQV6qmW4duo4BnU3UYt2hIvka9GXBZm9kb9zOluoZBabJ4FPutp7foa1opJ9xqBrfJOlcoejYNdraJf2al5tSa+lci928YRYj7tz7ooOd8pIDY+Fbm+TZYK0aAR4rZWpeoxgS6QobYx642QobI+Ac3KIOP1dqYESgEWUuYXVgKBlkl3Dd06JI0ycjbpKR5bEW8ipyJZwVgp1KJfSWtl8Doc/fbdj+nKEdzZySYnXituQYoOzYFKscJiEh8iNbHhWUpp1AWg9gBhWBoJPkrVOHYdSyBpjcW3sZIZ0zEKxggxsW2k/yLl/c3JakzBub6JxXpFOMGW0bJKJ2lnjdS03v42ph81uwKgIpxF2InkEj9Jr6n4JUImAaGGMVtqGMm9iF0h6h7s7v/GJQq6dblOaf3VxfptjjJBYdNi3ZJw5aLtgPYA7t+JoIXj9b+B8WJxghRtzD1jndAyHBsSIdoWrw3k1T6+EZFGnMkpiDHmofftzEV9Wswg1m4qsaCeOXkhhbDPA9bI0fNltF5+Eelx7dE1ZZbuABoctnwtVqFRRUG54e2RRYZKe9EvMbDmmLGyOgtKYHlS0b6ppm2/ZRGi8KKPOkbRSpDqxbQ1H2mwxV9VXm7dpYJt73k/jsGBi7D3snUVa16uNoeV6yaWDiz1mIYK9QBaJ11WAcBuYL28ObeyOkYK9cyqKJJrtXtOiAW4laFZrcFnSexyPuEOlZQBwM4BqlRyjS40hbjaLEUzglHKc7lb8T92Py37QrNWp/pObwdx3+JkUipiMvixNZSyLfHwAJ55eiHmGhepjnopzm4yI6ZXVgaKBpUzqeHptUn6DlLJ6EaW5hmKrxHsBYeN7z4pLZm+cBGHRi7WBOnPEdEVzLYyOnFtaJmkSc1mEkk+LfZSDssngrHlsRZiPa+9+AHOpNsakXJskjJ9seV//fYGDrU1mXceNtH/GhUaH4FlMfhJ+nHivYLSS+XoUY7R+wnI+Ji1o+nHkzJl9uXTheYBRQpKmiXlvaYfukR1oJm92f1+OVmHGYfePFpQNX79RRIANiE91QYQve9ebdG3xf2KaxH6YgCB4g4SLoWZjbVg6bkpPQZHRmp1y05pmXjZ7kpYEivVncY+phH9g45SCbIKCSmlph5Z4tERRdu2OMl+JkeSTyVzXihhzxmfko0aKyGliWJ583ZpqsXKqFq9Oelpon3reaqONeWx8mkWFiKusidplnXuUgJh9RXdcZxI06k3fXCdpWYkyVttzSI/LZ5xa0n0ffKRDN4PigepTzWumrCNziFuTeFKDKWwHeApH7GCLifCPaXSMUDeW2YMoYMZyUGmLpTombLdzsJR4EYCaeuRaeZWgVE56TnbTUQ1eS5srT/CwX2L7Y9qCxIVOaiSjfIMEQBqok4aUUTCFcTTXXW+1voiNh4K0CLLCXZGKhoaMfu4ibZjFbOq4D8gMk8zLznvZcIhu4mMhmK1ZpnAugpGzSFMyVL2ZRHB3RGFiAnMmXgGPFsR/TtyV9657gSCwsJt7ch6Yi2nxn9Bq4nh0fVplKn09XhWBT0uGopc/mIzdT1BgEobOdZZ9XJS/kbOhdGR4i8tgKkl6fS+W0pYefUpK04xHU+l65U22zB9oQ5a3XLdZ+YIbgAAAZYCbvet6VlnQgVMqA3qRTPpNPpgvgBtw0pHAe7ybNmVnDLdru7J8klZEv6VMc3Gp9a8TlnCCtYlhbWSPAaXqOwmvP3fRjkBtXWMsk46sRIS7pUZ3t5lWhJ1KD1YvhkR+D5RWo9GPR3vGIbStGEhWZE/6BYkKkm+OD1NriauR+Fu1WqyQUky4TqmCo4Fvqai380vOcqdt0GmDkNdzjGECpBhtUq81Yb9wr3+NmJ9Ur1nsnC+CfuEYlmeXEbQ9e8KJSlx2NUF+rofffylpDVBply5CUor1ZreaP7UejFNaB3MYRwWAgGqDSJ55L3jZgH530EgNhu/USIHgjO5bX5DeOCysok29soJpu4xAWzB9e1LRJTt4ylIjp6FQUj02V5l67EcAq6O0spRKfwRcQJYngklYS4OdWoC4PpFwkumRXIP6k+eqOKl7vtiYXKbXaIFr4FgFcIMt33Fhm6K7NcONWjJ9TJULeChH4UH8YThzi4PsZVhzc5cNgk2HqCVeTZpuNKsij2ext4r8HJR1nIH+ivFBxZsUD0SeyWmRbjonc426a79g/od4jVeqaopMful5JpBNbXxIXoDtXsxVfq2RamNwdGSHgVvBt19mb9KKSYj7apaFtog9TXVLRYbJL8qPBY5zE4eOoV2vo46Wsn7adU6FY0XLYYR+C2fviw6SvmFQUCOyCkjdWdxvS5aXEBOjPzc0yC5+/igtRgBTojCCxKSAWyWeWSjC4z4/zOE6STEpa+rLCjsAAAqzv1kN0aN457GLWkdwKSS6nnB7dBKFg2HeThHyNXnz/3JcFni3Bd3t1KNF1LHHXzPDd8MRlf//+a7WTu3SriLqGQyXtIR22TQJGG9rORBNnAbVfwAA//+vjp2kqVi3kWpyl42jc7iIYHtfrKSvhnsKh6loHKQTlrFemHRuv7KioI0Ypyuq9XR9nAt+LoYoktRnBDtFiYWGhpfsaj5qCHeQhz1xUFfIaL926lrroLyitla3WWxq6Icuk79niGBMlQtJ02HDWL9jx01KcsuEM1gffE1nM1cHc9GKU5NAhNB53nYlm7+TflzoTOykPJMRh2S9h1EagW+qF70fkXB0KWRrnhx2iI/BUGpX+IP+g6ODTWhHtcyYOGKye9+oCbfRztuCNle2XqmWCkiIvnlzGlA3WYm9EWJKfxNf4XTPplupa4nbYNd/3ZADhdh0EWm+SJGIx26lmoafzofuinZCemfzaNqSe4Y6aD9r7JqnnPd3LaOqhXJ4M33baQ101qTzkQaEOY+BZPSKb2h3mEKg4IhGaNV8emCudRSCO4bUryOIlZ24dX2YcJI/azCF/4cll4BugmKUgVKAcXHBjQRjdnsNeC5hwG1RbTRrAJXtpUdRK6KKuEC0BIs6Zs54coHveHeJAD7bVxZtUF0OliZST5ZaTZZyfV4BhROKA3iKbb60O2MrZsKMdJK1XuWHa460Ybtp9Uy7J8BTHXy9dhJ/anLcZQ2K6Hmwm7qJFWS+hQF846LraOuJe57qm2Gao5xdpruBSjVDfZCYenVPrLp0GlAFVPW6R0tYd4WMmHfFSSxgHpeJOf9uXGeJaQ+XKIATeu5Tp3STi/yFk5K2mj6ndIB4WFpjzZM1jrqRxWGKiS5tAXfQan1kw0NJa6yJ7mdxeIiHOWItfaJ01Vl1gZeBI2McWixy8nDDgV2dwoXPe95gdJJ7hn6RVogQdSlYMX5Pfr2ESoqEZ+tbyVHkmpo990iHW+CJL5VyX8OOWoH2kIV8AIP2hmxzpnDClP9c5HHskjGgpo5Dd86KCYcxiaxqbJTlg1508KUgtzmIr1KbVyaScmVEYC6TtVfhfuk0EWOVnNVomFp3hiR+w39Jdvd6fU90jitkTJLeY+xM74+Db8RweXUehgqKhXKcbg8+b4oTnNmyBHB6plhtGb8QrgZclocZoMB3Z8CMaCuG9pMxV/VBpngEZPZyv2McogVu+K6QZGiH81JkeLONKGzknxa7fJork1mMpI+WqlhiP5iweEmOXJFPWQyB3pTPd3ZgMqwfq/CIhoBTYVhsC6LbfN2Ju4hHrfN+sozqnYemumkNa6iIDWHBnV6UiHICOqWG0J28bx1uikvGgBmDMJOJdCx0KXxvkYeQlY2jV0hGwXM/agQ7IafRbFltpKyWaf2f3nxTbUpmDnjorP+qQGNogwVvYnmDV8Rrpnj+UxdrpmvKtmi1vpePLHJafpojqlmGY3VMYGWs/MMKkuSHWILhed+EFZ7YUg16tapjckpTX4TiYNuJTXNcrrKrF17Bhi98M56ml6Wtr1bcjG1lEnrthh1nrFqxj69lIHUdmdiJOGbeoYhoSm9XlNuMB3zAZgCZQH+uaitkA5r6Ulx2801WYx6Mo5PtjSiP2FrRsieYlXhJmnVIxm9fhQahgayeZUti2kgTWiqOdpRWXVq1TqR2vaNsZXhuS2eNlXqVY9NjZGnNoYtwyZOJbqRNh6MDnCl63oVKbwF8rn/opmOtOaJPYa9xd4iphAqRtH6vfOGDIHnquJrENJO7ctuA44FqlEuftGc6iEdpsYbKcUxyyH3kmWarO2BWZbCWVbaklPBiW3jzXwtrT5tQVWd6f3P7Z/6ZlkiyYBaLmJH1bh1thb+NbmJ7EHdyh6xj4ZFWrUGSlIgrXiOE63pLejdm2nRsacepjXhNf0Rk6a+tc4KqPGPYeJaW0leCkENq2WMuXOx1nH1cby9xA2VOit6JgZ77b3KK+2gscMtzx0xhjRmV71Chj8KmOKKmeZVzgJCNWww6uoMCfKN+nGzmeSiOqpJWbWZeZH4vhHhZXWd8n/tfE4FDiV9Trm49h7psYZEDcHmFrm14gM12CmSRY2ebHorMfyN7CYMFhayE6l7sYZKJq2Z/XUdNi3wsd49lAn6ehCZXynRGgVh87GQ8ej5fpnhVRGh4PckEg6KJSHJ0sgu44Zbzo0RF811RkM13jVMkVFp1IosReQ59AzWLXGd3g4/0iz9Z3lnrc59nM34EhD1ij2qjeXlF9WUzdkp3NHtybzx7sbmTi9yEMJesk1CD7YpvkMFus3tsp3R/XKuNoKZmWWsWY0eXa6J5co06l4ibhV51+6ZeemtVg3IHdpx4UJh+hTW1DoVAWHCArVhiariMrYxWZQNaJmM7VJ+gRXR8mRubyau1gxJ4+3Nql5Z9msFuWsdZlmy2drVllnkIeMd7HEl5hX11iWUkg0Kg84X2XzJp14smUNOS2nSPU8xyEmXmlauSG296mgOR2ocUj+yDWZaZlh6ca4E6lFGdAZI9Y/Wg/of5iB+D1onhQAJzIpKuW1F4MVSrf99sWaWcfdmfymXhY/CwanvbgmZ29rDGlTahUnGrnQCl829ugn1ywIJSURabfYIRYi9MKTs2mGl8iXByaEKXRXhbifekBYd+fzZ3xGQjUxRGmZB8js1xO1hLkR1ov5FEiDZ+R398f+GwcIe/eHeId21Lmp6o8H/qZG0vfoVzlnp8xV3MZfJbvW+eirZp7azckp+jRViPmCpP2lSGh09oD3R9ps1yZqUMpXuMYoaASOhYhGRjn1N+E0boiAxuyZmLc7dwv0oZc7Juh26feNuTopRDtyOWiWHWf9x9s4TMpdZ6QnyGtUZXBXv9m8Z7C6Q8jxSAmZMViFiIzXKyf5qLx5yraDuNs5VTb4pjmZMorkKOnmjyecB5547YjmCRTIaLifl/SIRwhWqaDl5KmASUWIWtWtGsnG/edTyVAm5tpfOQ2bVEZOGStlyviAVdK27fjZ6AgIUEnj9lsXahimGWeWLQpKRpsHjwV/m0q4CDUyFoIo5erFyArn6xngOAhWk4bCNiv4MGoXawZbgZm0pvp8LPlEKIz42AdufGa4pksLjCbaKBWI1gEKinmA1yqJHlqxZoMksVozaYUYr0gLqfT5hff4dx93ghjldoXZTdmPFrv4ewh91lxllOgn9hPK2vmPmIl7JkY9WGT4k4fnav52zadwek0EnXlbWTeJrQlfFpksXAlCdp8XMknPd1pr+gblp994SGhaxlqbNPffFsanXqj2pGmFTUT01uBI1vd4iIIF8+HJlQ/XpOhQJ1jX53Q3Zit5hgc3GDBHrler9ZLHoNephQiIXVYwiDtVS8kWZSIna2h4WMpnIjq6ZmIJ1xkPqx5J1EQmaLej0IhT2dOVxWbFp7QWnWj/Fg6YQGiOqstollDBGHvm8URpJasIX2dTxjJ4/5neOQ9YJ6nkxQbFoyqnSA0pG9W1Fj0GVPeIFM+HkFoet2FmwAkcx2AVhFfduAtUrjePVgzZXijlGLMp5mr3o4DFOJfId3qnSMV8hTeIa7erOCSJmBqkd/J2ktd7t6abr6ml1ZWGT/ZHRfC75Jgi1uF3GoQwGhwFoanEBmnHPpbCpnllTNeiFpHHS5gD5gQVxbhmd+nZFHgqWW3FtTapKxa1XIbnaCuKDyVT5vM4ggRrN2wr2qb3N/bKEjdmN5l5FbmFie56p1pS97HYdZhKOtmKQTXrCG/1lZdsOV55zTeNx4HZ0rik6XxKVkhXSHGp/rmWCDzmWxgdt0aXI9mI9PNmyTaXijkpfqYaaKGLeLikeE8HSGfdh/wWMTZhNXTGZbf9CyHm4/fT+U2olYa8FYpVKeZGBYy4hCxvdzOmt7g+lz52REa3h6r4+IexdemW3cZr+OAIb5Zzhuq4ROkxyLKpmSmDCbdYhjjGW43I5Oc6Suy4AoW+SdMSsmbrJviFt3dZtodYxxjEZyVmxndZZJHK/yeoOaK2L4aQtLG3nHajmoyHPRfH5lfb7olJ9dZ4lxVo+UvW5DWVJeeXSZVKWC96B8jkOuLF+WqpGW874DZWN1gH0rdjOLlJfIcLerIYtck9dAoYhZfMqBLYQncJpyyoAPrHmUXGwX27ayB4lIfW5xJF4+V5ygKHz0Z4ZlxHPNPaVxkX3ijfV+modlfxS1wljxhmiIunoqSDB6j10VQmV8dXj8g0h6lIQFc9t0b3XbfHNnUHHgYgaRcpjWjsy0UZh1dhlzD3qUei3LArDAigJYx2ufdTCj+XGvkE6B6XRxucGXMY0ceM5U1HBgdDZYP2ABTb1W7FT2Xj+NrGDhd5aNcXvns5mEpHoFPUB4r2UXYl9ZpXk4juY6OXz6UORorEvXe6GBD29EpkhlcKfmX0+DNVN6qcKtuHHGcoU3T1fLZTRagWrxbwdVzj+obhmLDpWVpKCvXW2clualrjpmXDh5Do5UoO17Lmoflh6BoYpoVaiIKVAiimF4D1kzY85voIakd+Jz9m5KkbChVkJrfetfCIuycA2TDlm3Z7uFr5rzcEI+2EPRbJpTgFxzcJCo4HY6cCNriF3aexNes9RqkOKu22/KjnJa4n9AXaVv/o47XydMjWIJb5uMypFsqMFzHlK0lYN1e4J9XD+C1onkZx9/O37vY5SOcYdKj72mW1s4lRWCQKLGYTd2zGwWjU2jr3syLEOBkWcskuh6mmQAfTdA11OHo1hJWGiyZpqYljHwfmZs0amjIhl6QaHPlpo8HIdPnsl+Gp0/QEBErEgYfhWcondgfLZzr3/shINS/Y3ieTdW4VmecxmBVmEEgRF7f4TyX6x0KHfskUWRKlqAX/ldoX7Fi6xq7KRNpKuAYHl7ZjdwdZDfcyNmcGnLg59/9W6mg4mgZ5e4cWVp5WvPw9idX209pbp4y3eWx2OLUo7TbNCrdn+jdKpYxnzKRKVnGmcJcXGOtn8kfq6HTXcrV62KYMFOjb1UCY+LoPV6IVhxdThqbFLkbdFfNpQ5htZo33XJg7CVarOmbpl68Ffqh/Whz1ZUeeJoAH3Au9OY56TKjEI5ZlMwdqpeaowdeEhl3XJcl6iK1HdBW3FYoIuKmuqRtnQGfwKCQn0eb2KWjFGfm8V8BYzSa7uEVHhVn7hyfYuiIfeBlXxDmyuGNX4tWdGFrGycqYGL4JisfXlxuDebuJyZ4Ks5k0lrxKL5XEloe7teiRN43Znnee9yi3s1lPhhwpOWh1ac33Mvr4uy4UAWVCiFaUfHcMBwgnFwkNluAktiniN6/XDRbPW3TZTZspmETn+3an+emGD9lm2Vx0azWZFtGHrqg61tjY4zes1hcTzYau4cmI4YcZV7XlnknZKTfJ7egHZXpIOShXKgZKHDlRlxmn1hV0yCk4h3jAKTOXx+ZtSeGmYsgF1y0XA6nUCBmomZioKfUXiWl5lSb3EMhHRbh34yea2wMWXchDEmrYfXhuRxwpLOrfxrtnSvjQeY7aV6j2uWy3c8izF6Umt9jSqj350iha+CfJEdek0+a5UVml2VHpuGXBxsqoIHnD5ik4XJc6+EJ39mhKeAU2cqdvWYfJc8uXp8CMbOZYW5nH06iNTNq5hcovFrQZvBfLhsZ3mHeAeTLakhizxUzF7mjGp+VWdyoihbC4+BYO6CCKVlghKTR2MgTapXE0ViZmln+my7clNcmHCMXXaXoJPlgXtL9jnlcRxKnXhuj1BqGYWUJm1ku2hYgc2CfZsbckxNboLteEq53ZENfV+IOUR+iUx0xHDnWDdtO6YLbqFpMIBNv7FuwZEbrsuMjEp2seQr6FylgdKzyWFWcHWhdXiiY92jcYPvTJ5T0Z3meN2MDWbwUQhKM3S2gd2eIXLfZESX3mnWkQSnwXTJrX59a54jhjam23ntUwuGm3V8elqL2W5Nnj10L4znb+aM3J8AV6OsuYHZxzSQHnn5g3eSBGoHUUqiP2PEiDJvTWGRbjCUClTZZxZOUZcEnVx/P1jYX75oTbAdgnhg04XNnkmyxkGlZuF5aH+OUO1uc2WBUEtKeHT5ZhmOdZLfTttdAdvAmDKB+KRpfpaQFIr4iUKKOXG/lFSTfjtpS91Gn2TsgZBkPGIQcraFqIrdlw9OqlfllHNcl6BakXFWMjf0hjGsLkIHQwFwtWVjjK+j434qTOpDMlxjm9SBwkSwXalsXohqM6eAsTs0S01WUXOIQaeccWZVc1PDdnQOc2iciqfTiMp+wGJrcUmO2pAFS698jJwVtuhdz0iFghS3DJMnUBQ8xkonqPBg83+3m2KK36R6XyONaGWTXcxn+Exagtk9/VaTa6iOaHLfg4SkZ0eRmeiR+HmieH6IK5CIecwxsXPSgOJZTk7/YZtzgn9df+WYWIiiikWH2YMPfu89fEsca/GOOltTcgUcxFeigLBX4ZhrtdCT/oa7ZbiqyZpGTehiTKnlm+6xGWg6jw6QqrJyo/15hVcbU8990YtLuXKRqoVybFR6AlIMr3N9xJ+FjkpsLGYsjQdeI6iUT/x4aIOxIjluVzNPUX1f53fiY15W1RPZrjFTlG9qiqxK6FJEZX+ML6cjeOmETmNyn+R+V359UeOHmY/wjVpRwq0jbUi5+n9EXtVwo08bm9Nianb2aIOLaJPYZVyRLnw5lHWAgpkqnVR/VXohm+2k52HDhRKGkFp3hn5/7MOP0DiteHmBiLzEVHeSbZR2+nLereSaOF/MceaQn6AlaL5aun+clBFXAYuQrUKVvrroOh93eYCUfuPJyJW7v0iNPYLblvSSmWm7r75KNl6VODJKN4a+U5Z1oZ6glP9UYH5cTJ9wW3VBX4SF725yiv1erCfJeVCmhFrKb6l+9qg8i6qboUhMh4GLwpAybQx7PquKJzlO94IagUxh/0Hrm1+PvYoJx5Jv62mwa/R5zoAUtHdtVYQDlPWGE4X5ekaTy1rwq8RjfowkdMZ1bIGYbq100pCJes1rurgXnTuP/ZCFV9CD7JUVgSeFblZ0bNCg4mkAie+brp7sk2IyKXPcnW+kkZB0aniPsMWpaY2kf4HPvi+AtsgOYJedMJEsVpjJS7uFn2F/aZ8JhvxOeTR7f5nBCLQbsq2JPoN2dIJ/lGeWiHB8TGPTcGRvaprdjga7PI6MrPF70lNZhCd5M08lgyFbzZUyjvC1yokyYIZ3FqjFq82ZManVhUm9loV2h85fRmPEWYqK5Hz//++WW2gxbGJ20X62XLOB/lePWwh20X/TrGd7wZBwjq648ZSbbrmSM8odvAGqY+5Bav5nl7nrdZiSeqx6lVVlEEo4gxecBFZXSylk9WTLbHFWmbx4daNgPpaxbueweYGVl1N+YIEnsQmUuUuWUExr6XeSpCiSa5b1i1qJO3vUmjRq1493llTfj6DLaC/OwdKLv/Sc2qUapVmMgV0xSOqwon27dzh58pG3cWp+VWR0Sz66rpa0YrmUQ7mxVIB0YUWARXat011oeDlzL3/Oi8Z3I1zZdFSAwT9AeBZ7PH3ljKxRK4ahfZGBNWUoZdFVlo0Rcelo/FMxeVWXLryMSiqKZYNeRD+lg4sCnXByWHkWXEOKLlCMmm6XWqCik35e538qS3J43pz8U0qmnIK+cCA/8MKqhsZySI+/iuSVXpl9Vzk8+o63oMNg4XdpcJJ0BmLBxoqiN2qGjY6cHmIKXHF5Yk3gRvymZnT5ff6GMXcbR3t4V8ZMbUagjntJZCxp4KjfcEZZf7t6mVG8tnXy9jSyQKjxosWmcF+cdAaDekodrC+U22V4PoOjxVOhv56TZotJlU9d1TjWY0FkpWc6nQZ1+4xEp76Cr3F1Z7p4qHPwYy5vuH+WjuqLbXXGX0ikeaF/UfxrsZfripib15Kvk1uOKaf0sjCBxZcSwY2QWFQKdiiab0HNu1ayoXibollKrIv2XiyCNYbOaG1u8Y9hmC2ma466eGec4oDKfwfBUZI7ZRy96kdNV11ykFFDiBaMvoFNr+yCHaXKWHB+xM0zgBJlxI0gl61i9auklNh/0pL+aRiJT1zQW8ej4dJTjBKjMHnyodaiZ695jwucj2YaYzOWM51aggZqSZPRailkgHSLlHeF4XknVe5Tzo6Ganib9Hdziz50wWwWfl2gWIL9lldoY033WhWmn2LOmwVfe3jsX2XAhXYKjUh4kZRutgOGlkBie8JoMIIydZ2R4IMoXZ+rlKV5Y7R344Y52Tynt5mIfmdo9l+Oh2pS41eolRp+5WQaQ3t63Ee9dYKV96K+b7SwA34poyxyc4uSXGthrppvarUs0EpghpGOgJWqLRlDQEo7kfCKR57jhuKft4H2hTlyCKX4dBh4gmf7qdf0H6nFaVG2QotUk5a/82FhkNFDe4+DfdmZZImomStfgndnmUZ3hZ4LmPybj2T3Y5ec2Xc9tUah7GrxY+2sT8VaOIeQGakwpwByDYCdtmKLq4dlh+KXQLezsz5QCoXMquWeTYMJnpWJbFi7YX+OBlUQqbygKnLmgHG6PLABXAh8GGPIWwiCrF+iiClLXm3RWbJUaqDlfjt7C5eidhZfHqAkkepl0WUDd6uhwWoOki1uGHEKgnR2lJ7FgXOC41Jkb5Bt2nFfdih2ZE+wcFaHsKGIi3BWAmLiVrx7GrMrhR2G4mvRi6x6Rlc6qnF9MIC9cIhKF8ODu5GLCLUDZsqaD7ALkfGez26ZXyOiwJBtfhiC2Xe/kTqkqrlipFZOzmtLmP551GWPhZlTObP9do5N3UlnelmCzpbmbymKXVACaaZj5jwKV/Zn/V0pmTF9wF20nq5RcJQfX/h/v4SFbSmJ92fJUfNQMYdXcmN0oY2cb3loTZkIUhRjxF/4jXjBCEfScS2MFK+jlhWTB1x1j892G4Bjf2KSNnh9YnkZcHmiNEhca2ASWEZl/nKDe7pFzl4coSmKxm3YYrxD5YHWn6NzEUdxlUuRaId+plOzRIWWd1dXtX9MfY5poYw8XBuS/X/BaE2qomiXYCx7/0XdRKiHX4O3crhhC5Z9g05vXE37XyORCpqWWxGg0EKMdxNzemY0cpaRs8FGXUJHgGyOuf9hsLMwR9pL33mXdWV5c4Gim6iIsp+dfglcglGMm1JqCGwSSck+QJJnvyuSQYjfgbi1PnGwawOfAkOob/JewVVGhrNaiEY6VYRmW59mY0p9t4Ejs+WicJN5eld+npfVkvGfi6EfzdmZbWcFokSPsHrAhO1jAoTyhFS2nHFPqFZtTprdbr+/Oas3X/q8eIhMgvBSvWxlfJNb/2iVkH9cGJaMVBSDtM+zi6J9loXKeZSYgI98fcWWbZcFafGOuGGjo9CNeqCxg0VlfHzfw/dn2mxicfaGatO5cu+HPZKwj4eH8r/wn06o64LFhvG754eoeFx80Jn/cepmwrTWhRytVW3car1tsMFEaWRxL6RLWiZclknyezSsvoAkjt1PD24/SB22VKLQbr1ZBGY7dcloQE6FPTFqYoGbUgdtIV+PYBZ8MVuqU2GahEznje6CFXYrcRB1bHHVlM2mtLnPfc+kzHr+e4GW9EUTdxhq/o56nPq4k4c4cNqHImtthdC734I8dPaAkoBoVLJq8KKyPBVYBKMRr4RVVFzGNxiESmTOmZNsQ5uYivs9uXh4ru2MZYSLXI2onYTadI6+N4aLRlRYWWmkhUN4zYMLTCRgVpiAkqVP61AQZYmvwVwjg3y72YRMrKt5d4ekkdKzwZkNga1r5TxXUmt2Np6Uebec5rQGoppuWXlzgKexU6XmyURftFUQQh9dtXVPjANsqHrPbgUtY0WokuBc4VyQX+G7VpaygbqR4456b8toXaFBM7FXs2Fgi16dm2ibZnJfbmPnmldKlI0mfOlr8pbnrXVSsGVwqbmpSp4Cdjh/t1s9eguHS3qMFVlSn48rcznEoKPOdOuU+z+cOb5kEqxAWHJy6owgg8tofScOtPB89owUVfZ9r30+RHBphF6ZZ3RJcjW3Jb5ei7v8dHJ+sjUNaO6C6FlDj1yCn4yZZ1EwT1O1YLKDoZyxaMKD2G0prYB+xKe+ppV9BEOeOSOMx8aSq1OHJn8ipBjA857uOhCAsW3jW9qAHITkMLCuW4H5Xf5sZJw3fGiXdngXkNuYBpHhjMpmoGfwYyFeXJXYbqRZnmWYl8R1kmSEcxhNbnN7UY1dwE7CR4yBQV75c6QdSz+9S7WP21+4kkFarrGxhp082ZkbonGLfVZrm/xALE56gGBK4U/MbVo6U5sUZ8GIa1/OSMxdNXoegmm3PGP0hzGi8YC7dClwy1pkndl94mT0QgJo7Zyvigi1RGOff72y5y6Oegt79LG6ous/d8U3f32niZstYV+j33yGQkRwzYuyXL5r4nc5U219lGVpbtZWhLxNf4WdVJavZKN55HB1hphmrqPlg8+1tVtXrMWr/HiBjRVMGonXlVN3xWmejeRu/nQ+bNN7WXcdbEGulZOJYxmnF05ilKGTh3G8jl48MYbKgY5vmEvlSJGBzyoJN76Dx42Jgsxk/mWkRNSiW19jbF9Zr117Y6l2mnX2ruF9y0RSgU6I0mdug81eJHKOj+GccEsmcr6IgVcFkP+HWH9Gccp9HH0vWrKHI3EfitiWrbUva1R14pMpOgFkmlBOnPVWFnHCs+Cgjl77oGh4q4NAY2pakGUAsYiMRVSdgAeLDJhGe/NayVZKj+CMUdXgT4Jtx0l5cO5HJFqIiJydj7EmyU5a/GvCYCGFD2inlulGOmylQ9Ns1KrCQjk0R5yKdzS0oWbjmmBwRCyXXO+Kj1cGYYuV00cax9pUkp40XZCoFFtguDgnyIXteMVH3krIsmKXdLCCletpdknJm6dheEa5UcaerHzFefxzGLGvceuY12S3kZKJ1Y0UnrUOF4XRWpBEx6zbspm0oYNTkEyl+jmvlN51DUoTasRccoq7eEdvRHGml2ll3Y1ll1NuyFiIgI+PZH3Bj0y7N0MDnVGho2g7fIdpgXnknAaUwF+8hZOks4QRpsKDF5pzl3qGYaYasahj6X5NR02ag4TFYhx+mXbecjN285ngSaSfsJFcpPVuGqMIa2LUjmlatuuHQ3G+ZNKeYIA5eap/brisY3hjhKZhdBilRkH9XR6m05g3j76zZXS5XWOfdMk9tfGa1YMkeAqF6aqzPnFxdUsgb+6fSHxFlvCFZnwfZcxnC6jndWqJ6XXIUvN4jGxaXbtAUGoUexifkZbFgCgDSDVFfjOOiFNVZcaRkoO8d2tdVIbne6B73EYtoJ5zF1ckc5ZO5oFNeYRMQ0luS1ZI/KaneC6RqZb0vDmIHJv2NLl9dpxNZ8pU21RmewKDotnMj1tcGG4aj96R5YCalvZuTzqSlr09Obcnuklt03/jWa1gkZCAjRtf+JBVQ893hbfycTh5p4gjjsa23ZjLy+lXNFS9h1SK3mhlalmp65DjhV2JtUoCcDWCQIRekkZ3Smt9tGKCTF7VmzOX0pWnfwl9OnXLqSZ6DGGtSzCIaZZEpc0/pVlDY7Wa2qW9oIh9apmPbmBzhmgAm7eI0GGRy3iS/8AJf6p3rWdJmkuauDgSj7uBcalaxdRIP2kdmy+EanizWzKNKmrBdWNVkK1qwSOVmCgFiZRg7WLMW5F8DjuBjRCCaNzllFCaPMScWJJ+WJAoTQR6xodhiYV2moBGdz9g5KtMs8NOwJJuSziNb6pIlsmaDIB/T69eimR+b+FwID3TPtd7SnIrfd+QkmmWVgRpvZEbbomgS4bxkuuTxH9wWiODgon7m408mJkce69MAHjZhs+N7MAnPEB5SVsVVdNzLFEZXCKc4Z9Ua+tk033GbhNmp5e9cW+MjK38S+FkHGgPmJlg9HKTnKOCeWupbJiTFHhGbzOXESWGhPaMLkuJvaR792iNayqESabjTDFCs4nDOp1vRIPedR6GC5ypaytGmIixVQGOlnsbiH+z0bRWWsaj2GcLfpTGrH3EjsprAIrNmt1XQIArnidcOJH+WIFi4YsUs01qhkjLa4d1jls+kFJpNZ3+bcmDu12hUrl7qo51ZBmHa6J0I6WFdGyJnpVxA2X5ejVL+HBqcRV8aVmFNr9dwGj/Tr1uwpM4gYyYx42MSEaIcXjhm/quXpdosZbUMcKFcFpkwIoDWSdl8kdJf7180li1Yhld8aFgrumCOFdMkEiQFJMYVy9Ty1XMdNKuK8CIdwfIU5JFoTmCon2oVADxUoohmsdsFWprj+plS505ZfFIzH8OwEKVdY3JqWhrt6ChdlCBG5BcerCLH3KwpWF824AHl3eQTYi8iXprIHaYecdggKIMpst2S0GTUMmi43VqWUOL5ICjidGFjFTmebOMO1WXanF6aXC2pf6JgXACbulRhVZVhA6RvapJp1Fxwoczmc9Qc5rDYetzLHOwWWmMjkuvYI1jbIZ0gd9W/3NJXc1sALAGR3ZFsJSWvp1u5kCKkYqOzG1gY65nEXZ5k0Fsm1BLXzqVv4ZQwV1rlnrYaKmGS4ulWFNo+YBrZLuEOp/lW4+A66A1hOCWRbLYf5CT1nKZpuF87IaefJOghJbGePalirdos0KbJ6y+jzCTFJdYbtpmBJaNV5CiBZ0pPap252nkg7irlIBRaJlglouuaLVkNWnCe/CqZHN0azx6jlQUuQZ2a51zcr96O+gVfcuYgHXFlUmCNm9mlHpe0MYST3ptKsN9glCLq5NYplOOUnnxeW6pnoQMcoiZjIkVuKyuyIjpidyTI5MbXUmLb2tWc5dpZUkbggRWPpzgnHMzD4del2pd3m/tYk51K5BadA5vTVMadk9dSog7kzhjWYChdN+YhX90YlWHaYE2suyqB2rwZ9Zsoldzkpw0XFbgrQdk310rkDN0ZbVzi9ttAZJrZA51a7l1ju2DZJAzdmhWoMhZbqWC78j1hCvh6YvTdGegnZU3n32hrlJSjuGpv56XXVR0Y3FQgtReMZTigTqAvVIbNlp5R5+lXbx6vp0dQzyLbGvAf6qxoozObcg2FE1AiT6FhFMXegWXQJTLm2t80VKOfF1a6kbDJdl9xk92ZjstsGJjVl92pWIElQR6lGVajCu504ZjjbpsfJttoo5jhJShhqdNTV6oq2CDF4oFXxs16nifYDt64VqYbOyNpHSPdW9vYJTZiuCh9JJReIpRlGD0Xgk8Ulh7Rjqppn73qzx2KHa+x96RODwmT4cudb+tchSAeEhHbamgrYKXwMFtGKmujc9/slnDfmKFP2koXPJ+wHymmtXAxYLCx6SC7I0CeTui576OmwZNgpiXbUVdm6yeatptEHBvYfNfvlSae7dXXnl5kUem44tsw+VoPIjmixWAzJTKmXt4HpTnc2eROoIxR3RhvIZCocihAHAFTrZxWYOWcvI99l/SeltKr5O/TM5kxmRhpPBsUIjrfmKG5ZQwncZdFJFG0iW1KskzVpGMn5HhWgMzz1FSkIB0joK8dumEWIfleaxU2lWfnE6jqpbnhJm+745ni/OAKlZ2lgycCZgpzGJMXG2Dsl2ubfOGl5J5iV56qeGPNo2sdgB1L4hwhRCBz6qhfRZ6Za2RljyqbYi6Y1RFSH6VVd1BlJK1TbSSXIwskG2dQnTWdX+fSoSwm3As64n1aM9EWEh+4eKhX0oVkA6n/2xbeanEd6bVc3Vh62V1VTqtGIFimuFzIWJhjeZJxpNpf5RsXJusbAGO5n3ceiBqaV0Dn6SaLlLRmGaVdaEipHNykmu3T3l5HF3yN2Obv4dKtRp9WG7cQPKV6nVAlHpny5s+mM1xdaJUdbWY5rc1p21fJpHhiQGjnU9yfUSxz3SfqNOIKHGecbBiz5GOwouWhmEUdsqSNnqSdZ2JqI/gvTBzuYe8YMl1TYqCgdqh4ZzfbxmyjJ8mXz2MyolnZ5emC3eMhkK54JsNnm6Lgni7f9qq+oc1dxl7VrSDdbRxOZlEi5Jdb2o4PsZkhmstmASqp3Mye3C+nWLTo51tamq5nVqXjYycahRk2Xh+UHV5ZpfkonfLBYV6Y+JwIW+7VrVZhYomrLN57X+Hcz9453EsbZR6nYMiY1qdR4b3aQl3y2KkfuZyBnG2plirpLLhWTRhX6bTozRtH4UBhGm7nVhLnml4KD8Xgflzj20AYJt8q6uUrOWXsYaedyhxD5xWhpSXQKxykqe3u5SavhCpII58XbuOG3vdj9erLaaea0yShH/baYZipXk1gKplPmsmiHKQsXOibC7QCH8IuwZ/AXIDpk+4A5u3dHOCW2a1Ya15dIUvmERk04LeqkykOHVbmlcyUY5RSPtgv6/5eAU87E4bWjprhW/unJKaDkjMYxxfCG5LdP2Jba2dWWpJg0TtdwttF1iiVrCeY2IJrfozmSjLTXdldtXYenPT+cIEo6B8JI+5dneQK3i1g0quY5dFhGt/5JELcR2TN1iacOR1MolValdxnWQBafNOWUVzTUZHHnPSlrWhmJiLto2OiqvGhiZcYoY2XFFYItPSm5F++UosdcuLa3KlRlW0qYkolnmEbY0BcLZi/HjokTR3FWiKuQI8S3LTme1unZtHUzKCMWynnC10V3N2ZVdpbTUBoUmcxspEt1F2D55yRQGGp3WAhkdkNYNVibeA31gUgYeZPaR+Vhs7dLv1iN+e8oR4cXduCY7sfamOvoIOifebAEg0WA2oDENlhVOGOmoxpd5Z82XdkCSiW4IDjgKBGFk/Yj1kFplVpjWYH3nSW7yb7cmFhLdmAYX1gPWDOr/cirB1NJQ7aQmQ74x0efNmNmQIk3Bgc3zdf2KBYaYrxu97EYwFVkssaH7FkVJo920ekShzO4mQXYSFELdus0tlQI38l9hpppf+bmNzNpR/nWJrhY8aiK9yCapRnnHAro/qnA+DEmv1sS97yp2aayd9z5vKlA2L0nzGjaSY/sOFh4J3V74uUU6UU3K0dw9KGGtvgxJ49VxuY2y36q9nkfFauo2iaYBfOK4VgytahHuISGS35ZJxjmaYNKWJk0qUa8SHOZHAa9DWcDhPMXbmsJOH/5sFpJR1MFpXhgaEqqLEk3y60GZGRWxtY3n5guOBjnguem143cDEeTmGi29ofRRuS9AifLxJO4T1gF9/6pn6pJl7yIpOnE5aXz9MhYqow3m9jHqM9mhAkCR6p64uZPReKZsZc9h4qpHTlASBwJ9YV42VAIPMOLyURnNdeW2tzpcAnc58lHlKWN+AX2mpc5Wg7Y6rin51THLXp+annKRKS8eDPpouaY5qPZTRkQxyEoyAtn2iRWRGntCSbICPenV9bXkYk6OHKWVjbNxKLWnoYFCNr5nKkNk/W5Scu6BggYvQX251ln8CiIuQLnbWhvhGn22EdyZmKIYKeQFQ62X4RnqeO2bEjy5Y72MIoFNwopmTqXSET4PSLoSOqqX8afOr5M0Wb09IYoqXeFmSVHwAuAKKc6ZnLTRiX4F2RuUm22+ubXFyf4sodQOHNG0scBNd/FYZoz1oO5IZjeg+2GAcX2BQkTFdWgBsjIfFgp6CNy+ALmJ+aIylOvF5G3EkkRZFFXb/f9eoHKj3MW06EFQofXdzgybE5kVT5j1bYmVSOapKU45qm9KFsptYqIoGfiYcumpGeYeevpE2gmpzJ1m6dBiU25j6ZPh1X0UNWcBLbUpDjddB/KKjSxN7oS5SWx5OaWQZjT2Vy6qmmYBbdYNoatZARZzhYUh3LIAMdU5YxlZ8gXKfAnJQTCiIWmOSU/aLuX8glnR+Pxv1jYhxU5tmk3CEHnBcUgxRVal4lLBW/3W7WjqnQV4EYY6y4IbgxE6S050Qfb2zFngboAvaGaLce4rIkGmYYGqLeUt1hMxTbnfUh7Fhg5Mck56Jk2fHeFR9uZ/uY4ZyFKQ8UKlzPXqtYfRujp8Gs2WipV29nOylo4pLwXuvY1vve45tqJB+c0uIhGdtRqCue1Fkg+XW2mlDPOiLsoQ5XfSXAGYEbGh8nLV3RvtST3vifq6ABWiMWYpctEsYhXhtREa4lJk/PnChV9aMToqvhGhu2KE/nfaN41i1dqmQAKJrhJd58bkEkxF+EaY8hcplSDzMjxthMlWWmNNoLkIecj1o6X4ohGJiMGtEe4iipGtOgp5Z1SyCaO7HZm5Ncm2qz33YoQl+aGZrbvuhdam6coaolaGxxaGIoHZFxTWeV21niLtntKDGZ8et2n67fdBxXGOUr9ODgFy9tod1SXe+iCRj/VyZgjqXnLkRhwtg52rClENniZwAaF9r1XAxbGSXo3a/oC508HGLb/N9tWLRe1urInASYZZZbzCnbWqdtmwMdk+UoH+Vb/CcdlnpcmdGXo4SYbdKoKwzfkYP22NXp7meDL+McqRY9TI8ctGsHlJ0Oo6PeFt6s3aHBntbYiVykKEDgwV/aJTlbZlUQXvAec5zvaflYcFjP3tck26IcmU6UJqH5Cj4gBiLomXhSwazG1zYP3anPmyecSOlD54KjR57g8aSoF2GC3r3UFNkZ5DLcFWWD8M6aEFc34/qvhlwxpoPZi15wYwUfh9yE3u0cB1q1Z00hoGMWaC/eJpuVHm2dwpdJqIoXa2P3WSPzz5wmZh7QaZ5/oB1W4uTBWAnc5K2HamsaJCfeadyUxV3jWnFiceHOHUck0GkD2H9ZslrxoxhULZtCn5NcEh0akeolABpzZvmd+2tKk5+jL9uKJV3clF7fIcDe9dJ7JEulQmJs4qJej2cWY14njp6vmppfsNCLWwnh3GupF6JZ5eYQJgzfeW1y6NPh/FiL4G+auh3uZGGuo1OMGZ4ZuBqk0vwpEHUEVSOkv25YcuueoWBRkwTWBNSEWorY4F+ZHEyYU2yRH01Q/Fm1F4vk0CDfYshv6GJwl48ccaaK6Imj/au409tXRF6MXmMV0V28jIgZOe8XJdQlKKEh3w6iE57keAatb5ur2u5yCOJKG1om6Z8XlSUifWPo7l+VF1gtoQVb/Vvb7cXbG66U5fv6kGYfJ4IZTiJdnraXdtx3X2VcJKBcIxzfYG45KbNh8iYdlqJvVuQPCyKgaiQSFPrkYWQTaIfpw6IYETkoyfXgL5mmV6vmXPirHGN4pDHV1eTGpT0iCSqp4AKaFRpdYZhYK5lV2/peBOUpnGTlSxw4WehnietTmx3hJZVTIdjtEi1fWZmq9xk2YfveGpJ0HDzjnSEtUQcmeaT2K55ndaH6jBgaOBkAZ4goH6GXaCsZnWVG4Z4RReFWHf5fXRxZXPYtZGAg3O5iEV/9KjWaetvu1zypUqIvkARbYtqx37VhR+Hrqo3c9gqZmcFcuSdSLKKnC1xYUMUQ1aEIo1gWjNCoV5+gpJGEVF1eMVZ5UsRRJmWyZgHUXB2FHo6hqBefpbacwJvPV1aTUNZXnG9XsWIG4DueOpjb37MhQh0llnwiatqd3Xyjw5dNqBjV6yV7Kj9f2hlUrXU5RV/g5oppDuPqGhZlTduamnNkedoIH3OSMtlS3fjWz6d5oqbX0Gv3IkisoehubZIiU53R2kOZ/RLB3eejHF124DrZq5/RnQ0UK9yXUvei0SveoginipWS4z/d+Bj+VkJkPhVBWlqR2ZotYKzmapUYGHbnTOT+3tIcC+n2pVDqGOHDHe/RklY6VzTZlBRE7UGppqkGdmAmc9FPWqLkDSkF4E2b9dLDof0jJ+aZojnZBdLS1+hiA2el5lyfjCM847Mll+BeYcGwUd06mGRkuiil3ld0SpopL9RpodbPZH2aCGVLWu0ljmT0E9waFZ3G4FpfKpVaoBBaKZjpGrCnil/94DrZhVoy3gCfReH0ZfGlEVbGobLlTt7YGP2Xm9pXU0peqmlTzXJhLulDoFudZleNUUFbJ9i/HHsWqBzKV9Ee/Wfi5XBmOSdQ691M/6y23mgeHuFzXjLrutSjYcWnHl4c2zCjOZfb5IbdCWef6Gcf5x2uI/aiuBX1FojlA5FlMPaau9uz3yId96CTKd6fdWSqWste6OqqXDrkoixu3YJNA5qY5KNaTdWD5iyjs1jCHEvW3CB0WHumG2lsEl0cNmBG47gV/CMuqYwf65pP4/diKk5mUrMS66YGmATVdyRiStXq9qFQqy4a91V6Fp2deRuLld9X8Zp0pxmkU6cf5DQi8BmAIQ8rzKPuH0gjayiGW1TT/tfHlFibvR9G3lCq4qLkGB8an2b2YwvWfBu3pGRn2OYdnF0f5hia5TzQEamq14QkYR7cqO+qVeMYXgZkG2tz4KOhcRyU6LogKZX+rs+iFaJkmehj7CtaIb/jviBgGSDhBBpOGsGg65grpIvtMlAcnuNa2pGKXy6VQlzrJJQhSlu2nl9QWSNZJG8r3Z4mZd2V2xBoZ/dWwdp3ViuU8R1dbNKh0l1EZdtjXFusHVvekimmqNriLSedF1Je4K5GYHifkapxma+l1dgKFMLj5V9W5ooicGbDIDjaNp5d4jqejeG7ncMYbZ1HZMejeZx1JLKekCGeWAGhkSFnzdhjk55ZqpCuWlvIYAiTZuEXnVXhUtknI0dPvePfb6KopeigHc2iRd0zF7Ecd6Rxlgvo8deOn2KkA+sI3FUe/xe5n38bgB+GHZxYyB353j6VPemPpijos9wzJ/YiA6IJoJOdFGO+olZjjFv+k/8ccduQ1uYYiK1ZlgJdoqJcXw0iWyAlZKCqKp9TUHFdkuJ8n4PL5yEa1+JkR4xj1X+XFaMWnqUXE2YQHfujjWQHpEoeINp+69teJyNQ1dObkFdnqlvpJWeRi+JSJ9sOX2thhVqy14jTiaSjHlygEd73JkVfp1VMZOFV+yB4XbAkY6TYYwqmPV7PpfBd0ybko6QeQ17a3I8gCmMO4moZxq7DmrBVueFUbrZqzWbnXInru+GZJlhmMGYe6CQgv9dYHd3cTOWToTWdDaQXY4Fzf6Gi2weffdptZ7ojqKVn3Wjh1B1FXkfhTurLo/Wb12i/n/zZ5OE2XBEiSaYJZS9nhRgbJ5+eeqd0YIsdk1vmZJ+hv57MZYAgoJtwFQfM0aRjXDVgS5bWoNcY4x+X6bAkCZNNoG8ZeKbUHwqgLxu3J9sidZdfnxHgkiG2FITkPldjVrMY5GoT1gMlEuRfFmnfiQ/2WCUeUVcapc0lWZ4zpfWbfhdTERkPsVrrnkXsFR7MaactI9rj257eN98mIsJV0ZcXGJIfLeJQrNNkNuDso64aQeEkI7hd+Nyx3fthE6jRmuDjL1P91F8ZdilQKCEvgGRZHgQf3l2PaJNjd58339Cj3uBJlfWchyQ0IKscrx3b6x8ZZ94l1j1hE1lXWLvln6LB2jcgHqnaaJyjoFTx45Wg56iD1venO94yX2Qg7OO2LV+jSKK+ZqilAKO8WJfYjygjIobZt+UzpcAjxpy/3lugkN+/X6EcAeLRHbLhA96R3hMdEZtMG4/n9aEdm6mSGuxW49oanun2ZKJiP+tnYVFiAypW2yrUD52coP8jaOrs4lNWwhz6YDbV289klhRXgZ7B39Hc6tru3uHns2RLm+EcC9sGWtWgIF18YoTdRdf4ajMhdxlGJHdohxK9HMXeYVwtWiBZpuRaosJwFh6+npwlhl1k3tUkoBkYHlOkEdidZUhjZNZNJQbdSZwC6pUZUyrbr9/kxazprDKeac+OngtrmNVAbOZg3pi0ngrcr2BE3CTgAdcaJl0fY1v2GlxYeWI1GlJb+OJrnC3SAyOo38aYR2EFYoihPJLuWBQcjKx8YqbXQdK5XChfHpqAX7tmMOM3Xi8V8q0eVwLWBmHHYTDi/huE4nnUnxmbWlghs6F/mG0aqlwdIRQjEqQ6YnsX/x4DHSLaF5pQH3kXTFhHEJ9ckhw7rADP6iWcHpGV4hSFXAobs2lCphvm8iQ8YuGc/xu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");
var pdffnn_default2 = __toBinary("");
var uedffnn_default2 = __toBinary("");
var bf_default = __toBinary("");
var LRUCache = require_lru_cache();
var classifiers = new Model();
classifiers.bedffnn.json = bedffnn_default;
classifiers.ecnn.json = ecnn_default;
classifiers.lcnn.json = lcnn_default;
classifiers.pdffnn.json = pdffnn_default;
classifiers.uedffnn.json = uedffnn_default;
classifiers.bedffnn.rawModel = bedffnn_default2;
classifiers.ecnn.rawModel = ecnn_default2;
classifiers.lcnn.rawModel = lcnn_default2;
classifiers.pdffnn.rawModel = pdffnn_default2;
classifiers.uedffnn.rawModel = uedffnn_default2;
classifiers.bf.rawModel = bf_default;
import_tfjs_node.enableProdMode();
var Classifier = class {
  constructor() {
    this.bf = new BloomFilter();
    this.flatten = new Flatten();
    this.model = new Model();
    this.queryCache = new LRUCache(8192);
    this.regularExpression = new RegularExpression();
  }
  async load() {
    for (const m in this.model) {
      if (m === "bedffnn" || m === "ecnn" || m === "lcnn" || m === "pdffnn" || m === "uedffnn") {
        this.model[m].model = await import_tfjs_node.loadLayersModel({
          load: async () => {
            return {
              convertedBy: classifiers[m].json.convertedBy,
              format: classifiers[m].json.format,
              generatedBy: classifiers[m].json.generatedBy,
              modelTopology: classifiers[m].json.modelTopology,
              userDefinedMetadata: classifiers[m].json.userDefinedMetadata,
              weightData: classifiers[m].rawModel.buffer.slice(classifiers[m].rawModel.byteOffset, classifiers[m].rawModel.byteLength + classifiers[m].rawModel.byteOffset),
              weightSpecs: classifiers[m].json.weightsManifest[0].weights
            };
          }
        });
        this.model[m].width = this.model[m].model.getLayer("inputLayer").batchInputShape[1];
        const y = this.model[m].inputInt ? new Int32Array(this.model[m].width).fill(0) : new Float32Array(this.model[m].width).fill(0);
        const p = this.model[m].model.predict(import_tfjs_node.tensor2d(y, [1, this.model[m].width]), {
          batchSize: 1,
          verbose: false
        });
        if (p.dataSync()[1] > 0) {
          this.model[m].loaded = true;
        }
      } else if (m === "bf") {
        this.model.bf.loaded = this.bf.load(classifiers.bf.rawModel, 0);
      }
    }
    this.model.kluge.loaded = this.bf.loadArray(new Uint32Array([1283416317, 3387457439, 4209112991, 3520002074, 1144686426, 3155412713, 3592297154, 308830083, 1130612061, 730418870, 1038915210, 3374557547, 3720788671, 2190049136, 1618358991, 1168865259, 752622717, 545310520, 1130253422, 1209003497, 987597691, 1459847669, 3070958455, 529761981, 1228838247, 978740476, 2520715720, 1415304893, 4070213315, 121028745, 4110337836, 712147284, 1337470519, 1111897967, 3023169381, 650969950, 392970344, 1894424605, 1584273708, 3829791236, 1775660966, 1325403779, 3364746613, 143827330, 2522860555, 278220957, 37677879, 1754752414, 175190658, 3604261002, 3121375234, 621027444, 1679379711, 3857678238, 3962210137, 1385103514, 3995533402, 4013474193, 3302042558, 4216881175]), 20, 1920, 1);
  }
  async qBEDFFNN(x, y) {
    const z = new Float32Array(this.model.bedffnn.width);
    z[0] = x[0] * y[0];
    z[1] = x[1] * y[1];
    z[2] = x[2] * y[2];
    z[3] = x[3] * y[3];
    z[4] = (x[4] + y[4]) / 2;
    const p = this.model.bedffnn.model.predict(import_tfjs_node.tensor2d(z, [1, this.model.bedffnn.width]), {
      batchSize: 1,
      verbose: false
    });
    if (p.dataSync()[1] < 0.99) {
      return false;
    } else {
      return true;
    }
  }
  async qBF(x) {
    return this.bf.query(x, 0);
  }
  qECNN(x) {
    const y = new Float32Array(this.model.ecnn.width);
    const l = x.length;
    const w = this.model.ecnn.width / 7;
    if (l === w) {
      for (let k = 6; k >= 0; k--) {
        const i2 = w * k;
        y[i2] = injectivePhones[k][x[0]];
        for (let j = l - 1; j > 0; j--) {
          y[i2 + j] = phones[k][x[j]];
        }
      }
    } else if (l > w) {
      for (let k = 6; k >= 0; k--) {
        const d = [];
        d[0] = {
          x: 1,
          y: injectivePhones[k][x[0]]
        };
        for (let j = l - 1; j > 0; j--) {
          d[j] = {
            x: j + 1,
            y: phones[k][x[j]]
          };
        }
        const o2 = import_downsample.LTTB(d, w);
        const i2 = w * k;
        for (let j = o2.length - 1; j >= 0; j--) {
          y[i2 + j] = o2[j].y;
        }
      }
    } else {
      const d = l / w;
      for (let k = 6; k >= 0; k--) {
        const i2 = w * k;
        for (let j = w - 1; j >= 0; j--) {
          const jx = j * d;
          const ji = Math.trunc(jx);
          const jn = ji + 1;
          let s0;
          if (ji === 0) {
            s0 = injectivePhones[k][x[0]];
          } else {
            s0 = phones[k][x[ji]];
          }
          let s1;
          if (l === 1) {
            s1 = s0;
          } else if (jn > l - 1) {
            s1 = phones[k][x[l - 1]];
          } else {
            s1 = phones[k][x[jn]];
          }
          y[i2 + j] = s0 + (jx - ji) * (s1 - s0);
        }
      }
    }
    const p = this.model.ecnn.model.predict(import_tfjs_node.tensor2d(y, [1, this.model.ecnn.width]), {
      batchSize: 1,
      verbose: false
    });
    return p.dataSync()[1];
  }
  async qKLUGE(x) {
    return this.bf.query(x, 1);
  }
  qLCNN(x) {
    const y = new Int32Array(this.model.lcnn.width).fill(0);
    let l = x.length;
    if (l > this.model.lcnn.width) {
      l = this.model.lcnn.width;
    }
    for (let k = l - 1; k >= 0; k--) {
      y[k] = c2i[x[k]];
    }
    const p = this.model.lcnn.model.predict(import_tfjs_node.tensor2d(y, [1, this.model.lcnn.width]), {
      batchSize: 1,
      verbose: false
    });
    return p.dataSync()[1];
  }
  qPDFFNN(x) {
    const y = new Int32Array(pseudosyllables.length).fill(0);
    for (let k = pseudosyllables.length - 1; k >= 0; k--) {
      for (let j = pseudosyllables[k].length - 1; j >= 0; j--) {
        y[k] = y[k] << 1;
        if (x.split(pseudosyllables[k][j]).length - 1 > 0) {
          y[k] = y[k] | 1;
        }
      }
    }
    const p = this.model.pdffnn.model.predict(import_tfjs_node.tensor2d(y, [1, this.model.pdffnn.width]), {
      batchSize: 1,
      verbose: false
    });
    return p.dataSync()[1];
  }
  async qUEDFFNN(x) {
    const p = this.model.uedffnn.model.predict(import_tfjs_node.tensor2d(x, [1, this.model.uedffnn.width]), {
      batchSize: 1,
      verbose: false
    });
    if (p.dataSync()[1] < 0.98) {
      return false;
    } else {
      return true;
    }
  }
  async queryBEDFFNN(x, y) {
    if (this.model.bedffnn.loaded === true) {
      return this.qBEDFFNN(x, y);
    } else if (await this.reCheck(6e4, "bedffnn") === true) {
      return this.qBEDFFNN(x, y);
    } else {
      console.error("Could not load bedffnn after 60 seconds!");
      return false;
    }
  }
  async queryBF(x) {
    if (this.model.bf.loaded === true) {
      return this.qBF(x);
    } else if (await this.reCheck(6e4, "bf") === true) {
      return this.qBF(x);
    } else {
      console.error("Could not load bf after 60 seconds!");
      return 0;
    }
  }
  async queryECNN(x) {
    if (this.model.ecnn.loaded === true) {
      return this.qECNN(x);
    } else if (await this.reCheck(6e4, "ecnn") === true) {
      return this.qECNN(x);
    } else {
      console.error("Could not load ecnn after 60 seconds!");
      return 0;
    }
  }
  async queryEnsemble(x) {
    const y = this.flatten.squash(x).replace(this.regularExpression.antiASCIIlowerCase, " ").replace(this.regularExpression.leadingSpace, "").replace(this.regularExpression.trailingSpace, "");
    const q = new Float32Array(this.model.uedffnn.width).fill(0);
    if (this.queryCache.has(y) === true) {
      return this.queryCache.get(y);
    } else if (await this.queryKLUGE(y) === 1) {
      this.queryCache.set(y, q);
      return q;
    } else {
      const z = y.split("");
      q[0] = await this.queryBF(y);
      q[1] = await this.queryECNN(z);
      q[2] = await this.queryLCNN(z);
      q[3] = await this.queryPDFFNN(y);
      q[4] = y.length / 58;
      this.queryCache.set(x, q);
      return q;
    }
  }
  async queryKLUGE(x) {
    if (this.model.kluge.loaded === true) {
      return this.qKLUGE(x);
    } else if (await this.reCheck(6e4, "kluge") === true) {
      return this.qKLUGE(x);
    } else {
      console.error("Could not load kluge after 60 seconds!");
      return 0;
    }
  }
  async queryLCNN(x) {
    if (this.model.lcnn.loaded === true) {
      return this.qLCNN(x);
    } else if (await this.reCheck(6e4, "lcnn") === true) {
      return this.qLCNN(x);
    } else {
      console.error("Could not load lcnn after 60 seconds!");
      return 0;
    }
  }
  async queryPDFFNN(x) {
    if (this.model.pdffnn.loaded === true) {
      return this.qPDFFNN(x);
    } else if (await this.reCheck(6e4, "pdffnn") === true) {
      return this.qPDFFNN(x);
    } else {
      console.error("Could not load pdffnn after 60 seconds!");
      return 0;
    }
  }
  async queryUEDFFNN(x) {
    if (this.model.uedffnn.loaded === true) {
      return this.qUEDFFNN(x);
    } else if (await this.reCheck(6e4, "uedffnn") === true) {
      return this.qUEDFFNN(x);
    } else {
      console.error("Could not load uedffnn after 60 seconds!");
      return false;
    }
  }
  async reCheck(ms, m) {
    if (await this.timeout(10, m) === true) {
      return true;
    } else if (ms - 10 < 0) {
      return false;
    } else {
      return this.reCheck(ms - 10, m);
    }
  }
  timeout(ms, m) {
    return new Promise((resolve) => setTimeout(resolve, ms, this.model[m].loaded));
  }
};
var Name = class {
};
var ScientificName2 = class extends Name {
  alpha(x, y) {
    if (x < y) {
      return -1;
    } else if (x > y) {
      return 1;
    } else {
      return 0;
    }
  }
  formatName(html = false) {
    let x = "";
    if (this.hasOwnProperty("Genus") === true || this.hasOwnProperty("nothogenus") === true) {
      if (this.hasOwnProperty("Genus") === true) {
        if (html === true) {
          x = "<i>" + this.Genus + "</i>";
        } else {
          x = this.Genus || "";
        }
      } else if (this.hasOwnProperty("nothogenus")) {
        if (this.nothogenus.length === 1) {
          if (html === true) {
            x = "<i>" + this.nothogenus[0] + "</i>";
          } else {
            x = this.nothogenus[0] || "";
          }
        } else {
          if (html === true) {
            x = "<i>" + this.nothogenus.sort(this.alpha).join("</i> \u2A09 <i>") + "</i>";
          } else {
            x = this.nothogenus.sort(this.alpha).join(" \u2A09 ");
          }
        }
      }
      if (this.hasOwnProperty("species") === true) {
        if (html === true && this.species !== "sp." && this.species !== "spp.") {
          x += " <i>" + this.species + "</i>";
        } else {
          x += " " + this.species;
        }
        if (this.hasOwnProperty("subspecies") === true) {
          if (html === true && this.subspecies !== "subspp." && this.subspecies !== "ssp.") {
            x += " subsp. <i>" + this.subspecies + "</i>";
          } else if (this.subspecies === "subspp." || this.subspecies === "ssp.") {
            x += " subspp.";
          } else {
            x += " subsp. " + this.subspecies;
          }
        }
        if (this.hasOwnProperty("variety") === true) {
          if (html === true) {
            x += " var. <i>" + this.variety + "</i>";
          } else {
            x += " var. " + this.variety;
          }
        }
        if (this.hasOwnProperty("forma") === true) {
          if (html === true) {
            x += " f. <i>" + this.forma + "</i>";
          } else {
            x += " f. " + this.forma;
          }
        }
      } else if (this.hasOwnProperty("nothospecies") === true) {
        if (this.nothospecies.length === 1) {
          if (html === true) {
            x += " <i>" + this.nothospecies[0] + "</i>";
          } else {
            x += " " + this.nothospecies[0];
          }
        } else {
          if (html === true) {
            x += " <i>" + this.nothospecies.sort(this.alpha).join("</i> \u2A09 <i>") + "</i>";
          } else {
            x += " " + this.nothospecies.sort(this.alpha).join(" \u2A09 ");
          }
        }
      } else {
        x = "";
      }
    }
    return x;
  }
};
var ScientificName = ScientificName2;
ScientificName.SInit = (() => {
  ScientificName2.prototype.extracted = false;
})();
var Extractor = class {
  constructor() {
    this.regularExpression = new RegularExpression();
  }
  checkExtract(x) {
    if (x.hasOwnProperty("Genus") === true && x.Genus.length >= 2 || x.hasOwnProperty("nothogenus") === true && x.nothogenus.length >= 1) {
      if (x.hasOwnProperty("species") === true && x.species.length >= 2 || x.hasOwnProperty("nothospecies") === true && x.nothospecies.length >= 1) {
        x.extracted = true;
        if (x.hasOwnProperty("nothogenus") === true) {
          for (let k = x.nothogenus.length - 1; k >= 0; k--) {
            if (x.nothogenus[k].length < 2) {
              x.extracted = false;
            }
          }
        }
        if (x.hasOwnProperty("nothospecies") === true) {
          for (let k = x.nothospecies.length - 1; k >= 0; k--) {
            if (x.nothospecies[k].length < 2) {
              x.extracted = false;
            }
          }
        }
      }
    }
    if (x.hasOwnProperty("subspecies") === true && x.subspecies.length < 2) {
      delete x.subspecies;
    }
    if (x.hasOwnProperty("species") === true && x.hasOwnProperty("subspecies") === true && x.species.length === 2) {
      const s = x.subspecies.split("")[0] + ".";
      if (x.species === s) {
        x.species = x.subspecies;
      }
    }
    if (x.hasOwnProperty("variety") === true && x.variety.length < 2) {
      delete x.variety;
    }
    if (x.hasOwnProperty("forma") === true && x.forma.length < 2) {
      delete x.forma;
    }
    return x;
  }
  formatGenus(x) {
    if (x == null) {
      return "";
    } else {
      const y = x.replace(this.regularExpression.nothogenus, genusClean);
      let z = "";
      if (y.charAt(0) === "\u2A09") {
        z = "\u2A09" + y.charAt(1).toUpperCase().replace(this.regularExpression.antiUpperCase, "") + y.substr(2).toLowerCase().replace(this.regularExpression.antiLowerCase, "");
      } else {
        z = y.charAt(0).toUpperCase().replace(this.regularExpression.antiUpperCase, "") + y.substr(1).toLowerCase().replace(this.regularExpression.antiLowerCase, "");
      }
      return z;
    }
  }
  formatSpecies(x, c) {
    if (x == null) {
      return "";
    } else {
      const y = x.split(this.regularExpression.closingExtras)[0].replace(this.regularExpression.nothospecies, nomenClean).toLowerCase().replace(this.regularExpression.antiLowerCase, "");
      if (this.regularExpression.abbreviatedSpecies(y, c) === true) {
        return y;
      } else {
        return y.replace(this.regularExpression.endPeriod, "").replace(this.regularExpression.sp, spp);
      }
    }
  }
  formatSubspecies(x) {
    if (x == null) {
      return "";
    } else {
      return x.split(this.regularExpression.closingExtras)[0].replace(this.regularExpression.nomen, nomenClean).toLowerCase().replace(this.regularExpression.antiLowerCase, "").replace(this.regularExpression.endPeriod, "").replace(this.regularExpression.ssp, sspp);
    }
  }
  formatVarietyForma(x) {
    if (x == null) {
      return "";
    } else {
      return x.split(this.regularExpression.closingExtras)[0].replace(this.regularExpression.nomen, nomenClean).toLowerCase().replace(this.regularExpression.antiLowerCase, "").replace(this.regularExpression.endPeriod, "");
    }
  }
  scientificName(x, c) {
    const n = new ScientificName();
    if (x != null) {
      const y = x.replace(this.regularExpression.openingExtras, "").split(" ");
      let i2 = 0;
      if (this.regularExpression.nothogenusFormula(y[i2] + " " + y[i2 + 1] + " " + y[i2 + 2], c) === true) {
        n.nothogenus = [
          this.formatGenus(y[i2]),
          this.formatGenus(y[i2 + 2])
        ];
        i2 += 3;
      } else if (this.regularExpression.nGenus(y[i2], c) === true) {
        n.nothogenus = [this.formatGenus(y[i2])];
        i2++;
      } else {
        n.Genus = this.formatGenus(y[i2]);
        i2++;
      }
      if (this.regularExpression.abbreviatedSection(y[i2]) === true) {
        i2++;
      } else if (this.regularExpression.section(y[i2], c) === true) {
        i2 += 2;
      }
      if (this.regularExpression.affinis(y[i2], c) === true || this.regularExpression.conferatur(y[i2], c) === true || this.regularExpression.questionMark(y[i2]) === true) {
        i2++;
      } else if (this.regularExpression.speciesAffinis(y[i2], y[i2 + 1], c) === true) {
        i2 += 2;
      }
      if (this.regularExpression.nothoFormula(y[i2 + 1]) === true) {
        if (this.regularExpression.name(y[i2], true, c) === true && this.regularExpression.name(y[i2 + 2], true, c) === true) {
          n.nothospecies = [
            this.formatSpecies(y[i2], c),
            this.formatSpecies(y[i2 + 2], c)
          ];
          if (this.regularExpression.endName(y[i2 + 2], c) === true) {
            return this.checkExtract(n);
          }
          i2 += 3;
        } else {
          return this.checkExtract(n);
        }
      } else if (this.regularExpression.nothoFormula(y[i2]) === true) {
        if (this.regularExpression.name(y[i2 + 1], true, c) === true) {
          n.nothospecies = [this.formatSpecies("\u2A09" + y[i2 + 1], c)];
          if (this.regularExpression.endName(y[i2 + 1], c) === true) {
            return this.checkExtract(n);
          }
          i2 += 2;
        } else {
          return this.checkExtract(n);
        }
      } else if (this.regularExpression.nSpecies(y[i2], c) === true) {
        n.nothospecies = [this.formatSpecies(y[i2], c)];
        if (this.regularExpression.endName(y[i2], c) === true) {
          return this.checkExtract(n);
        }
        i2++;
      } else if (this.regularExpression.name(y[i2], true, c) === true) {
        n.species = this.formatSpecies(y[i2], c);
        if (this.regularExpression.endName(y[i2], c) === true || this.regularExpression.ambiguousSpecies(y[i2], c) === true) {
          return this.checkExtract(n);
        }
        i2++;
      } else {
        return this.checkExtract(n);
      }
      for (let k = 0; k < 5; k++) {
        if (this.regularExpression.subspecies(y[i2 + k], c) === true) {
          if (this.regularExpression.name(y[i2 + k + 1], true, c) === true) {
            n.subspecies = this.formatSubspecies(y[i2 + k + 1]);
            if (this.regularExpression.endName(y[i2 + k + 1], c) === true) {
              return this.checkExtract(n);
            }
            i2 += k + 2;
          } else if (this.regularExpression.name(y[i2 + k], true, c) === true) {
            n.subspecies = this.formatSubspecies(y[i2 + k]);
            if (this.regularExpression.endName(y[i2 + k], c) === true) {
              return this.checkExtract(n);
            }
            i2 += k + 1;
          }
          break;
        } else if (k === 0 && this.regularExpression.name(y[i2], false, c) === true && this.regularExpression.authorString(y[i2 + 1], c) === false && this.regularExpression.variety(y[i2], c) === false && this.regularExpression.forma(y[i2], c) === false) {
          n.subspecies = this.formatSubspecies(y[i2]);
          return this.checkExtract(n);
        }
      }
      for (let k = 0; k < 5; k++) {
        if (this.regularExpression.variety(y[i2 + k], c) === true) {
          if (this.regularExpression.name(y[i2 + k + 1], true, c) === true) {
            n.variety = this.formatVarietyForma(y[i2 + k + 1]);
            if (this.regularExpression.endName(y[i2 + k + 1], c) === true) {
              return this.checkExtract(n);
            }
            i2 += k + 2;
          }
          break;
        }
      }
      for (let k = 0; k < 5; k++) {
        if (this.regularExpression.forma(y[i2 + k], c) === true) {
          if (this.regularExpression.name(y[i2 + k + 1], true, c) === true) {
            n.forma = this.formatVarietyForma(y[i2 + k + 1]);
          }
          break;
        }
      }
    }
    return this.checkExtract(n);
  }
};
var LRUCache2 = require_lru_cache();
var Abbreviation = class {
};
var AbbreviationRecord = class {
  constructor(init) {
    Object.assign(this, init);
  }
};
var Quaesitor = class {
  constructor() {
    this.classifier = new Classifier();
    this.extract = new Extractor();
    this.queryCacheBinomial = new LRUCache2(8192);
    this.queryCacheUninomial = new LRUCache2(8192);
    this.regularExpression = new RegularExpression();
    this.xxhash = new XXhash();
  }
  abbreviate(a, g, s, o2) {
    const lg = g.length - 1;
    const ls = s.length - 1;
    for (let k = 2; k > 0; k--) {
      const ge = g.substring(0, lg < k ? lg : k) + ".";
      if (o2 === true) {
        const sp = s.substring(0, ls < k ? ls : k) + ".";
        a[this.formatSpecies(g, sp)] = new AbbreviationRecord({
          expansion: s
        });
        a[this.formatSpecies(ge, sp)] = new AbbreviationRecord({
          expansion: s
        });
      }
      a[ge] = new AbbreviationRecord({
        expansion: g
      });
    }
    return a;
  }
  alpha(x, y) {
    if (x < y) {
      return -1;
    } else if (x > y) {
      return 1;
    } else {
      return 0;
    }
  }
  async extractSpecies(x, htmlFormat) {
    let a = new Abbreviation();
    let m;
    const e = [];
    const y = " " + x.normalize("NFC").replace(this.regularExpression.html, "").replace(this.regularExpression.unusualPunctuation, " ").replace(this.regularExpression.lineEnding, "\n").replace(this.regularExpression.separator, " ").replace(this.regularExpression.missingSpace, insertSpace).replace(this.regularExpression.dash, "-").replace(this.regularExpression.dashPlus, "-").replace(this.regularExpression.spaceDashEnd, " - ").replace(this.regularExpression.dashEnd, "").replace(this.regularExpression.symbolRemoval, bufferCapture).replace(this.regularExpression.pluralPossesive, " ").replace(this.regularExpression.synonym, "").replace(this.regularExpression.questionable, "").replace(this.regularExpression.endLine, " ").replace(this.regularExpression.spacePlus, " ");
    while ((m = this.regularExpression.nomenNudem.exec(y)) !== null) {
      let c = false;
      let m1 = m[1];
      let m2 = m[2];
      if (m[1] == null && m[2] == null) {
        c = true;
        m1 = m[3];
        m2 = m[4];
      }
      const g = this.regularExpression.abbreviatedGenus(m1, c);
      const s = this.regularExpression.abbreviatedSpecies(m2, c);
      let n = new ScientificName();
      const q = y.substr(m.index);
      if (g === true && s === true) {
        n = this.extract.scientificName(q, c);
        if (n.extracted === true) {
          if (n.hasOwnProperty("Genus") === true && a.hasOwnProperty(n.Genus) === true) {
            n.Genus = a[n.Genus].expansion;
          }
          if (n.hasOwnProperty("Genus") === true && n.hasOwnProperty("species") === true) {
            const sp = this.formatSpecies(n.Genus, n.species);
            if (a.hasOwnProperty(sp) === true) {
              n.species = a[sp].expansion;
            }
          }
        }
      } else if (g === true) {
        if (await this.queryUninomial(m2) === true) {
          n = this.extract.scientificName(q, c);
          if (n.extracted === true && n.hasOwnProperty("Genus") === true && a.hasOwnProperty(n.Genus) === true) {
            n.Genus = a[n.Genus].expansion;
            if (n.hasOwnProperty("species") === true) {
              a = this.abbreviate(a, n.Genus, n.species, false);
            }
          }
        }
      } else if (s === true) {
        if (await this.queryUninomial(m1) === true) {
          n = this.extract.scientificName(q, c);
          if (n.extracted === true && n.hasOwnProperty("Genus") === true && n.hasOwnProperty("species") === true) {
            const sp = this.formatSpecies(n.Genus, n.species);
            if (a.hasOwnProperty(sp) === true) {
              n.species = a[sp].expansion;
            }
          }
        }
      } else if (await this.queryBinomial(m1, m2) === true) {
        n = this.extract.scientificName(q, c);
        if (n.extracted === true && n.hasOwnProperty("Genus") === true && n.hasOwnProperty("species") === true) {
          a = this.abbreviate(a, n.Genus, n.species, true);
        }
      }
      if (n.extracted === true) {
        for (const p in n) {
          if ((p === "forma" || p === "subspecies" || p === "variety") && await this.queryUninomial(n[p]) === false) {
            delete n[p];
          }
        }
        e.push(n);
      }
    }
    const h2 = {};
    const u2 = [];
    for (let k = e.length - 1; k >= 0; k--) {
      if (e[k].hasOwnProperty("Genus") === true && this.regularExpression.abbreviatedGenus(e[k].Genus, false) === true && a.hasOwnProperty(e[k].Genus) === true) {
        e[k].Genus = a[e[k].Genus].expansion;
      }
      if (e[k].hasOwnProperty("Genus") === true && e[k].hasOwnProperty("species") === true && this.regularExpression.abbreviatedSpecies(e[k].species, false) === true) {
        const sp = this.formatSpecies(e[k].Genus, e[k].species);
        if (a.hasOwnProperty(sp) === true) {
          e[k].species = a[sp].expansion;
        }
      }
      const f = e[k].formatName(htmlFormat);
      const h64 = await this.xxhash.h64(f);
      if (h2.hasOwnProperty(h64) === false) {
        h2[h64] = true;
        u2.push(f);
      }
    }
    return u2.sort(this.alpha);
  }
  formatSpecies(g, s) {
    return g + " " + s;
  }
  async loadClassifiers() {
    this.classifier.load();
  }
  async queryBinomial(x, y) {
    const z = this.formatSpecies(x, y).toLowerCase();
    if (this.queryCacheBinomial.has(z) === true) {
      return this.queryCacheBinomial.get(z);
    } else if (await this.classifier.queryKLUGE(z) === 1) {
      this.queryCacheBinomial.set(z, false);
      return false;
    } else {
      const r = await this.classifier.queryBEDFFNN(await this.classifier.queryEnsemble(x), await this.classifier.queryEnsemble(y));
      this.queryCacheBinomial.set(z, r);
      return r;
    }
  }
  async queryUninomial(x) {
    const y = x.toLowerCase();
    if (this.queryCacheUninomial.has(y) === true) {
      return this.queryCacheUninomial.get(y);
    } else {
      const r = await this.classifier.queryUEDFFNN(await this.classifier.queryEnsemble(x));
      this.queryCacheUninomial.set(y, r);
      return r;
    }
  }
};

// src/index.ts
process.env.TF_CPP_MIN_LOG_LEVEL = "2";
var h = false;
var i = null;
var o = null;
for (let k = process.argv.length - 1; k >= 0; k--) {
  if (process.argv[k] === "-h") {
    h = true;
  } else if (process.argv[k] === "-i") {
    if (checkFile(process.argv[k + 1]) === true) {
      i = process.argv[k + 1];
    }
  } else if (process.argv[k] === "-o") {
    if (string(process.argv[k + 1]) === true) {
      o = process.argv[k + 1];
    }
  }
}
if (notNULL(i) === true && checkPipe() === false && notNULL(o) === true) {
  readFile(i, h).then((x) => {
    writeFile(o, x);
  });
} else if (notNULL(i) === true && checkPipe() === false && notNULL(o) === false) {
  readFile(i, h).then((x) => {
    writeStream(x);
  });
} else if (notNULL(i) === false && checkPipe() === true && notNULL(o) === true) {
  readStream(h).then((x) => {
    writeFile(o, x);
  });
} else if (notNULL(i) === false && checkPipe() === true && notNULL(o) === false) {
  readStream(h).then((x) => {
    writeStream(x);
  });
} else {
  let x = "\nA TypeScript command\u2013line interface for QUAESITOR that finds Latin scientific\nnames within vernacular text. Input data should be plain text. QUAESITOR reads\nwhole files before processing, so use small files, or have a lot of RAM.\n\nIf you use this software, please cite: Little, D.P. 2020. Recognition of\nLatin scientific names using artificial neural networks. Applications in Plant\nSciences 8(7): e11378 (https://doi.org/10.1002/aps3.11378).\n\nusage: quaesitor [ -h ] [ -i input-file.txt ] [ -o output-file ]\nwhere:\n-h	html formatted output (default plain text)\n-i	input file in plain text format (if not specified, stdin will be used)\n-o	output file name (if not specified, stdout will be used)\n\n";
  process.stderr.write(x, "utf8");
}
function checkFile(file) {
  try {
    return import_fs.default.statSync(file).isFile();
  } catch (error) {
    return false;
  }
}
function checkPipe() {
  if (process.stdin.isTTY) {
    return false;
  } else {
    return true;
  }
}
function notNULL(x) {
  return Object.prototype.toString.call(x) === "[object String]";
}
async function processInput(x, h2) {
  const q = new Quaesitor();
  await q.loadClassifiers();
  return q.extractSpecies(x, h2);
}
async function readFile(i2, h2) {
  return processInput(import_fs.default.readFileSync(i2, "utf8"), h2);
}
async function readStream(h2) {
  return processInput(import_fs.default.readFileSync(0, "utf8"), h2);
}
function writeFile(o2, x) {
  import_fs.default.writeFileSync(o2, x.join("\n") + "\n", "utf8");
}
function writeStream(x) {
  process.stdout.write(x.join("\n") + "\n", "utf8");
}
function string(x) {
  return Object.prototype.toString.call(x) === "[object String]";
}
//# sourceMappingURL=index.js.map
